--- ruby-3.2.9.a/miniprelude.c	2025-07-24 04:27:20.000000000 -0400
+++ ruby-3.2.9.b/miniprelude.c	2025-08-21 13:55:42.503012244 -0400
@@ -641,7 +641,9 @@ static const struct {
     RBIMPL_ATTR_NONSTRING() char L0[492]; /* 1..70 */
     RBIMPL_ATTR_NONSTRING() char L70[495]; /* 71..230 */
     RBIMPL_ATTR_NONSTRING() char L230[507]; /* 231..272 */
-    RBIMPL_ATTR_NONSTRING() char L272[455]; /* 273..297 */
+    RBIMPL_ATTR_NONSTRING() char L272[489]; /* 273..339 */
+    RBIMPL_ATTR_NONSTRING() char L339[506]; /* 340..380 */
+    RBIMPL_ATTR_NONSTRING() char L380[39]; /* 381..383 */
 } prelude_code2 = {
 #line 1 "gc.rb"
 ""/* for gc.c */
@@ -937,6 +939,94 @@ static const struct {
 "      ULL2NUM(rb_objspace.profile.total_time_ns)\n"
 "    }\n"
 "  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.enable_stats	  => true or false */
+"\n"/*  */
+"\n"/* Enables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already enabled. */
+"\n"/*  */
+"\n"/*    GC.enable_stats	 #=> false or true */
+"\n"/*    GC.enable_stats	 #=> true */
+"  def self.enable_stats\n"
+"    Primitive.gc_enable_stats\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.disable_stats	   => true or false */
+"\n"/*  */
+"\n"/* Disables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already disabled. */
+"\n"/*  */
+"\n"/*    GC.disable_stats	  #=> false or true */
+"\n"/*    GC.disable_stats	  #=> true */
+"  def self.disable_stats\n"
+"    Primitive.gc_disable_stats\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.stats_enabled?    => true or false */
+"\n"/*  */
+"\n"/* Check whether GC stats have been enabled. */
+"\n"/*  */
+"\n"/*    GC.stats_enabled?   #=> false or true */
+"  def self.stats_enabled?\n"
+"    Primitive.gc_stats_enabled\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.time	  => Integer */
+"\n"/*  */
+"\n"/* Returns the time spent during garbage collection while GC statistics collection */
+"\n"/* was enabled (in micro seconds). */
+"\n"/*  */
+"\n"/*    GC.time	  #=> 20000 */
+"  def self.time\n"
+"    Primitive.gc_time\n"
+"  end\n"
+"\n"
+"\n"/*  call-seq: */
+"\n"/* GC.heap_slots	=> Integer */
+"\n"/*  */
+"\n"/*  Returns the number of heap slots available for object allocations. */
+"\n"/*  */
+"\n"/* GC.heap_slots	#=> 10000 */
+,
+#line 340 "gc.rb"
+"  def self.heap_slots\n"
+"    Primitive.gc_heap_slots\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.heap_slots_live_after_last_gc	   => Integer */
+"\n"/*  */
+"\n"/* Returns the number of heap slots which were live after the last garbage collection. */
+"\n"/*  */
+"\n"/*    GC.heap_slots_live_after_last_gc	   #=> 231223 */
+"  def self.heap_slots_live_after_last_gc\n"
+"    Primitive.gc_heap_slots_live_after_last_gc\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_mallocs	   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number malloc calls. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_mallocs	   #=> 324234323246 */
+"  def self.total_mallocs\n"
+"    Primitive.gc_total_mallocs\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_malloced_bytes	   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number of bytes allocated. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_malloced_bytes	   #=> 354656256432446 */
+"  def self.total_malloced_bytes\n"
+"    Primitive.gc_total_malloced_bytes\n"
+"  end\n"
+"\n"
 "end\n"
 "\n"
 "module ObjectSpace\n"
@@ -944,9 +1034,11 @@ static const struct {
 "    Primitive.gc_start_internal full_mark, immediate_mark, immediate_sweep, false\n"
 "  end\n"
 "\n"
+,
+#line 381 "gc.rb"
 "  module_function :garbage_collect\n"
 "end\n"
-#line 950 "miniprelude.c"
+#line 1042 "miniprelude.c"
 };
 
 static const char prelude_name3[] = "<internal:numeric>";
@@ -1371,7 +1463,7 @@ static const struct {
 "  end\n"
 "\n"
 "end\n"
-#line 1375 "miniprelude.c"
+#line 1467 "miniprelude.c"
 };
 
 static const char prelude_name4[] = "<internal:io>";
@@ -1502,7 +1594,7 @@ static const struct {
 "    Primitive.io_write_nonblock(buf, exception)\n"
 "  end\n"
 "end\n"
-#line 1506 "miniprelude.c"
+#line 1598 "miniprelude.c"
 };
 
 static const char prelude_name5[] = "<internal:marshal>";
@@ -1550,7 +1642,7 @@ static const struct {
 "    alias restore load\n"
 "  end\n"
 "end\n"
-#line 1554 "miniprelude.c"
+#line 1646 "miniprelude.c"
 };
 
 static const char prelude_name6[] = "<internal:mjit>";
@@ -1598,7 +1690,7 @@ static const struct {
 "    private_constant(*constants)\n"
 "  end\n"
 "end\n"
-#line 1602 "miniprelude.c"
+#line 1694 "miniprelude.c"
 };
 
 static const char prelude_name7[] = "<internal:mjit_c>";
@@ -2683,7 +2775,7 @@ static const struct {
 ,
 #line 807 "mjit_c.rb"
 "end if RubyVM::MJIT.enabled? && RubyVM::MJIT.const_defined?(:C)\n"/* not defined for miniruby */
-#line 2687 "miniprelude.c"
+#line 2779 "miniprelude.c"
 };
 
 static const char prelude_name8[] = "<internal:pack>";
@@ -2722,7 +2814,7 @@ static const struct {
 "    Primitive.pack_unpack1(fmt, offset)\n"
 "  end\n"
 "end\n"
-#line 2726 "miniprelude.c"
+#line 2818 "miniprelude.c"
 };
 
 static const char prelude_name9[] = "<internal:trace_point>";
@@ -3159,7 +3251,7 @@ static const struct {
 "    Primitive.tracepoint_attr_instruction_sequence\n"
 "  end\n"
 "end\n"
-#line 3163 "miniprelude.c"
+#line 3255 "miniprelude.c"
 };
 
 static const char prelude_name10[] = "<internal:warning>";
@@ -3220,7 +3312,7 @@ static const struct {
 "    Primitive.rb_warn_m(msgs, uplevel, category)\n"
 "  end\n"
 "end\n"
-#line 3224 "miniprelude.c"
+#line 3316 "miniprelude.c"
 };
 
 static const char prelude_name11[] = "<internal:array>";
@@ -3297,7 +3389,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 3301 "miniprelude.c"
+#line 3393 "miniprelude.c"
 };
 
 static const char prelude_name12[] = "<internal:kernel>";
@@ -3486,7 +3578,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 3490 "miniprelude.c"
+#line 3582 "miniprelude.c"
 };
 
 static const char prelude_name13[] = "<internal:ractor>";
@@ -4357,7 +4449,7 @@ static const struct {
 "    }\n"
 "  end\n"
 "end\n"
-#line 4361 "miniprelude.c"
+#line 4453 "miniprelude.c"
 };
 
 static const char prelude_name14[] = "<internal:symbol>";
@@ -4380,7 +4472,7 @@ static const struct {
 "\n"
 "  alias intern to_sym\n"
 "end\n"
-#line 4384 "miniprelude.c"
+#line 4476 "miniprelude.c"
 };
 
 static const char prelude_name15[] = "<internal:timev>";
@@ -4798,7 +4890,7 @@ static const struct {
 "    Primitive.time_init_args(year, mon, mday, hour, min, sec, zone)\n"
 "  end\n"
 "end\n"
-#line 4802 "miniprelude.c"
+#line 4894 "miniprelude.c"
 };
 
 static const char prelude_name16[] = "<internal:thread_sync>";
@@ -4877,7 +4969,7 @@ static const struct {
 "    alias_method :<<, :push\n"
 "  end\n"
 "end\n"
-#line 4881 "miniprelude.c"
+#line 4973 "miniprelude.c"
 };
 
 static const char prelude_name17[] = "<internal:nilclass>";
@@ -4910,7 +5002,7 @@ static const struct {
 "    return 0.0\n"
 "  end\n"
 "end\n"
-#line 4914 "miniprelude.c"
+#line 5006 "miniprelude.c"
 };
 
 static const char prelude_name18[] = "<internal:prelude>";
@@ -4949,7 +5041,7 @@ static const struct {
 "    klass.new(self, *args, &block)\n"
 "  end\n"
 "end\n"
-#line 4953 "miniprelude.c"
+#line 5045 "miniprelude.c"
 };
 
 static const char prelude_name19[] = "<internal:gem_prelude>";
@@ -4986,7 +5078,7 @@ static const struct {
 #line 25 "gem_prelude.rb"
 "end if defined?(SyntaxSuggest)\n"
 "\n"
-#line 4990 "miniprelude.c"
+#line 5082 "miniprelude.c"
 };
 
 static const char prelude_name20[] = "<internal:yjit>";
@@ -5413,7 +5505,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 5417 "miniprelude.c"
+#line 5509 "miniprelude.c"
 };
 
 COMPILER_WARNING_POP
