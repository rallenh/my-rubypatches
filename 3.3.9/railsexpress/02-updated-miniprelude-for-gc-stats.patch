--- ruby-3.3.9.a/miniprelude.c	2025-07-24 06:04:30.000000000 -0400
+++ ruby-3.3.9.b/miniprelude.c	2025-08-21 14:27:08.836909072 -0400
@@ -336,12 +336,12 @@ static const struct {
 ""/* Some examples on this page use this simple file tree: */
 ""/*  */
 ""/*   example/ */
-""/*   \xE2\x94\x9C\xE2\x94\x80\xE2\x94\x80 config.h */
-""/*   \xE2\x94\x9C\xE2\x94\x80\xE2\x94\x80 lib/ */
-""/*   \xE2\x94\x82   \xE2\x94\x9C\xE2\x94\x80\xE2\x94\x80 song/ */
-""/*   \xE2\x94\x82   \xE2\x94\x82   \xE2\x94\x94\xE2\x94\x80\xE2\x94\x80 karaoke.rb */
-""/*   \xE2\x94\x82   \xE2\x94\x94\xE2\x94\x80\xE2\x94\x80 song.rb */
-""/*   \xE2\x94\x94\xE2\x94\x80\xE2\x94\x80 main.rb */
+""/*   \u251C\u2500\u2500 config.h */
+""/*   \u251C\u2500\u2500 lib/ */
+""/*   \u2502   \u251C\u2500\u2500 song/ */
+""/*   \u2502   \u2502   \u2514\u2500\u2500 karaoke.rb */
+""/*   \u2502   \u2514\u2500\u2500 song.rb */
+""/*   \u2514\u2500\u2500 main.rb */
 ""/*  */
 ""/* Others use the file tree for the */
 ""/* {Ruby project itself}[https://github.com/ruby/ruby]. */
@@ -833,8 +833,9 @@ static const struct {
     RBIMPL_ATTR_NONSTRING() char L0[498]; /* 1..76 */
     RBIMPL_ATTR_NONSTRING() char L76[507]; /* 77..253 */
     RBIMPL_ATTR_NONSTRING() char L253[506]; /* 254..299 */
-    RBIMPL_ATTR_NONSTRING() char L299[476]; /* 300..330 */
-    RBIMPL_ATTR_NONSTRING() char L330[39]; /* 331..333 */
+    RBIMPL_ATTR_NONSTRING() char L299[497]; /* 300..364 */
+    RBIMPL_ATTR_NONSTRING() char L364[469]; /* 365..413 */
+    RBIMPL_ATTR_NONSTRING() char L413[128]; /* 414..419 */
 } prelude_code2 = {
 #line 1 "gc.rb"
 ""/* for gc.c */
@@ -1165,19 +1166,107 @@ static const struct {
 "      ULL2NUM(rb_objspace.profile.marking_time_ns + rb_objspace.profile.sweeping_time_ns)\n"
 "    }\n"
 "  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.enable_stats\t  => true or false */
+"\n"/*  */
+"\n"/* Enables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already enabled. */
+"\n"/*  */
+"\n"/*    GC.enable_stats\t #=> false or true */
+"\n"/*    GC.enable_stats\t #=> true */
+"  def self.enable_stats\n"
+"    Primitive.gc_enable_stats\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.disable_stats\t   => true or false */
+"\n"/*  */
+"\n"/* Disables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already disabled. */
+"\n"/*  */
+"\n"/*    GC.disable_stats\t  #=> false or true */
+"\n"/*    GC.disable_stats\t  #=> true */
+"  def self.disable_stats\n"
+"    Primitive.gc_disable_stats\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.stats_enabled?    => true or false */
+"\n"/*  */
+"\n"/* Check whether GC stats have been enabled. */
+"\n"/*  */
+"\n"/*    GC.stats_enabled?   #=> false or true */
+"  def self.stats_enabled?\n"
+"    Primitive.gc_stats_enabled\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.time\t  => Integer */
+"\n"/*  */
+"\n"/* Returns the time spent during garbage collection while GC statistics collection */
+"\n"/* was enabled (in micro seconds). */
+"\n"/*  */
+"\n"/*    GC.time\t  #=> 20000 */
+,
+#line 365 "gc.rb"
+"  def self.time\n"
+"    Primitive.gc_time\n"
+"  end\n"
+"\n"
+"\n"/*  call-seq: */
+"\n"/* GC.heap_slots\t=> Integer */
+"\n"/*  */
+"\n"/*  Returns the number of heap slots available for object allocations. */
+"\n"/*  */
+"\n"/* GC.heap_slots\t#=> 10000 */
+"  def self.heap_slots\n"
+"    Primitive.gc_heap_slots\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.heap_slots_live_after_last_gc\t   => Integer */
+"\n"/*  */
+"\n"/* Returns the number of heap slots which were live after the last garbage collection. */
+"\n"/*  */
+"\n"/*    GC.heap_slots_live_after_last_gc\t   #=> 231223 */
+"  def self.heap_slots_live_after_last_gc\n"
+"    Primitive.gc_heap_slots_live_after_last_gc\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_mallocs\t   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number malloc calls. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_mallocs\t   #=> 324234323246 */
+"  def self.total_mallocs\n"
+"    Primitive.gc_total_mallocs\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_malloced_bytes\t   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number of bytes allocated. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_malloced_bytes\t   #=> 354656256432446 */
+"  def self.total_malloced_bytes\n"
+"    Primitive.gc_total_malloced_bytes\n"
+"  end\n"
+"\n"
 "end\n"
 "\n"
 "module ObjectSpace\n"
 "\n"/* Alias of GC.start */
 "  def garbage_collect full_mark: true, immediate_mark: true, immediate_sweep: true\n"
+,
+#line 414 "gc.rb"
 "    Primitive.gc_start_internal full_mark, immediate_mark, immediate_sweep, false\n"
 "  end\n"
 "\n"
-,
-#line 331 "gc.rb"
 "  module_function :garbage_collect\n"
 "end\n"
-#line 1181 "miniprelude.c"
+#line 1270 "miniprelude.c"
 };
 
 static const char prelude_name3[] = "<internal:numeric>";
@@ -1569,7 +1658,7 @@ static const struct {
 "  end\n"
 "\n"
 "end\n"
-#line 1573 "miniprelude.c"
+#line 1662 "miniprelude.c"
 };
 
 static const char prelude_name4[] = "<internal:io>";
@@ -1713,7 +1802,7 @@ static const struct {
 "    Primitive.io_readline(sep, limit, chomp)\n"
 "  end\n"
 "end\n"
-#line 1717 "miniprelude.c"
+#line 1806 "miniprelude.c"
 };
 
 static const char prelude_name5[] = "<internal:marshal>";
@@ -1761,7 +1850,7 @@ static const struct {
 "    alias restore load\n"
 "  end\n"
 "end\n"
-#line 1765 "miniprelude.c"
+#line 1854 "miniprelude.c"
 };
 
 static const char prelude_name6[] = "<internal:rjit>";
@@ -1813,7 +1902,7 @@ static const struct {
 "  require 'ruby_vm/rjit/hooks'\n"
 "  require 'ruby_vm/rjit/stats'\n"
 "end\n"
-#line 1817 "miniprelude.c"
+#line 1906 "miniprelude.c"
 };
 
 static const char prelude_name7[] = "<internal:rjit_c>";
@@ -4119,7 +4208,7 @@ static const struct {
 "\n"
 "\n"/* # RJIT bindgen end ### */
 "end if Primitive.rjit_enabled_p\n"
-#line 4123 "miniprelude.c"
+#line 4212 "miniprelude.c"
 };
 
 static const char prelude_name8[] = "<internal:pack>";
@@ -4158,7 +4247,7 @@ static const struct {
 "    Primitive.pack_unpack1(fmt, offset)\n"
 "  end\n"
 "end\n"
-#line 4162 "miniprelude.c"
+#line 4251 "miniprelude.c"
 };
 
 static const char prelude_name9[] = "<internal:trace_point>";
@@ -4593,7 +4682,7 @@ static const struct {
 "    Primitive.tracepoint_attr_instruction_sequence\n"
 "  end\n"
 "end\n"
-#line 4597 "miniprelude.c"
+#line 4686 "miniprelude.c"
 };
 
 static const char prelude_name10[] = "<internal:warning>";
@@ -4654,7 +4743,7 @@ static const struct {
 "    Primitive.rb_warn_m(msgs, uplevel, category)\n"
 "  end\n"
 "end\n"
-#line 4658 "miniprelude.c"
+#line 4747 "miniprelude.c"
 };
 
 static const char prelude_name11[] = "<internal:array>";
@@ -4825,7 +4914,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 4829 "miniprelude.c"
+#line 4918 "miniprelude.c"
 };
 
 static const char prelude_name12[] = "<internal:kernel>";
@@ -5151,7 +5240,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 5155 "miniprelude.c"
+#line 5244 "miniprelude.c"
 };
 
 static const char prelude_name13[] = "<internal:ractor>";
@@ -6033,7 +6122,7 @@ static const struct {
 "    }\n"
 "  end\n"
 "end\n"
-#line 6037 "miniprelude.c"
+#line 6126 "miniprelude.c"
 };
 
 static const char prelude_name14[] = "<internal:symbol>";
@@ -6054,7 +6143,7 @@ static const struct {
 "\n"
 "  alias intern to_sym\n"
 "end\n"
-#line 6058 "miniprelude.c"
+#line 6147 "miniprelude.c"
 };
 
 static const char prelude_name15[] = "<internal:timev>";
@@ -6483,7 +6572,7 @@ static const struct {
 "    Primitive.time_init_args(year, mon, mday, hour, min, sec, zone)\n"
 "  end\n"
 "end\n"
-#line 6487 "miniprelude.c"
+#line 6576 "miniprelude.c"
 };
 
 static const char prelude_name16[] = "<internal:thread_sync>";
@@ -6562,7 +6651,7 @@ static const struct {
 "    alias_method :<<, :push\n"
 "  end\n"
 "end\n"
-#line 6566 "miniprelude.c"
+#line 6655 "miniprelude.c"
 };
 
 static const char prelude_name17[] = "<internal:nilclass>";
@@ -6595,7 +6684,7 @@ static const struct {
 "    return 0.0\n"
 "  end\n"
 "end\n"
-#line 6599 "miniprelude.c"
+#line 6688 "miniprelude.c"
 };
 
 static const char prelude_name18[] = "<internal:prelude>";
@@ -6634,7 +6723,7 @@ static const struct {
 "    klass.new(self, *args, &block)\n"
 "  end unless instance_methods.include?(:to_set)\n"/* RJIT could already load this from builtin prelude */
 "end\n"
-#line 6638 "miniprelude.c"
+#line 6727 "miniprelude.c"
 };
 
 static const char prelude_name19[] = "<internal:gem_prelude>";
@@ -6673,7 +6762,7 @@ static const struct {
 "  warn \"`syntax_suggest' was not loaded.\"\n"
 "end if defined?(SyntaxSuggest)\n"
 "\n"
-#line 6677 "miniprelude.c"
+#line 6766 "miniprelude.c"
 };
 
 static const char prelude_name20[] = "<internal:yjit>";
@@ -7278,7 +7367,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 7282 "miniprelude.c"
+#line 7371 "miniprelude.c"
 };
 
 COMPILER_WARNING_POP
