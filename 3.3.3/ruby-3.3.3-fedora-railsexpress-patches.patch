diff -Nuarp ruby-3.3.3.a/abrt.c ruby-3.3.3.b/abrt.c
--- ruby-3.3.3.a/abrt.c	1969-12-31 19:00:00.000000000 -0500
+++ ruby-3.3.3.b/abrt.c	2024-07-15 21:17:29.932784485 -0400
@@ -0,0 +1,12 @@
+#include "internal.h"
+
+void
+Init_abrt(void)
+{
+  rb_eval_string(
+    "  begin\n"
+    "    require 'abrt'\n"
+    "  rescue LoadError\n"
+    "  end\n"
+  );
+}
diff -Nuarp ruby-3.3.3.a/common.mk ruby-3.3.3.b/common.mk
--- ruby-3.3.3.a/common.mk	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/common.mk	2024-07-15 21:17:33.832645144 -0400
@@ -111,7 +111,8 @@ PRISM_FILES = prism/api_node.$(OBJEXT) \
 		prism/prism.$(OBJEXT) \
 		prism_init.$(OBJEXT)
 
-COMMONOBJS    = array.$(OBJEXT) \
+COMMONOBJS    = abrt.$(OBJEXT) \
+                array.$(OBJEXT) \
 		ast.$(OBJEXT) \
 		bignum.$(OBJEXT) \
 		class.$(OBJEXT) \
@@ -1600,8 +1601,6 @@ yes-test-syntax-suggest: $(PREPARE_SYNTA
 	$(ACTIONS_ENDGROUP)
 no-test-syntax-suggest:
 
-check: $(DOT_WAIT) $(PREPARE_SYNTAX_SUGGEST) test-syntax-suggest
-
 test-bundler-precheck: $(TEST_RUNNABLE)-test-bundler-precheck
 no-test-bundler-precheck:
 yes-test-bundler-precheck: main $(arch)-fake.rb
diff -Nuarp ruby-3.3.3.a/configure.ac ruby-3.3.3.b/configure.ac
--- ruby-3.3.3.a/configure.ac	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/configure.ac	2024-07-15 21:17:41.494371396 -0400
@@ -136,7 +136,7 @@ RUBY_BASE_NAME=`echo ruby | sed "$progra
 RUBYW_BASE_NAME=`echo rubyw | sed "$program_transform_name"`
 AC_SUBST(RUBY_BASE_NAME)
 AC_SUBST(RUBYW_BASE_NAME)
-AC_SUBST(RUBY_VERSION_NAME, '${RUBY_BASE_NAME}-${ruby_version}')
+AC_SUBST(RUBY_VERSION_NAME, '${RUBY_BASE_NAME}-${ruby_version_dir_name}')
 
 dnl checks for alternative programs
 AC_CANONICAL_BUILD
@@ -830,7 +830,7 @@ AS_IF([test "$GCC" = yes], [
 
     # aarch64 branch protection
     AS_CASE(["$target_cpu"], [aarch64], [
-	AS_FOR(option, opt, [-mbranch-protection=pac-ret -msign-return-address=all], [
+	AS_FOR(option, opt, [-mbranch-protection=standard -mbranch-protection=pac-ret -msign-return-address=all], [
             RUBY_TRY_CFLAGS(option, [branch_protection=yes], [branch_protection=no])
             AS_IF([test "x$branch_protection" = xyes], [
                 # C compiler and assembler must be consistent for -mbranch-protection
@@ -3480,6 +3480,11 @@ AS_IF([test ${multiarch+set}], [
 ])
 
 archlibdir='${libdir}/${arch}'
+AC_ARG_WITH(archlibdir,
+	    AS_HELP_STRING([--with-archlibdir=DIR],
+			   [prefix for libruby [[LIBDIR/ARCH]]]),
+	    [archlibdir="$withval"])
+
 sitearchlibdir='${libdir}/${sitearch}'
 archincludedir='${includedir}/${arch}'
 sitearchincludedir='${includedir}/${sitearch}'
@@ -4269,9 +4274,6 @@ AS_CASE(["$target_os"],
     rubyw_install_name='$(RUBYW_INSTALL_NAME)'
     ])
 
-rubylibdir='${rubylibprefix}/${ruby_version}'
-rubyarchdir=${multiarch+'${rubyarchprefix}/${ruby_version}'}${multiarch-'${rubylibdir}/${arch}'}
-
 rubyarchprefix=${multiarch+'${archlibdir}/${RUBY_BASE_NAME}'}${multiarch-'${rubylibprefix}/${arch}'}
 AC_ARG_WITH(rubyarchprefix,
 	    AS_HELP_STRING([--with-rubyarchprefix=DIR],
@@ -4294,57 +4296,68 @@ AC_ARG_WITH(ridir,
 AC_SUBST(ridir)
 AC_SUBST(RI_BASE_NAME)
 
-AC_ARG_WITH(ruby-version,
-	    AS_HELP_STRING([--with-ruby-version=STR], [ruby version string for version specific directories [[full]] (full|minor|STR)]),
-            [ruby_version=$withval],
-            [ruby_version=full])
 unset RUBY_LIB_VERSION
-unset RUBY_LIB_VERSION_STYLE
-AS_CASE(["$ruby_version"],
-  [full],  [RUBY_LIB_VERSION_STYLE='3	/* full */'],
-  [minor], [RUBY_LIB_VERSION_STYLE='2	/* minor */'])
-AS_IF([test ${RUBY_LIB_VERSION_STYLE+set}], [
-    {
-    echo "#define RUBY_LIB_VERSION_STYLE $RUBY_LIB_VERSION_STYLE"
-    echo '@%:@include "confdefs.h"'
-    echo '#define STRINGIZE(x) x'
-    test -f revision.h -o -f "${srcdir}/revision.h" || echo '#define RUBY_REVISION 0'
-    echo '#include "version.h"'
-    echo 'ruby_version=RUBY_LIB_VERSION'
-    } > conftest.c
-    ruby_version="`$CPP -I. -I"${srcdir}" -I"${srcdir}/include" conftest.c | sed '/^ruby_version=/!d;s/ //g'`"
-    eval $ruby_version
-], [test -z "${ruby_version}"], [
-    AC_MSG_ERROR([No ruby version, No place for bundled libraries])
-], [
-    RUBY_LIB_VERSION="${ruby_version}"
-])
+RUBY_LIB_VERSION_STYLE='3	/* full */'
+{
+echo "#define RUBY_LIB_VERSION_STYLE $RUBY_LIB_VERSION_STYLE"
+echo '@%:@include "confdefs.h"'
+echo '#define STRINGIZE(x) x'
+test -f revision.h -o -f "${srcdir}/revision.h" || echo '#define RUBY_REVISION 0'
+echo '#include "version.h"'
+echo 'ruby_version=RUBY_LIB_VERSION'
+} > conftest.c
+ruby_version="`$CPP -I. -I"${srcdir}" -I"${srcdir}/include" conftest.c | sed '/^ruby_version=/!d;s/ //g'`"
+eval $ruby_version
+
+RUBY_LIB_VERSION="${ruby_version}"
+
 AC_SUBST(RUBY_LIB_VERSION_STYLE)
 AC_SUBST(RUBY_LIB_VERSION)
 
+AC_ARG_WITH(ruby-version,
+	    AS_HELP_STRING([--with-ruby-version=STR], [ruby version string for version specific directories [[full]] (full|STR)]),
+            [ruby_version_dir_name=$withval],
+            [ruby_version_dir_name=full])
+AS_CASE(["$ruby_version_dir_name"],
+  [full], [ruby_version_dir_name='${ruby_version}'])
+
+ruby_version_dir=/'${ruby_version_dir_name}'
+
+if test -z "${ruby_version_dir_name}"; then
+    unset ruby_version_dir
+    AC_DEFINE(RUBY_LIB_VERSION_BLANK, 1)
+fi
+
+rubylibdir='${rubylibprefix}'${ruby_version_dir}
+rubyarchdir=${multiarch+'${rubyarchprefix}'${ruby_version_dir}}${multiarch-'${rubylibdir}/${arch}'}
+
 AC_ARG_WITH(sitedir,
 	    AS_HELP_STRING([--with-sitedir=DIR], [site libraries in DIR [[RUBY_LIB_PREFIX/site_ruby]], "no" to disable site directory]),
             [sitedir=$withval],
             [sitedir='${rubylibprefix}/site_ruby'])
-sitelibdir='${sitedir}/${ruby_version}'
+sitelibdir='${sitedir}'${ruby_version_dir}
 
 AC_ARG_WITH(sitearchdir,
 	    AS_HELP_STRING([--with-sitearchdir=DIR],
 			   [architecture dependent site libraries in DIR [[SITEDIR/SITEARCH]], "no" to disable site directory]),
             [sitearchdir=$withval],
-            [sitearchdir=${multiarch+'${rubysitearchprefix}/site_ruby/${ruby_version}'}${multiarch-'${sitelibdir}/${sitearch}'}])
+            [sitearchdir=${multiarch+'${rubysitearchprefix}/site_ruby'${ruby_version_dir}}${multiarch-'${sitelibdir}/${sitearch}'}])
 
 AC_ARG_WITH(vendordir,
 	    AS_HELP_STRING([--with-vendordir=DIR], [vendor libraries in DIR [[RUBY_LIB_PREFIX/vendor_ruby]], "no" to disable vendor directory]),
             [vendordir=$withval],
             [vendordir='${rubylibprefix}/vendor_ruby'])
-vendorlibdir='${vendordir}/${ruby_version}'
+vendorlibdir='${vendordir}'${ruby_version_dir}
 
 AC_ARG_WITH(vendorarchdir,
 	    AS_HELP_STRING([--with-vendorarchdir=DIR],
 			   [architecture dependent vendor libraries in DIR [[VENDORDIR/SITEARCH]], "no" to disable vendor directory]),
             [vendorarchdir=$withval],
-            [vendorarchdir=${multiarch+'${rubysitearchprefix}/vendor_ruby/${ruby_version}'}${multiarch-'${vendorlibdir}/${sitearch}'}])
+            [vendorarchdir=${multiarch+'${rubysitearchprefix}/vendor_ruby'${ruby_version_dir}}${multiarch-'${vendorlibdir}/${sitearch}'}])
+
+AC_ARG_WITH(rubygemsdir,
+           AS_HELP_STRING([--with-rubygemsdir=DIR], [custom rubygems directory]),
+            [rubygemsdir=$withval])
 
 AS_IF([test "${LOAD_RELATIVE+set}"], [
     AC_DEFINE_UNQUOTED(LOAD_RELATIVE, $LOAD_RELATIVE)
@@ -4361,6 +4374,7 @@ AC_SUBST(sitearchincludedir)dnl
 AC_SUBST(arch)dnl
 AC_SUBST(sitearch)dnl
 AC_SUBST(ruby_version)dnl
+AC_SUBST(ruby_version_dir_name)dnl
 AC_SUBST(rubylibdir)dnl
 AC_SUBST(rubyarchdir)dnl
 AC_SUBST(sitedir)dnl
@@ -4369,10 +4383,13 @@ AC_SUBST(sitearchdir)dnl
 AC_SUBST(vendordir)dnl
 AC_SUBST(vendorlibdir)dnl
 AC_SUBST(vendorarchdir)dnl
+AC_SUBST(rubygemsdir)dnl
 
 AC_SUBST(CONFIGURE, "`echo $0 | sed 's|.*/||'`")dnl
 AC_SUBST(configure_args, "`echo "${ac_configure_args}" | sed 's/\\$/$$/g'`")dnl
 
+target_cpu=`echo $target_cpu | sed s/i.86/i386/`
+
 AS_IF([test "${universal_binary-no}" = yes ], [
     arch="universal-${target_os}"
     AS_IF([test "${rb_cv_architecture_available}" = yes], [
diff -Nuarp ruby-3.3.3.a/configure.ac.orig ruby-3.3.3.b/configure.ac.orig
--- ruby-3.3.3.a/configure.ac.orig	1969-12-31 19:00:00.000000000 -0500
+++ ruby-3.3.3.b/configure.ac.orig	2024-07-15 21:17:26.153919501 -0400
@@ -0,0 +1,4699 @@
+dnl Process this file with autoconf to produce a configure script.
+AC_INIT
+{
+AC_CONFIG_AUX_DIR(tool)
+
+AC_PREREQ(2.67)
+
+tooldir="$srcdir/tool"
+
+AC_DISABLE_OPTION_CHECKING
+
+m4_include([tool/m4/_colorize_result_prepare.m4])dnl
+m4_include([tool/m4/ac_msg_result.m4])dnl
+m4_include([tool/m4/colorize_result.m4])dnl
+m4_include([tool/m4/ruby_append_option.m4])dnl
+m4_include([tool/m4/ruby_append_options.m4])dnl
+m4_include([tool/m4/ruby_check_builtin_func.m4])dnl
+m4_include([tool/m4/ruby_check_builtin_setjmp.m4])dnl
+m4_include([tool/m4/ruby_check_header.m4])dnl
+m4_include([tool/m4/ruby_check_printf_prefix.m4])dnl
+m4_include([tool/m4/ruby_check_setjmp.m4])dnl
+m4_include([tool/m4/ruby_check_signedness.m4])dnl
+m4_include([tool/m4/ruby_check_sizeof.m4])dnl
+m4_include([tool/m4/ruby_check_sysconf.m4])dnl
+m4_include([tool/m4/ruby_cppoutfile.m4])dnl
+m4_include([tool/m4/ruby_decl_attribute.m4])dnl
+m4_include([tool/m4/ruby_default_arch.m4])dnl
+m4_include([tool/m4/ruby_define_if.m4])dnl
+m4_include([tool/m4/ruby_defint.m4])dnl
+m4_include([tool/m4/ruby_dtrace_available.m4])dnl
+m4_include([tool/m4/ruby_dtrace_postprocess.m4])dnl
+m4_include([tool/m4/ruby_func_attribute.m4])dnl
+m4_include([tool/m4/ruby_mingw32.m4])dnl
+m4_include([tool/m4/ruby_prepend_option.m4])dnl
+m4_include([tool/m4/ruby_prog_gnu_ld.m4])dnl
+m4_include([tool/m4/ruby_prog_makedirs.m4])dnl
+m4_include([tool/m4/ruby_replace_funcs.m4])dnl
+m4_include([tool/m4/ruby_replace_type.m4])dnl
+m4_include([tool/m4/ruby_require_funcs.m4])dnl
+m4_include([tool/m4/ruby_rm_recursive.m4])dnl
+m4_include([tool/m4/ruby_setjmp_type.m4])dnl
+m4_include([tool/m4/ruby_stack_grow_direction.m4])dnl
+m4_include([tool/m4/ruby_thread.m4])dnl
+m4_include([tool/m4/ruby_try_cflags.m4])dnl
+m4_include([tool/m4/ruby_try_cxxflags.m4])dnl
+m4_include([tool/m4/ruby_try_ldflags.m4])dnl
+m4_include([tool/m4/ruby_universal_arch.m4])dnl
+m4_include([tool/m4/ruby_wasm_tools.m4])dnl
+m4_include([tool/m4/ruby_werror_flag.m4])dnl
+
+AS_IF([test "x${GITHUB_ACTIONS}" = xtrue],
+[AC_REQUIRE([_COLORIZE_RESULT_PREPARE])dnl
+dnl 93(bright yellow) is copied from .github/workflows/mingw.yml
+    begin_group() { AS_ECHO(["::group::@<:@93m$[]1@<:@m"]);}
+    end_group() { AS_ECHO(["::endgroup::"]);}
+],
+[dnl
+    begin_group() { :;}
+    end_group() { :;}
+])
+
+AC_ARG_VAR([cflags], [additional CFLAGS (ignored when CFLAGS is given)])dnl
+AC_ARG_VAR([cppflags], [additional CPPFLAGS (ignored when CPPFLAGS is given)])dnl
+AC_ARG_VAR([cxxflags], [additional CXXFLAGS (ignored when CXXFLAGS is given)])dnl
+
+[begin]_group "environment section" && {
+HAVE_BASERUBY=yes
+BASERUBY_VERSION=
+AC_ARG_WITH(baseruby,
+	AS_HELP_STRING([--with-baseruby=RUBY], [use RUBY as baseruby; RUBY is the pathname of ruby]),
+	[AS_CASE(["$withval"],
+	    [*ruby*],[BASERUBY=$withval],
+	    [no],[HAVE_BASERUBY=no],
+	    [AC_MSG_ERROR(need ruby)])
+	],
+	[
+		AC_PATH_PROG([BASERUBY], [ruby], [false])
+	])
+# BASERUBY must be >= 2.5.0. Note that `"2.5.0" > "2.5"` is true.
+AS_IF([test "$HAVE_BASERUBY" != no -a "`RUBYOPT=- $BASERUBY --disable=gems -e 'print 42 if RUBY_VERSION > "2.5"' 2>/dev/null`" = 42], [
+    AS_CASE(["$build_os"], [mingw*], [
+        # Can MSys shell run a command with a drive letter?
+        RUBYOPT=- `cygpath -ma "$BASERUBY"` --disable=gems -e exit 2>/dev/null || HAVE_BASERUBY=no
+    ])
+    RUBY_APPEND_OPTION(BASERUBY, "--disable=gems")
+    BASERUBY_VERSION=`$BASERUBY -v`
+    $BASERUBY -C "$srcdir" tool/downloader.rb -d tool -e gnu config.guess config.sub >&AS_MESSAGE_FD
+], [
+    HAVE_BASERUBY=no
+])
+AS_IF([test "$HAVE_BASERUBY" = no], [
+    AS_IF([test "$cross_compiling" = yes], [AC_MSG_ERROR([executable host ruby is required for cross-compiling])])
+    BASERUBY=$srcdir/tool/missing-baseruby.bat
+])
+AC_SUBST(BASERUBY)
+AC_SUBST(HAVE_BASERUBY)
+
+: ${GIT=git}
+HAVE_GIT=yes
+AC_ARG_WITH(git,
+	AS_HELP_STRING([--without-git], [never use git]),
+	[AS_CASE([$withval],
+	    [no],  [GIT=never-use HAVE_GIT=no],
+	    [yes], [],
+	    [GIT=$withval])])
+AS_IF([test x"$HAVE_GIT" = xyes], [command -v "$GIT" > /dev/null || HAVE_GIT=no])
+AC_SUBST(GIT)
+AC_SUBST(HAVE_GIT)
+
+eval `sed -n -e ['s/^@%:@define RUBY_[A-Z_]*VERSION_\([A-Z][A-Z][A-Z_0-9]*\) \([0-9][0-9]*\)$/\1=\2/p'] \
+      -e ['s/^@%:@define \(RUBY_ABI_VERSION\) \([0-9][0-9]*\).*/\1=\2/p'] \
+      -e ['s/^@%:@define \(RUBY_PATCHLEVEL\) \(.*\)/\1=\2/p'] \
+     $srcdir/include/ruby/internal/abi.h \
+     $srcdir/include/ruby/version.h $srcdir/version.h`
+for v in MAJOR MINOR TEENY; do
+    AS_IF([eval "test \"\$$v\" = ''"], [
+	AC_MSG_ERROR(could not determine $v number from version.h)
+    ])
+done
+AC_SUBST(MAJOR)
+AC_SUBST(MINOR)
+AC_SUBST(TEENY)
+AC_SUBST(RUBY_API_VERSION, '$(MAJOR).$(MINOR)')
+AC_SUBST(RUBY_PROGRAM_VERSION, '$(MAJOR).$(MINOR).$(TEENY)')
+AS_CASE([$RUBY_PATCHLEVEL], [-*], [
+    AC_DEFINE_UNQUOTED(RUBY_ABI_VERSION, [${RUBY_ABI_VERSION}])
+], [RUBY_ABI_VERSION=])
+
+AS_IF([test "$program_prefix" = NONE], [
+  program_prefix=
+])
+AS_IF([test "$prefix" -ef .], [
+  AC_MSG_ERROR(--prefix cannot be the current working directory.)
+])
+RUBY_BASE_NAME=`echo ruby | sed "$program_transform_name"`
+RUBYW_BASE_NAME=`echo rubyw | sed "$program_transform_name"`
+AC_SUBST(RUBY_BASE_NAME)
+AC_SUBST(RUBYW_BASE_NAME)
+AC_SUBST(RUBY_VERSION_NAME, '${RUBY_BASE_NAME}-${ruby_version_dir_name}')
+
+dnl checks for alternative programs
+AC_CANONICAL_BUILD
+AC_CANONICAL_HOST
+AC_CANONICAL_TARGET
+AS_CASE(["$target_cpu-$target_os"],
+    [aarch64-darwin*], [
+        target_cpu=arm64
+        AS_CASE(["$target_vendor"], [unknown], [
+            target_vendor=apple
+            target=${target%%-unknown-*}-apple-${target@%:@*-unknown-}
+        ])
+        target="arm64-${target@%:@aarch64-}"
+        AS_IF([test -n "$target_alias"], [target_alias="arm64-${target_alias@%:@aarch64-}"])
+    ])
+
+AC_ARG_PROGRAM
+RUBY_RM_RECURSIVE
+AC_ARG_WITH(gcc,
+	AS_HELP_STRING([--without-gcc], [never use gcc]),
+	[
+	AS_CASE([$withval],
+	    [no],  [: ${CC=cc}],
+	    [yes], [: ${CC=gcc}],
+	           [CC=$withval])])
+dnl If the user switches compilers, we can't believe the cache
+AS_IF([test ! -z "$ac_cv_prog_CC" -a ! -z "$CC" -a "$CC" != "$ac_cv_prog_CC"], [
+  AC_MSG_ERROR(cached CC is different -- throw away $cache_file
+(it is also a good idea to do 'make clean' before compiling))
+])
+
+RUBY_WASM_TOOLS
+
+AS_CASE(["${build_os}"],
+[linux*|cygwin*|msys*], [
+    # Naruse prefers GCC on Linux
+    AC_CHECK_TOOLS([CC], [gcc clang cc])
+],
+[solaris*], [
+    # Clang on Solaris is largely untested.
+    # https://bugs.ruby-lang.org/issues/17949
+    AC_CHECK_TOOLS([CC], [cc gcc])
+], [
+    # OpenBSD wants to prefer cc over gcc.
+    # See https://github.com/ruby/ruby/pull/2443
+    AC_CHECK_TOOLS([CC], [cl.exe clang cc gcc c99 /usr/ucb/cc])
+])
+
+AC_ARG_VAR([AR],       [Archiver command])
+AC_ARG_VAR([AS],       [Assembler command])
+AC_ARG_VAR([CC],       [C compiler command])
+AC_ARG_VAR([CXX],      [C++ compiler command])
+AC_ARG_VAR([LD],       [Linker command])
+AC_ARG_VAR([NM],       [Symbol list command])
+AC_ARG_VAR([OBJCOPY],  [Objcopy command])
+AC_ARG_VAR([OBJDUMP],  [Objdump command])
+AC_ARG_VAR([RANLIB],   [Ranlib command])
+AC_ARG_VAR([STRIP],    [Strip command])
+
+# We don't want to bother things like `ccache gcc`, `clang -shared-libgcc`, ...
+set rb_dummy ${CC}
+rb_CC=$2
+AC_DEFUN([RUBY_CHECK_PROG_FOR_CC], [
+    rb_prog=`echo "${rb_CC}" | sed "$2"`
+    AC_CHECK_PROG([$1], [$rb_prog], [$rb_prog])
+])
+AS_CASE(["/${rb_CC} "],
+[*@<:@\ /@:>@"cc "*], [
+    # Don't try g++/clang++ when CC=cc
+    AC_CHECK_PROGS([CXX],    [cl.exe CC c++])
+],
+[*icc*],              [
+    # Intel C++ has interprocedural optimizations.  It tends to come with its
+    # own linker etc.
+    RUBY_CHECK_PROG_FOR_CC([AR],      [s/icc/xiar/])
+    RUBY_CHECK_PROG_FOR_CC([CXX],     [s/icc/icpc/])
+    RUBY_CHECK_PROG_FOR_CC([LD],      [s/icc/xild/])
+],
+[*gcc*],              [
+    # Ditto for GCC.
+    RUBY_CHECK_PROG_FOR_CC([LD],      [s/gcc/ld/])
+    RUBY_CHECK_PROG_FOR_CC([AR],      [s/gcc/gcc-ar/])
+    RUBY_CHECK_PROG_FOR_CC([CXX],     [s/gcc/g++/])
+    RUBY_CHECK_PROG_FOR_CC([NM],      [s/gcc/gcc-nm/])
+    RUBY_CHECK_PROG_FOR_CC([RANLIB],  [s/gcc/gcc-ranlib/])
+],
+[*clang*],            [
+    # Ditto for LLVM.  Note however that llvm-as is a LLVM-IR to LLVM bitcode
+    # assembler that does not target your machine native binary.
+
+    # Xcode has its own version tools that may be incompatible with
+    # genuine LLVM tools, use the tools in the same directory.
+
+    AS_IF([$rb_CC -E -dM -xc - < /dev/null | grep -F __apple_build_version__ > /dev/null],
+          [llvm_prefix=], [llvm_prefix=llvm-])
+    # AC_PREPROC_IFELSE cannot be used before AC_USE_SYSTEM_EXTENSIONS
+
+    RUBY_CHECK_PROG_FOR_CC([LD],      [s/clang/ld/]) # ... maybe try lld ?
+    RUBY_CHECK_PROG_FOR_CC([AR],      [s/clang/${llvm_prefix}ar/])
+#   RUBY_CHECK_PROG_FOR_CC([AS],      [s/clang/${llvm_prefix}as/])
+    RUBY_CHECK_PROG_FOR_CC([CXX],     [s/clang/clang++/])
+    RUBY_CHECK_PROG_FOR_CC([NM],      [s/clang/${llvm_prefix}nm/])
+    RUBY_CHECK_PROG_FOR_CC([OBJCOPY], [s/clang/${llvm_prefix}objcopy/])
+    RUBY_CHECK_PROG_FOR_CC([OBJDUMP], [s/clang/${llvm_prefix}objdump/])
+    RUBY_CHECK_PROG_FOR_CC([RANLIB],  [s/clang/${llvm_prefix}ranlib/])
+    RUBY_CHECK_PROG_FOR_CC([STRIP],   [s/clang/${llvm_prefix}strip/])
+])
+AS_UNSET(rb_CC)
+AS_UNSET(rb_dummy)
+
+AS_CASE(["${build_os}"],
+[solaris*], [
+    AC_PATH_TOOL([LD], [ld], [/usr/ccs/bin/ld], [/usr/ccs/bin:$PATH])
+],
+[aix*], [
+    AC_PATH_TOOL([NM], [nm], [/usr/ccs/bin/nm], [/usr/ccs/bin:$PATH])
+])
+AS_CASE(["${target_os}"],
+[cygwin*|msys*|mingw*|darwin*], [
+    ac_cv_prog_ac_ct_OBJCOPY=":"
+])
+
+rb_test_CFLAGS=${CFLAGS+yes}
+rb_test_CXXFLAGS=${CXXFLAGS+yes}
+
+# BSD's ports and MacPorts prefix GNU binutils with 'g'
+
+dnl Seems necessarily in order to add -std=gnu99 option for gcc 4.9.
+m4_version_prereq([2.70], [AC_PROG_CC], [AC_PROG_CC_C99])
+
+AC_PROG_CXX
+AC_PROG_CPP
+AC_PROG_RANLIB
+AC_CHECK_TOOLS([AR],      [gar ar])
+AC_CHECK_TOOLS([AS],      [gas as])
+AC_CHECK_TOOLS([LD],      [gld ld]) # ... try gold ?
+AC_CHECK_TOOLS([NM],      [gnm nm])
+AC_CHECK_TOOLS([OBJCOPY], [gobjcopy objcopy], [:])
+AC_CHECK_TOOLS([OBJDUMP], [gobjdump objdump])
+AC_CHECK_TOOLS([STRIP],   [gstrip strip], [:])
+
+# nm errors with Rust's LLVM bitcode when Rust uses a newer LLVM version than nm.
+# In case we're working with llvm-nm, tell it to not worry about the bitcode.
+AS_IF([${NM} --help | grep -q 'llvm-bc'], [NM="$NM --no-llvm-bc"])
+
+AS_IF([test ! $rb_test_CFLAGS], [AS_UNSET(CFLAGS)]); AS_UNSET(rb_test_CFLAGS)
+AS_IF([test ! $rb_test_CXXFLAGS], [AS_UNSET(CXXFLAGS)]); AS_UNSET(rb_save_CXXFLAGS)
+
+AS_IF([test "${CXX}" = "g++" -a -z "${GXX}"], [
+    # AC_PROG_CXX sets $CXX to "g++" when it purposefully finds that there is
+    # _no_ g++.  This brain-damaged design must be worked around.  Thankfully,
+    # similar thing doesn't happen for AC_PROG_CC.
+    rb_there_is_in_fact_no_gplusplus_but_autoconf_is_cheating_us=true
+])
+
+test x"$target_alias" = x &&
+target_os=`echo $target_os | sed 's/linux-gnu$/linux/;s/linux-gnu/linux-/'`
+ac_install_sh='' # unusable for extension libraries.
+
+AC_ARG_WITH(os-version-style,
+	AS_HELP_STRING([--with-os-version-style=TYPE],
+		       [OS version number for target and target_os [[full]]]
+		       [(full|teeny|minor+0|minor|major+0|major|none)]),
+	[os_version_style=$withval],
+	[os_version_style=full
+	    AS_CASE($target_os, [[*[0-9].*]],
+		[AS_CASE([`/usr/bin/ruby -e 'puts RUBY_PLATFORM' 2>/dev/null`],
+		    [[*-*[0-9].*.0]], [os_version_style=minor+0],
+		    [[*-*[0-9].*.*]], [os_version_style=full],
+		    [[*-*[0-9].0]  ], [os_version_style=major+0],
+		    [[*-*[0-9].*]  ], [os_version_style=minor],
+		    [[*-*[0-9]]    ], [os_version_style=major],
+		)])
+	])
+os_version_style_transform=
+AS_CASE("${os_version_style}",
+	[full|teeny], [],
+	[minor+0], [os_version_style_transform=['s/\([0-9]\.[0-9][0-9]*\)\.[0-9][.0-9]*$/\1.0/']],
+	[minor],   [os_version_style_transform=['s/\([0-9]\.[0-9][0-9]*\)\.[0-9][.0-9]*$/\1/']],
+	[major+0], [os_version_style_transform=['s/\([0-9]\)\.[0-9][.0-9]*$/\1.0/']],
+	[major],   [os_version_style_transform=['s/\([0-9]\)\.[0-9][.0-9]*$/\1/']],
+	[none],    [os_version_style_transform=['s/[0-9]*\.[0-9][.0-9]*$//']],
+	[AC_MSG_ERROR(unknown --with-os-version-style: $withval)])
+AS_IF([test -z "$target_alias" -a -n "$os_version_style_transform"],
+	[
+	target=`echo ${target} | sed "$os_version_style_transform"`
+	target_os=`echo ${target_os} | sed "$os_version_style_transform"`
+	])
+
+AC_ARG_WITH(arch,
+	AS_HELP_STRING([--with-arch=ARCHS],
+		       [build an Apple/NeXT Multi Architecture Binary (MAB);
+                          ARCHS is a comma-delimited list of architectures for
+                          which to build; if this option is disabled or omitted
+			  entirely, then the package will be built only for the
+			  target platform]),
+       [target_archs="$withval"], [unset target_archs])
+
+AC_ARG_ENABLE(load-relative,
+       AS_HELP_STRING([--enable-load-relative], [resolve load paths at run time]),
+       [load_relative=$enableval])
+
+# checks for UNIX variants that set C preprocessor variables
+AC_USE_SYSTEM_EXTENSIONS
+
+dnl Checks for programs.
+
+cflagspat=
+test -z "$optflags" ||
+    cflagspat="$cflagspat;s|"`eval echo '"'"${optflags}"'"' | sed 's/[[][|.*]]/\\&/g;s/^ */ /;s/ *$/ /'`'| |g'
+test -z "$debugflags" ||
+    cflagspat="$cflagspat;s|"`eval echo '"'"${debugflags}"'"' | sed 's/[[][|.*]]/\\&/g;s/^ */ /;s/ *$/ /'`'| |g'
+test -z "$warnflags" ||
+    cflagspat="$cflagspat;s|"`eval echo '"'"${warnflags}"'"' | sed 's/[[][|.*]]/\\&/g;s/^ */ /;s/ *$/ /'`'| |g'
+AS_IF([test -z "${CFLAGS+set}"], [
+    cflags=`echo " $cflags " | sed "$cflagspat;s/^ *//;s/ *$//"`
+    orig_cflags="$cflags"
+    cflags="$cflags "'${optflags} ${debugflags} ${warnflags}'
+])
+dnl AS_IF([test -z "${CXXFLAGS+set}"], [
+dnl     cxxflags=`echo " $cxxflags " | sed "$cflagspat;s/^ *//;s/ *$//"`
+dnl     orig_cxxflags="$cxxflags"
+dnl     cxxflags="$cxxflags "'${optflags} ${debugflags} ${warnflags}'
+dnl ])
+
+AS_CASE(["$host_os:$build_os"],
+[darwin*:darwin*], [
+    # Following Apple deployed clang are broken
+    # clang version 1.0 (http://llvm.org/svn/llvm-project/cfe/tags/Apple/clang-23 exported)
+    # Apple clang version 2.0 (tags/Apple/clang-137) (based on LLVM 2.9svn)
+    # Apple clang version 2.1 (tags/Apple/clang-163.7.1) (based on LLVM 3.0svn)
+    AC_PREPROC_IFELSE(
+	[AC_LANG_PROGRAM([
+	    @%:@if defined __APPLE_CC__ && defined __clang_major__ && __clang_major__ < 3
+	    @%:@error premature clang
+	    @%:@endif
+	])],
+	[],
+	[AC_MSG_ERROR([clang version 3.0 or later is required])])
+])
+
+AS_CASE(["$target_os"],
+[darwin*], [
+    AC_MSG_CHECKING(if minimum required OS X version is supported)
+    AC_PREPROC_IFELSE([AC_LANG_SOURCE([[@%:@include <AvailabilityMacros.h>
+	@%:@if MAC_OS_X_VERSION_MIN_REQUIRED < __MAC_10_5
+	@%:@error pre OS X 10.5
+	[!<===== pre OS X 10.5 =====>]
+	@%:@endif
+	]])],
+	[AC_MSG_RESULT(yes)],
+	[AC_MSG_RESULT(no)
+	AC_MSG_ERROR([Unsupported OS X version is required])])
+])
+
+RUBY_MINGW32
+AC_SUBST(GCC)
+AC_SUBST(LD)
+AS_IF([test "$GCC" = yes], [
+    linker_flag=-Wl,
+    : ${optflags=-O3}
+    gcc_major=`echo =__GNUC__ | $CC -E -xc - | sed '/^=/!d;s///'`
+    gcc_minor=`echo =__GNUC_MINOR__ | $CC -E -xc - | sed '/^=/!d;s///'`
+    test -n "$gcc_major" || gcc_major=0
+    test -n "$gcc_minor" || gcc_minor=0
+    icc_version=`echo =__ICC | $CC -E -xc - | sed '/^=/!d;s///;/^__ICC/d'`
+    test -n "$icc_version" || icc_version=0
+    # RUBY_APPEND_OPTIONS(XCFLAGS, ["-include ruby/config.h" "-include ruby/missing.h"])
+
+    AS_IF([test "$gcc_major" -lt 4], [
+        AC_MSG_ERROR([too old GCC: $gcc_major.$gcc_minor])
+    ])
+], [
+    linker_flag=
+])
+
+RUBY_PROG_GNU_LD
+RUBY_CPPOUTFILE
+
+: ${OUTFLAG='-o '}
+: ${COUTFLAG=${OUTFLAG}}
+: ${CSRCFLAG=''}
+AC_SUBST(OUTFLAG)
+AC_SUBST(COUTFLAG)
+AC_SUBST(CSRCFLAG)
+
+AS_CASE(["$build_os"],
+  [darwin*], [
+    # gcc 13 warns duplicate -l options, which are added by the
+    # default spec.
+    # Xcode linker warns for deprecated architecture and wrongly
+    # installed TBD files.
+    CC_WRAPPER="" CC_NO_WRAPPER="$CC"
+    echo 'int main(void) {return 0;}' > conftest.c
+    AS_IF([$CC -framework Foundation -o conftest conftest.c 2>&1 |
+	   grep -e '^ld: warning: ignoring duplicate libraries:' \
+	        -e '^ld: warning: text-based stub file' >/dev/null], [
+	CC_WRAPPER=`cd -P "${tooldir}" && pwd`/darwin-cc
+	CC="$CC_WRAPPER $CC"
+    ])
+    rm -fr conftest*
+  ])
+AS_CASE(["$target_os"],
+  [wasi*], [
+    # Clang linker automatically uses wasm-opt with -O if it found.
+    # https://github.com/llvm/llvm-project/blob/812828984c10857a4cd260eb638c52a4411f9143/clang/lib/Driver/ToolChains/WebAssembly.cpp#L95-L118
+    # However optimization before asyncify causes misoptimization,
+    # so wrap clang to insert our fake wasm-opt, which does nothing, in PATH.
+    CC_WRAPPER=`cd -P "${tooldir}" && pwd`/wasm-clangw
+    CC="$CC_WRAPPER $CC"
+  ])
+
+cc_version=
+for option in --version -v -V -qversion; do
+    cc_version_message=`$CC $option 2>&1`
+    cc_version_status=$?
+    AS_CASE($cc_version_status, [0], [:], [continue])
+    AS_CASE($cc_version_message, [*Warning*], [continue])
+    cc_version='$(CC) '$option
+    break
+done
+AC_SUBST(CC_VERSION, $cc_version)
+AC_SUBST(CC_VERSION_MESSAGE, $cc_version_message)
+
+: ${DLDFLAGS="$LDFLAGS"}
+
+RUBY_UNIVERSAL_ARCH
+AS_IF([test "$target_cpu" != "$host_cpu" -a "$GCC" = yes -a "${universal_binary:-no}" = no], [
+    RUBY_DEFAULT_ARCH("$target_cpu")
+])
+host_os=$target_os
+host_vendor=$target_vendor
+host_cpu=$target_cpu
+host=$target
+host_alias=$target_alias
+
+AC_CACHE_CHECK([for $AR flags], [rb_cv_arflags], [
+    AS_IF([$AR rcD conftest.a > /dev/null 2>&1 && rm conftest.a],
+	[rb_cv_arflags=rcD], [rb_cv_arflags=rcu])
+])
+AC_SUBST(ARFLAGS, ["$rb_cv_arflags "])
+AC_SUBST(ASFLAGS)
+
+AS_CASE(["$target_os"],
+[cygwin*|msys*|mingw*], [
+    AC_CHECK_TOOL(WINDRES, windres)
+    AC_CHECK_TOOL(DLLWRAP, dllwrap)
+    target=`echo $target | sed "s/^$target_cpu-/-/"`
+    target_alias=`echo $target_alias | sed "s/^$target_cpu-/-/"`
+    target_cpu=`echo $target_cpu | sed s/i.86/i386/`
+    AS_CASE(["$target"], [-*], [ target="$target_cpu${target}"])
+    AS_CASE(["$target_alias"], [-*], [ target_alias="$target_cpu${target_alias}"])
+    AS_CASE(["$target_os"],
+    [mingw*], [
+	test "$rb_cv_msvcrt" = "" && unset rb_cv_msvcrt
+	AC_CACHE_CHECK(for mingw32 runtime DLL, rb_cv_msvcrt, [
+	AC_LINK_IFELSE([AC_LANG_PROGRAM([[@%:@include <stdio.h>]],
+		    [[FILE* volatile f = stdin; return 0;]])],
+		    [rb_cv_msvcrt=`$OBJDUMP -p conftest$ac_exeext |
+				   tr A-Z a-z |
+				   sed -n '/^[[ 	]]*dll name: \(msvc.*\)\.dll$/{s//\1/p;q;};
+					/^[[ 	]]*dll name: \(ucrtbase\|api-ms-win-crt-.*\)\.dll$/{s//ucrt/p;q;}'`],
+		    [rb_cv_msvcrt=msvcrt])
+	test "$rb_cv_msvcrt" = "" && rb_cv_msvcrt=msvcrt])
+	RT_VER=`echo "$rb_cv_msvcrt" | tr -cd [0-9]`
+	test "$RT_VER" = "" && RT_VER=60
+	test "$rb_cv_msvcrt" = "ucrt" && RT_VER=140
+	AC_DEFINE_UNQUOTED(RUBY_MSVCRT_VERSION, $RT_VER)
+	sysconfdir=
+    ])
+    rb_cv_binary_elf=no
+    : ${enable_shared=yes}
+    AS_IF([$WINDRES --version | grep LLVM > /dev/null], [USE_LLVM_WINDRES=yes], [USE_LLVM_WINDRES=no])
+    ],
+[hiuxmpp*], [AC_DEFINE(__HIUX_MPP__)])    # by TOYODA Eizi <toyoda@npd.kishou.go.jp>
+
+AC_PROG_LN_S
+AC_PROG_MAKE_SET
+AC_PROG_INSTALL
+
+AS_CASE(["$target_os"],[openbsd*],[
+    ac_cv_path_mkdir="mkdir"
+])
+
+RUBY_PROG_MAKEDIRS
+
+AC_CHECK_PROG([DTRACE], [${ac_tool_prefix}dtrace], [${ac_tool_prefix}dtrace])
+AS_IF([test "$cross_compiling:$ac_cv_prog_DTRACE" = no: -a -n "$ac_tool_prefix"], [
+    AC_CHECK_PROG([DTRACE], [dtrace], [dtrace])
+])
+
+AC_CHECK_PROGS(DOT, dot)
+AC_CHECK_PROGS(DOXYGEN, doxygen)
+
+tool_warned=$ac_tool_warned ac_tool_warned=no
+AC_CHECK_TOOL(PKG_CONFIG, pkg-config)
+ac_tool_warned=$tool_warned
+AS_IF([test -z "$PKG_CONFIG"], [],
+["$PKG_CONFIG" --print-errors --version > /dev/null 2>&1], [],
+[
+    unset ac_cv_prog_PKG_CONFIG
+    PKG_CONFIG=
+    AC_MSG_WARN([$PKG_CONFIG does not work; ignore])
+])
+
+AC_MSG_CHECKING([whether it is Android])
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+	@%:@ifndef __ANDROID__
+	@%:@error Not android
+	@%:@endif
+]], [[]])],
+[
+	AC_MSG_RESULT(yes)
+	target_os=${target_os}-android
+	AS_IF([test "x$cross_compiling" = xno], [
+                AC_MSG_CHECKING([for Android API version])
+                # hacky workaround: https://github.com/termux/termux-packages/issues/6176
+                rb_android_api=`getprop ro.build.version.sdk`
+                AC_MSG_RESULT($rb_android_api)
+                RUBY_APPEND_OPTIONS(CPPFLAGS, -D__ANDROID_API__=$rb_android_api -Wno-macro-redefined)
+	])
+],
+[AC_MSG_RESULT(no)])
+
+AC_SUBST(RM, ['rm -f'])
+AC_SUBST(CP, ['cp'])
+RMDIRS='$(top_srcdir)/tool/rmdirs'
+RMDIR=rmdir
+mkdir "rmdirs_$$_test" "rmdirs_$$_test/a"
+rmdir --ignore-fail-on-non-empty "rmdirs_$$_test" 2>/dev/null &&
+RMDIR='rmdir --ignore-fail-on-non-empty'
+$RMDIR -p "rmdirs_$$_test/a" 2>/dev/null &&
+{ test -d "rmdirs_$$_test" || RMDIRS="$RMDIR -p"; }
+rmdir "rmdirs_$$_test/a" "rmdirs_$$_test" 2>/dev/null
+AC_SUBST(RMDIR)
+AC_SUBST(RMDIRS)
+AC_SUBST(RMALL, ['rm -fr'])
+
+AC_MSG_CHECKING([for cd using physical directory])
+rm -fr conf$$.dir
+mkdir conf$$.dir &&
+(cd conf$$.dir && mkdir src build && cd src &&
+$as_ln_s ../build . > /dev/null 2>&1 && cd build &&
+for chdir in 'cd -P' 'PWD= cd'; do
+    /bin/sh -c "$chdir ../src && echo '$chdir' > cdcmd" 2> /dev/null && break
+done)
+AS_IF([test -f conf$$.dir/src/cdcmd], [
+    read CHDIR < conf$$.dir/src/cdcmd 2> /dev/null
+], [
+    CHDIR=cd
+])
+rm -fr conf$$.dir
+AC_MSG_RESULT([$CHDIR])
+AC_SUBST(CHDIR)
+}
+
+[begin]_group "compiler section" && {
+RUBY_WERROR_FLAG([
+    AC_MSG_CHECKING([whether CFLAGS is valid])
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
+	[AC_MSG_RESULT(yes)],
+	[
+	AC_MSG_RESULT(no)
+	AC_MSG_ERROR([something wrong with CFLAGS="$CFLAGS"])
+	]
+    )
+
+    AC_MSG_CHECKING([whether LDFLAGS is valid])
+    {
+	mkdir tmp.$$.try_link &&
+	cd tmp.$$.try_link &&
+	cp ../confdefs.h . &&
+	echo '<?xml?><plist><dict><key>CFBundleIdentifier</key><string></string></dict></plist>' > Info.plist &&
+	:
+    } || AC_MSG_ERROR([failed to make temporary directory])
+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
+	[AC_MSG_RESULT(yes)],
+	[
+	cd .. && rm -fr tmp.$$.try_link
+	AC_MSG_RESULT(no)
+	AC_MSG_ERROR([something wrong with LDFLAGS="$LDFLAGS"])
+	]
+    )
+    cd .. && rm -fr tmp.$$.try_link
+])
+
+: "rpath" && {
+    AC_CACHE_CHECK(whether ELF binaries are produced, rb_cv_binary_elf,
+        [AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[]])],[
+            AS_CASE(["`head -1 conftest$EXEEXT | tr -dc '\177ELF' | tr '\177' .`"],
+            [.ELF*], [rb_cv_binary_elf=yes], [rb_cv_binary_elf=no])],
+            [rb_cv_binary_elf=no])])
+
+    rpathflag=''
+    AS_IF([test x"${RPATHFLAG=}" = x], [
+	AS_CASE(["$target_os"],
+	[aix*], [rpathflag='-blibpath:'],
+	[for rpathflag in "-rpath " -R; do
+	    AS_CASE("$rpathflag",
+		    [*" "], [AS_CASE(["${linker_flag}"],
+				     [*,], [rpathflag=`echo "$rpathflag" | tr ' ' ,`])])
+	    rpathflag="${linker_flag}${rpathflag}"
+	    RUBY_TRY_LDFLAGS([${rpathflag}.], [], [rpathflag=])
+	    AS_IF([test "x${rpathflag}" != x], [break])
+        done])
+    ], [
+        rpathflag=`echo "$RPATHFLAG" | sed 's/%.*//'`
+    ])
+
+    AC_ARG_ENABLE(rpath,
+        AS_HELP_STRING([--enable-rpath], [embed run path into extension libraries.
+        enabled by default on ELF platforms]),
+        [enable_rpath=$enableval], [enable_rpath="$rb_cv_binary_elf"])
+
+    AS_IF([test "$enable_rpath:${RPATHFLAG}" = yes:], [
+        RPATHFLAG="${rpathflag:+ ${rpathflag}%1\$-s}"
+    ])
+    AS_CASE([${RPATHFLAG}],[*'%1$'*],[: ${LIBPATHFLAG=' -L%1$-s'}],[: ${LIBPATHFLAG=' -L%s'}])
+}
+
+RUBY_TRY_LDFLAGS(-fdeclspec, [fdeclspec=yes], [fdeclspec=no])
+AS_IF([test "$fdeclspec" = yes], [
+    RUBY_APPEND_OPTIONS(CFLAGS, -fdeclspec)
+    RUBY_APPEND_OPTIONS(cflags, -fdeclspec)
+    RUBY_APPEND_OPTIONS(orig_cflags, -fdeclspec)
+])
+RUBY_TRY_CXXFLAGS(-fdeclspec, [fdeclspec=yes], [fdeclspec=no])
+AS_IF([test "$fdeclspec" = yes], [
+    RUBY_APPEND_OPTIONS(CXXFLAGS, -fdeclspec)
+])
+
+AC_ARG_ENABLE(devel,
+    AS_HELP_STRING([--enable-devel], [enable development build]),
+    [RUBY_DEVEL=$enableval],
+    [AS_IF([test "x${RUBY_DEVEL-no}" != xyes], [RUBY_DEVEL=])]
+)dnl
+AC_SUBST(RUBY_DEVEL)
+particular_werror_flags=${RUBY_DEVEL:-no}
+AC_ARG_ENABLE(werror,
+	AS_HELP_STRING([--disable-werror],
+		       [don't make warnings into errors
+		       even if a compiler support -Werror feature
+		       [[disabled by default unless development version]]]),
+	[particular_werror_flags=$enableval])
+
+rb_cv_warnflags="$warnflags"
+AS_CASE(["$GCC:${warnflags+set}:${extra_warnflags:+set}:"],
+[yes::*|yes:*:set:], [# GCC && (!warnflags || extra_warnflags)
+    AS_IF([test $gcc_major -le 6], [
+	extra_warnflags="$extra_warnflags -Wno-maybe-uninitialized"
+    ])
+    AS_CASE([ $CFLAGS ], [*" -save-temps="*|*" -save-temps "*], [], [
+	extra_warnflags="$extra_warnflags -Werror=misleading-indentation"
+    ])
+
+    # ICC doesn't support -Werror=
+    AS_IF([test $icc_version -gt 0], [
+	particular_werror_flags=no
+    ])
+    for wflag in \
+		 -Werror=extra-tokens \
+		 -Werror=deprecated-declarations \
+		 -Werror=division-by-zero -Werror=div-by-zero \
+		 -Werror=duplicated-cond \
+		 -Werror=implicit-function-declaration \
+		 -Werror=implicit-int \
+		 -Werror=pointer-arith \
+		 -Werror=shorten-64-to-32 \
+		 -Werror=write-strings \
+		 -Werror=old-style-definition \
+		 -Wimplicit-fallthrough=0 \
+		 -Wmissing-noreturn \
+		 -Wno-cast-function-type \
+		 -Wno-constant-logical-operand \
+		 -Wno-long-long \
+		 -Wno-missing-field-initializers \
+		 -Wno-overlength-strings \
+		 -Wno-packed-bitfield-compat \
+		 -Wno-parentheses-equality \
+		 -Wno-self-assign \
+		 -Wno-tautological-compare \
+		 -Wno-unused-parameter \
+		 -Wno-unused-value \
+		 -Wsuggest-attribute=format \
+		 -Wsuggest-attribute=noreturn \
+		 -Wunused-variable \
+		 -diag-disable=175,188,1684,2259,2312 \
+		 $extra_warnflags \
+		 ; do
+	AS_IF([test "$particular_werror_flags" != yes], [
+	    wflag=`echo x$wflag | sed 's/^x-Werror=/-W/;s/^x//'`
+	])
+	ok=no
+	RUBY_TRY_CFLAGS($wflag, [
+	    RUBY_APPEND_OPTIONS(warnflags, $wflag)
+	    ok=yes
+	])
+	AS_CASE([$ok:$wflag], [no:-Werror=*], [
+	    wflag=`echo x$wflag | sed 's/^x-Werror=/-W/'`
+	    RUBY_TRY_CFLAGS($wflag, [
+		RUBY_APPEND_OPTIONS(warnflags, $wflag)
+		particular_werror_flags=no
+	    ])
+	])
+    done
+    AS_IF([test "$particular_werror_flags" = "yes"], [
+	wflag=-Werror=undef
+    ], [
+	wflag=-Wundef
+    ])
+    RUBY_TRY_CFLAGS($wflag, [
+	RUBY_APPEND_OPTIONS(warnflags, $wflag)
+    ], [], [
+	@%:@if !defined(RUBY_CONFIG_TEST_NEVER_DEFINED_SYMBOL)
+	@%:@elif RUBY_CONFIG_TEST_NEVER_DEFINED_SYMBOL
+	@%:@endif
+    ])
+    AS_CASE([" $warnflags "],[*" -Wno-missing-field-initializers "*], [wflag="-Wall -Wextra"],
+                             [wflag=-Wall])
+    RUBY_TRY_CFLAGS($wflag, [warnflags="$wflag${warnflags+ $warnflags}"])
+    # Disable warnflags while conftest. -Werror=* flags might make bad OS capability guess.
+    rb_cv_warnflags="$warnflags"
+    warnflags=
+])
+RUBY_TRY_CFLAGS(-Qunused-arguments, [RUBY_APPEND_OPTIONS(rb_cv_wsuppress_flags, -Qunused-arguments)])
+AC_COMPILE_IFELSE([
+    AC_LANG_PROGRAM([
+@%:@if !(defined(__SUNPRO_C)||defined(__SUNPRO_CC))
+@%:@error not sunpro
+@%:@endif],[])], [
+    for e in \
+        E_STATEMENT_NOT_REACHED \
+        E_INIT_SIGN_EXTEND \
+        E_INIT_DOES_NOT_FIT \
+        E_INITIALIZATION_TYPE_MISMATCH
+    do
+        RUBY_TRY_CFLAGS([-erroff=${e}], [
+            RUBY_APPEND_OPTIONS(rb_cv_warnflags, [-erroff=${e}])
+        ])
+    done
+])
+
+AC_ARG_WITH(compress-debug-sections,
+	AS_HELP_STRING([--with-compress-debug-sections=type],
+	    [enable debug section compression]),
+	[compress_debug_sections=$withval], [compress_debug_sections=])
+
+AS_IF([test "$GCC" = yes], [
+    # -D_FORTIFY_SOURCE
+    # When defined _FORTIFY_SOURCE, glibc enables some additional sanity
+    # argument check. The performance drop is very little and Ubuntu enables
+    # _FORTIFY_SOURCE=2 by default. So, let's support it for protecting us from
+    # a mistake of silly C extensions.
+
+    # TODO: check if link succeeds with _FORTIFY_SOURCE=2.
+    AS_CASE(["$target_os"],
+    [mingw*], [
+	fortify_source=no
+    ])
+    AC_ARG_ENABLE(fortify_source,
+		  AS_HELP_STRING([--disable-fortify-source],
+				 [disable -D_FORTIFY_SOURCE=2 option, which causes link error on mingw]),
+		  [fortify_source=$enableval])
+    AS_IF([test "x$fortify_source" != xno], [
+        RUBY_TRY_CFLAGS([$optflags -D_FORTIFY_SOURCE=2],
+                        [RUBY_APPEND_OPTION(XCFLAGS, -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2)], [],
+                        [@%:@include <stdio.h>])
+    ])
+
+    # -fstack-protector
+    AS_CASE(["$target_os"],
+    [emscripten*|wasi*], [
+	stack_protector=no
+    ])
+    AS_IF([test -z "${stack_protector+set}"], [
+	AS_FOR(option, opt, [-fstack-protector-strong -fstack-protector], [
+	    RUBY_TRY_CFLAGS(option, [stack_protector=yes])
+	    AS_IF([test "x$stack_protector" = xyes], [
+		RUBY_TRY_LDFLAGS(option, [], [stack_protector=])
+	    ])
+	    AS_IF([test "x$stack_protector" = xyes], [stack_protector=option; break])
+	])
+    ])
+    AC_MSG_CHECKING([for -fstack-protector])
+    AC_MSG_RESULT(["$stack_protector"])
+    AS_CASE(["$stack_protector"], [-*], [
+	RUBY_APPEND_OPTION(XCFLAGS, $stack_protector)
+	RUBY_APPEND_OPTION(XLDFLAGS, $stack_protector)
+	RUBY_APPEND_OPTION(LDFLAGS, $stack_protector)
+    ])
+
+    # aarch64 branch protection
+    AS_CASE(["$target_cpu"], [aarch64], [
+	AS_FOR(option, opt, [-mbranch-protection=pac-ret -msign-return-address=all], [
+            RUBY_TRY_CFLAGS(option, [branch_protection=yes], [branch_protection=no])
+            AS_IF([test "x$branch_protection" = xyes], [
+                # C compiler and assembler must be consistent for -mbranch-protection
+                # since they both check `__ARM_FEATURE_PAC_DEFAULT` definition.
+                RUBY_APPEND_OPTION(XCFLAGS, option)
+                RUBY_APPEND_OPTION(ASFLAGS, option)
+                break
+            ])
+        ])
+    ])
+
+    AS_CASE("${compress_debug_sections:-zlib}",
+    [none|no], [], [
+    RUBY_TRY_LDFLAGS(${linker_flag}--compress-debug-sections=${compress_debug_sections:-zlib},
+		     [compress_debug_sections=${compress_debug_sections:-zlib}],
+		     [compress_debug_sections=no])
+    ])
+    AS_IF([test "x$compress_debug_sections" != xno], [
+	RUBY_APPEND_OPTION(DLDFLAGS, ${linker_flag}--compress-debug-sections=$compress_debug_sections)
+    ])
+
+    AS_CASE(["$target_os"],[mingw*], [
+      # On  Windows  platforms,   system  provided  headers  are  VC++
+      # optimized.  That  is, C++  habits are often  contaminated into
+      # various  headers.  Most frequent  situation is  the use  of //
+      # comments.   We  bypass  ANSI   C  mode  for  them.   Otherwise
+      # extension libs cannot include those headers.
+
+      # Since math.h in some mingw64 wrongly declares frexp and modf
+      # to be pure, the variables pointed by the second arguments are
+      # considered uninitialized unexpectedly.
+      AC_CACHE_CHECK([whether frexp and modf are broken],
+	rb_cv_mingw64_broken_frexp_modf,
+	[
+	  save_CFLAGS="$CFLAGS"
+	  AS_IF([test "$particular_werror_flags" = "yes"], [
+	    CFLAGS="$CFLAGS -Werror=uninitialized"
+	  ], [
+	    CFLAGS="$CFLAGS -Werror -Wuninitialized"
+	  ])
+	  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <math.h>
+	    int foo(double x)
+	    {
+	      int exp;
+	      frexp(x, &exp);
+	      return exp;
+	    }]], [[if (foo(0.0)) return 1;]])],
+	    [rb_cv_mingw64_broken_frexp_modf=no],
+	    [rb_cv_mingw64_broken_frexp_modf=yes])
+	  CFLAGS="$save_CFLAGS"
+	])
+      AS_IF([test "$rb_cv_mingw64_broken_frexp_modf" = yes], [
+	AC_DEFINE(RUBY_MINGW64_BROKEN_FREXP_MODF)
+      ])
+    ],
+    [cygwin*|msys*|darwin*|netbsd*], [
+      # need lgamma_r()
+    ])
+
+    # suppress annoying -Wstrict-overflow warnings
+    RUBY_TRY_CFLAGS(-fno-strict-overflow, [RUBY_APPEND_OPTION(XCFLAGS, -fno-strict-overflow)])
+
+    test "${debugflags+set}" || {RUBY_TRY_CFLAGS(-ggdb3, [debugflags=-ggdb3])}
+    test "${debugflags+set}" || {RUBY_TRY_CFLAGS(-ggdb, [debugflags=-ggdb])}
+    test "${debugflags+set}" || {RUBY_TRY_CFLAGS(-g3, [debugflags=-g3])}
+])
+test $ac_cv_prog_cc_g = yes && : ${debugflags=-g}
+
+AS_IF([test "$GCC" = ""], [
+    AS_CASE(["$target_os"],[aix*],[warnflags="$warnflags -qinfo=por" rb_cv_warnflags="$rb_cv_warnflags -qinfo=por"])
+])
+AS_IF([test "$GCC" = yes], [
+    RUBY_TRY_CFLAGS(-fvisibility=hidden, [visibility_option=yes], [visibility_option=no])
+    AC_SUBST(WERRORFLAG, "-Werror")
+    AS_IF([test "$visibility_option" = yes], [
+	RUBY_APPEND_OPTION(XCFLAGS, -fvisibility=hidden)
+	AC_DEFINE(RUBY_SYMBOL_EXPORT_BEGIN, [_Pragma("GCC visibility push(default)")])
+	AC_DEFINE(RUBY_SYMBOL_EXPORT_END,   [_Pragma("GCC visibility pop")])
+    ], [
+	RUBY_TRY_LDFLAGS([-Wl,-unexported_symbol,_Init_*], [visibility_option=ld], [visibility_option=no])
+    ])
+])
+
+AS_IF([test "$GCC" = yes], [
+    # optflags
+
+    AS_CASE(["$target_os"], [mingw*], [
+	RUBY_TRY_CFLAGS(-fno-omit-frame-pointer, [optflags="${optflags+$optflags }-fno-omit-frame-pointer"])
+	RUBY_TRY_CFLAGS(-static-libgcc, [static_libgcc=yes], [static_libgcc=no])
+	AS_IF([test "$static_libgcc" = yes], [
+	    RUBY_APPEND_OPTION(EXTLDFLAGS, -static-libgcc)
+	])
+    ])
+
+    # disable fast-math
+    for oflag in -fno-fast-math; do
+	RUBY_TRY_CFLAGS($oflag, [RUBY_APPEND_OPTION(optflags, $oflag)])
+    done
+    for oflag in -fexcess-precision=standard -fp-model\ precise; do
+	RUBY_TRY_CFLAGS($oflag, [RUBY_APPEND_OPTION(XCFLAGS, $oflag)])
+    done
+])
+
+AS_CASE(["$target_cpu"], [[i[3-6]86*]], [
+    AC_CACHE_CHECK([for __sync_val_compare_and_swap], [rb_cv_gcc_compiler_cas], [
+	AC_LINK_IFELSE([AC_LANG_PROGRAM([[unsigned long atomic_var;]],
+	    [[__sync_val_compare_and_swap(&atomic_var, 0, 1);]])],
+	    [rb_cv_gcc_compiler_cas=yes],
+	    [
+	    save_CFLAGS="$CFLAGS" CFLAGS="$CFLAGS -march=i486"
+	    AC_LINK_IFELSE([AC_LANG_PROGRAM([[unsigned long atomic_var;]],
+		[[__sync_val_compare_and_swap(&atomic_var, 0, 1);]])],
+		[rb_cv_gcc_compiler_cas=i486],
+		[rb_cv_gcc_compiler_cas=no])
+	    CFLAGS="$save_CFLAGS"
+	    ])
+    ])
+    AS_IF([test "$rb_cv_gcc_compiler_cas" = i486], [ARCH_FLAG="-march=i486"])
+])
+
+OPT_DIR=
+AC_ARG_WITH([gmp-dir],
+  AS_HELP_STRING([--with-gmp-dir=DIR],
+                 [specify the prefix directory where gmp is installed]),
+  [OPT_DIR="${OPT_DIR:+$OPT_DIR$PATH_SEPARATOR}$withval"], [])
+AC_ARG_WITH([gmp],
+  [AS_HELP_STRING([--without-gmp],
+                  [disable GNU GMP to accelerate Bignum operations])],
+  [], [with_gmp=yes])
+
+AC_ARG_WITH(opt-dir,
+	AS_HELP_STRING([--with-opt-dir=DIR-LIST],
+		       [add optional headers and libraries directories separated by $PATH_SEPARATOR]),
+	[OPT_DIR="${OPT_DIR:+$OPT_DIR$PATH_SEPARATOR}$withval"], [])
+
+AS_IF([test "x$OPT_DIR" != x], [
+    val=`IFS="$PATH_SEPARATOR"
+        for dir in $OPT_DIR; do
+            test -z "$dir" && continue
+            echo x ${LIBPATHFLAG} ${RPATHFLAG} |
+            sed "s/^x *//;s${IFS}"'%1\\$-s'"${IFS}${dir}/lib${IFS}g;s${IFS}%s${IFS}${dir}/lib${IFS}g"
+        done | tr '\012' ' ' | sed 's/ *$//'`
+    LDFLAGS="${LDFLAGS:+$LDFLAGS }$val"
+    DLDFLAGS="${DLDFLAGS:+$DLDFLAGS }$val"
+    LDFLAGS_OPTDIR="$val"
+    INCFLAGS="${INCFLAGS:+$INCFLAGS }"`echo "$OPT_DIR" | tr "${PATH_SEPARATOR}" '\012' |
+        sed '/^$/d;s|^|-I|;s|$|/include|' | tr '\012' ' ' | sed 's/ *$//'`
+])
+AC_SUBST(incflags, "$INCFLAGS")
+
+test -z "${ac_env_CFLAGS_set}" -a -n "${cflags+set}" && eval CFLAGS="\"$cflags $ARCH_FLAG\""
+test -z "${ac_env_CXXFLAGS_set}" -a -n "${cxxflags+set}" && eval CXXFLAGS="\"$cxxflags $ARCH_FLAG\""
+}
+
+AC_CACHE_CHECK([whether compiler has statement and declarations in expressions],
+  rb_cv_have_stmt_and_decl_in_expr,
+  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[ __extension__ ({ int a = 0; a; }); ]])],
+  [rb_cv_have_stmt_and_decl_in_expr=yes],
+  [rb_cv_have_stmt_and_decl_in_expr=no])])
+AS_IF([test "$rb_cv_have_stmt_and_decl_in_expr" = yes], [
+  AC_DEFINE(HAVE_STMT_AND_DECL_IN_EXPR)
+])
+
+[begin]_group "header and library section" && {
+AC_ARG_WITH(winnt-ver,
+  AS_HELP_STRING([--with-winnt-ver=0xXXXX], [target Windows NT version (default to 0x0600)]),
+  [with_winnt_ver="$withval"], [with_winnt_ver="0x0600"])
+AS_CASE(["$target_os"],
+[mingw*], [
+  RUBY_APPEND_OPTION(CPPFLAGS, -D_WIN32_WINNT=$with_winnt_ver)
+  RUBY_APPEND_OPTION(CPPFLAGS, -D__MINGW_USE_VC2005_COMPAT)
+])
+
+RUBY_THREAD
+
+dnl Checks for libraries.
+AS_CASE(["$target_os"],[*bsd*|dragonfly*],[],[ac_cv_func_daemon=no])
+
+AS_CASE(["$target_os"], [*android*], [
+	AS_CASE(["$target_cpu"], [arm*], [
+		ac_cv_func___builtin_setjmp=no
+	])
+])
+
+AS_UNSET(ORIG_LIBS)
+POSTLINK=:
+AC_SUBST(POSTLINK)
+cleanlibs=
+AC_SUBST(cleanlibs)
+AS_CASE(["$target_os"],
+[nextstep*], [	],
+[openstep*], [	],
+[rhapsody*], [	],
+[darwin*], [
+		ORIG_LIBS="$LIBS"
+		RUBY_PREPEND_OPTION(LIBS, -lobjc)
+		RUBY_APPEND_OPTIONS(CPPFLAGS, -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE -D_DARWIN_UNLIMITED_SELECT -D_REENTRANT)
+		AC_CACHE_CHECK([whether syscall(2) is deprecated], rb_cv_syscall_deprecated,
+		    [RUBY_WERROR_FLAG([
+			AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <unistd.h>]],
+							   [[if (syscall(0)) return 1;]])],
+			    [rb_cv_syscall_deprecated=no],
+			    [rb_cv_syscall_deprecated=yes])])])
+		AS_IF([test $rb_cv_syscall_deprecated = yes], [
+		    ac_cv_func___syscall=no
+		    ac_cv_func_syscall=no
+		    ac_cv_header_sys_syscall_h=no
+		    ac_cv_header_syscall_h=no
+		])
+		ac_cv_func_getcontext=no
+		ac_cv_func_setcontext=no
+		ac_cv_type_getgroups=gid_t # getgroups() on Rosetta fills garbage
+		ac_cv_lib_crypt_crypt=no
+		ac_cv_func_fdatasync=no # Mac OS X wrongly reports it has fdatasync()
+		ac_cv_func_vfork=no
+		AS_IF([test $gcc_major -eq 4 -a $gcc_minor -lt 3], [
+		    ac_cv_func___builtin_setjmp=no
+		])
+		with_setjmp_type=sigsetjmp # to hijack SIGCHLD handler
+		AC_CACHE_CHECK(for broken crypt with 8bit chars, rb_cv_broken_crypt,
+		    [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdio.h>
+#include <unistd.h>
+#include <string.h>
+
+void
+broken_crypt(const char *salt, const char *buf1, const char *buf2)
+{
+#if 0
+    printf("%.2x%.2x: %s -> %s\n", (unsigned char)salt[0], (unsigned char)salt[1],
+	   buf1+2, buf2+2);
+#endif
+}
+
+int
+main()
+{
+    int i;
+    char salt[2], buf[256], *s;
+    for (i = 0; i < 128*128; i++) {
+	salt[0] = 0x80 | (i & 0x7f);
+	salt[1] = 0x80 | (i >> 7);
+	strcpy(buf, crypt("", salt));
+	if (strcmp(buf, s = crypt("", salt))) {
+	    broken_crypt(salt, buf, s);
+	    return 1;
+	}
+    }
+    salt[0] = salt[1] = ' ';
+    strcpy(buf, crypt("", salt));
+    salt[0] = salt[1] = 0x80 | ' ';
+    if (strcmp(buf, s = crypt("", salt))) {
+	broken_crypt(salt, buf, s);
+	return 1;
+    }
+    return 0;
+}
+]])],
+		    rb_cv_broken_crypt=no,
+		    rb_cv_broken_crypt=yes,
+		    rb_cv_broken_crypt=yes)])
+		AS_IF([test "$rb_cv_broken_crypt" = yes], [
+		   AC_DEFINE(BROKEN_CRYPT, 1)
+		])
+		POSTLINK=""
+		AC_CHECK_PROGS(codesign, codesign)
+		dsymutils=
+		AS_CASE("$CC_NO_WRAPPER", [gcc*-1[[3-9]]], [
+		    dsymutils=${CC_NO_WRAPPER@%:@gcc}
+		    dsymutils=dsymutil${dsymutils%-1*}
+		    dsymutils="$dsymutils-19 $dsymutils-18 $dsymutils-17"
+		])
+		AC_CHECK_PROGS(dsymutil, $dsymutils dsymutil)
+		AS_IF([test -n "$codesign"], [
+		    POSTLINK="{ test -z '\$(RUBY_CODESIGN)' || $codesign -s '\$(RUBY_CODESIGN)' -f \$@; }${POSTLINK:+; $POSTLINK}"
+		])
+		AS_IF([test -n "$dsymutil"], [
+		    POSTLINK="$dsymutil \$@ 2>/dev/null${POSTLINK:+; $POSTLINK}"
+		])
+		AS_IF([test -n "${POSTLINK}"], [
+		    LINK_SO="$LINK_SO
+\$(POSTLINK)"
+		])
+		AC_CHECK_HEADERS(crt_externs.h, [], [], [
+		    #include <crt_externs.h>
+		])
+		cleanlibs='$(TARGET_SO).dSYM'
+		],
+[solaris*], [	LIBS="-lm $LIBS"
+		ac_cv_func_vfork=no
+		AC_MSG_CHECKING(whether _XOPEN_SOURCE is already given)
+		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>
+			#ifndef _XOPEN_SOURCE
+			#error _XOPEN_SOURCE is not defined
+			#endif
+			]], [[]])],
+		        [given_xopen_source=yes], [given_xopen_source=no])
+		AC_MSG_RESULT($given_xopen_source)
+		AS_IF([test $given_xopen_source = no], [
+		  AC_MSG_CHECKING(appropriate _XOPEN_SOURCE value to define)
+		  define_xopen_source=""
+		  for tmp_xpg in 7 6 5; do
+		    AS_IF([test x"$define_xopen_source" != x], [
+		      break
+		    ])
+		    RUBY_WERROR_FLAG([AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+			#define _XOPEN_SOURCE ${tmp_xpg}00
+			#include <unistd.h>
+			#ifndef _XPG${tmp_xpg}
+			#error _XPG${tmp_xpg} should be defined by _XOPEN_SOURCE=${tmp_xpg}00
+			#endif
+			]], [[]])],
+			[define_xopen_source=${tmp_xpg}00], [])
+			])
+		  done
+		  AS_IF([test x"$define_xopen_source" = x], [
+		    define_xopen_source=no
+		  ])
+		  AC_MSG_RESULT($define_xopen_source)
+		  AS_IF([test x"$define_xopen_source" != xno], [
+		    RUBY_APPEND_OPTIONS(CPPFLAGS, -D_XOPEN_SOURCE=$define_xopen_source)
+		    # _XOPEN_SOURCE should not be defined for C++ on Solaris.
+		    RUBY_APPEND_OPTIONS(CXXFLAGS, -U_XOPEN_SOURCE)
+		  ])
+		])
+		AC_CHECK_TYPES([caddr_t],[],[],[@%:@include <sys/types.h>])
+		AC_CACHE_CHECK([whether madvise declaration is needed], rb_cv_madvice_prototype_using_caddr_t,
+		  [RUBY_WERROR_FLAG([AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+		    @%:@include <sys/unistd.h>
+		    @%:@include <sys/mman.h>
+		    @%:@include <sys/types.h>
+		    extern int madvise(caddr_t, size_t, int);
+		    ]], [[]])],
+		    [rb_cv_madvice_prototype_using_caddr_t=yes], [rb_cv_madvice_prototype_using_caddr_t=no])
+		  ])
+		])
+		AS_IF([test $rb_cv_madvice_prototype_using_caddr_t = yes], [AC_DEFINE(NEED_MADVICE_PROTOTYPE_USING_CADDR_T, 1)])
+		],
+[haiku*], [
+		LIBS="$LIBS" # m lib is include in root
+		],
+[cygwin*|msys*], [
+		ac_cv_header_langinfo_h=yes
+		RUBY_APPEND_OPTIONS(CPPFLAGS, -D_XOPEN_SOURCE -D_GNU_SOURCE)
+		AC_CHECK_FUNCS(cygwin_conv_path)
+		AC_LIBOBJ([langinfo])
+		],
+[mingw*], [	LIBS="-lshell32 -lws2_32 -liphlpapi -limagehlp -lshlwapi -lbcrypt $LIBS"
+		ac_cv_header_pwd_h=no
+		ac_cv_header_utime_h=no
+		ac_cv_header_sys_ioctl_h=no
+		ac_cv_header_sys_param_h=no
+		ac_cv_header_sys_resource_h=no
+		ac_cv_header_sys_select_h=no
+		ac_cv_header_sys_time_h=no
+		ac_cv_header_sys_times_h=no
+		ac_cv_header_sys_socket_h=no
+		ac_cv_func_execv=yes
+		ac_cv_func_lstat=yes
+		ac_cv_func_times=yes
+		ac_cv_func_waitpid=yes
+		ac_cv_func_fsync=yes
+		ac_cv_func_seekdir=yes
+		ac_cv_func_telldir=yes
+		ac_cv_func_lchown=yes
+		ac_cv_func_link=yes
+		ac_cv_func_readlink=yes
+		ac_cv_func_shutdown=yes
+		ac_cv_func_symlink=yes
+		ac_cv_lib_crypt_crypt=no
+		ac_cv_func_getpgrp_void=no
+		ac_cv_func_memcmp_working=yes
+		ac_cv_lib_dl_dlopen=no
+		rb_cv_negative_time_t=yes
+		ac_cv_func_fcntl=yes
+		ac_cv_func_flock=yes
+		ac_cv_func_gmtime_r=yes
+		rb_cv_large_fd_select=yes
+		ac_cv_type_struct_timeval=yes
+                ac_cv_func_clock_gettime=yes
+                ac_cv_func_clock_getres=yes
+		ac_cv_func_malloc_usable_size=no
+		ac_cv_type_off_t=yes
+		ac_cv_sizeof_off_t=8
+		AS_IF([test "$target_cpu" = x64], [
+		    ac_cv_func___builtin_setjmp=yes
+		    ac_cv_func_round=no
+		])
+		ac_cv_func_tgamma=no
+		AC_CHECK_TYPE([NET_LUID], [], [],
+			      [@%:@include <winsock2.h>
+			      @%:@include <iphlpapi.h>])
+		AS_IF([test x"$ac_cv_type_NET_LUID" = xyes], [
+		    AC_DEFINE(HAVE_TYPE_NET_LUID, 1)
+		])
+		AC_CHECK_FUNCS(_gmtime64_s)
+		AC_CHECK_FUNCS(_wfreopen_s)
+		AC_LIBOBJ([langinfo])
+		],
+[bsdi*], [	LIBS="-lm $LIBS"
+		AC_DEFINE(BROKEN_SETREUID, 1)
+		AC_DEFINE(BROKEN_SETREGID, 1)
+                ac_cv_sizeof_rlim_t=8],
+[freebsd*], [	LIBS="-lm $LIBS"
+		ac_cv_func_getpeername=no
+		ac_cv_func_getsockname=no
+		ac_cv_func_shutdown=no
+		ac_cv_func_close=no
+		],
+[netbsd*], [	LIBS="-lm $LIBS"
+		],
+[dragonfly*], [	LIBS="-lm $LIBS"
+		],
+[aix*],[	LIBS="-lm $LIBS"
+		ac_cv_func_round=no
+		ac_cv_func___builtin_setjmp=no
+		],
+[linux*],[	LIBS="-lm $LIBS"
+		# __builtin_longjmp in ppc64* Linux does not restore
+		# the TOC register (r2), which is problematic
+		# when a global exit happens from JITted .so code.
+		AS_CASE(["$target_cpu"], [powerpc64*], [
+			ac_cv_func___builtin_setjmp=no
+		])
+		# With gcc-8's -fcf-protection, RJIT's __builtin_longjmp fails.
+		AS_CASE(["$CC $CFLAGS "], [*" -fcf-protection "*], [cf_protection=yes], [cf_protection=no])
+		AS_IF([test "$cf_protection" = yes], [
+			ac_cv_func___builtin_setjmp=no
+		])
+		],
+[emscripten*], [LIBS="-lm -lc $LIBS"
+		RUBY_APPEND_OPTIONS(LDFLAGS, "-sALLOW_MEMORY_GROWTH=1")
+		RUBY_APPEND_OPTIONS(LDFLAGS, "-sASYNCIFY")
+		RUBY_APPEND_OPTIONS(LDFLAGS, "-sFORCE_FILESYSTEM=1")
+		ac_cv_func_shutdown=no
+		],
+[wasi*],[	LIBS="-lm -lwasi-emulated-mman -lwasi-emulated-signal -lwasi-emulated-getpid -lwasi-emulated-process-clocks $LIBS"
+		RUBY_APPEND_OPTIONS(CFLAGS, -D_WASI_EMULATED_SIGNAL -D_WASI_EMULATED_MMAN -D_WASI_EMULATED_GETPID -D_WASI_EMULATED_PROCESS_CLOCKS)
+		RUBY_APPEND_OPTIONS(CPPFLAGS, -D_WASI_EMULATED_SIGNAL -D_WASI_EMULATED_MMAN -D_WASI_EMULATED_GETPID -D_WASI_EMULATED_PROCESS_CLOCKS)
+		POSTLINK="\$(WASMOPT) --asyncify \$(wasmoptflags) --pass-arg=asyncify-ignore-imports -o \$@ \$@${POSTLINK:+; $POSTLINK}"
+		# wasi-libc's sys/socket.h is not compatible with -std=gnu99,
+		# so re-declare shutdown in include/ruby/missing.h
+		ac_cv_func_shutdown=no
+		],
+[	LIBS="-lm $LIBS"])
+: ${ORIG_LIBS=$LIBS}
+
+AS_IF([test -n "${rb_there_is_in_fact_no_gplusplus_but_autoconf_is_cheating_us}"], [
+    AC_MSG_NOTICE([Test skipped due to lack of a C++ compiler.])
+],
+[test -n "${CXX}"], [
+    RUBY_WERROR_FLAG([
+        AC_MSG_CHECKING([whether CXXFLAGS is valid])
+        AC_LANG_PUSH(C++)
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <cstdio>]], [[]])],
+	    [AC_MSG_RESULT(yes)],[
+            AC_MSG_RESULT(no)
+            # The message mentions CXXFLAGS, but CPPFLAGS might also affects.
+            AC_MSG_WARN([something wrong with CXXFLAGS="$CXXFLAGS"])
+            CXX=false
+        ])
+        AC_LANG_POP(C++)
+    ])
+])
+
+AC_CHECK_LIB(crypt, crypt)      # glibc (GNU/Linux, GNU/Hurd, GNU/kFreeBSD)
+AC_CHECK_LIB(dl, dlopen)	# Dynamic linking for SunOS/Solaris and SYSV
+AC_CHECK_LIB(socket, shutdown)  # SunOS/Solaris
+
+dnl Checks for header files.
+AC_HEADER_DIRENT
+dnl AC_HEADER_STDC has been checked in AC_USE_SYSTEM_EXTENSIONS
+AC_HEADER_STDBOOL
+AC_HEADER_SYS_WAIT
+
+AC_CHECK_HEADERS([afunix.h], [], [],
+[#ifdef _WIN32
+# include <winsock2.h>
+#endif
+])
+AC_CHECK_HEADERS(atomic.h)
+AC_CHECK_HEADERS(copyfile.h)
+AC_CHECK_HEADERS(direct.h)
+AC_CHECK_HEADERS(grp.h)
+AC_CHECK_HEADERS(fcntl.h)
+AC_CHECK_HEADERS(float.h)
+AC_CHECK_HEADERS(ieeefp.h)
+AC_CHECK_HEADERS(intrinsics.h)
+AC_CHECK_HEADERS(langinfo.h)
+AC_CHECK_HEADERS(limits.h)
+AC_CHECK_HEADERS(locale.h)
+AC_CHECK_HEADERS(malloc.h)
+AC_CHECK_HEADERS(malloc/malloc.h)
+AC_CHECK_HEADERS(malloc_np.h)
+AC_CHECK_HEADERS(net/socket.h)
+AC_CHECK_HEADERS(process.h)
+AC_CHECK_HEADERS(pwd.h)
+AC_CHECK_HEADERS(sanitizer/asan_interface.h)
+AC_CHECK_HEADERS(sanitizer/msan_interface.h)
+AC_CHECK_HEADERS(setjmpex.h)
+AC_CHECK_HEADERS(stdalign.h)
+AC_CHECK_HEADERS(stdio.h)
+AC_CHECK_HEADERS(sys/attr.h)
+AC_CHECK_HEADERS(sys/eventfd.h)
+AC_CHECK_HEADERS(sys/fcntl.h)
+AC_CHECK_HEADERS(sys/file.h)
+AC_CHECK_HEADERS(sys/id.h)
+AC_CHECK_HEADERS(sys/ioctl.h)
+AC_CHECK_HEADERS(sys/mkdev.h)
+AC_CHECK_HEADERS(sys/param.h)
+AC_CHECK_HEADERS(sys/prctl.h)
+AC_CHECK_HEADERS(sys/random.h)
+AC_CHECK_HEADERS(sys/resource.h)
+AC_CHECK_HEADERS(sys/select.h)
+AC_CHECK_HEADERS(sys/sendfile.h)
+AC_CHECK_HEADERS(sys/socket.h)
+AC_CHECK_HEADERS(sys/syscall.h)
+AC_CHECK_HEADERS(sys/sysmacros.h)
+AC_CHECK_HEADERS(sys/time.h)
+AC_CHECK_HEADERS(sys/times.h)
+AC_CHECK_HEADERS(sys/uio.h)
+AC_CHECK_HEADERS(sys/utime.h)
+AC_CHECK_HEADERS(syscall.h)
+AC_CHECK_HEADERS(time.h)
+AC_CHECK_HEADERS(ucontext.h)
+AC_CHECK_HEADERS(utime.h)
+AC_CHECK_HEADERS(sys/epoll.h)
+AC_CHECK_HEADERS(sys/event.h)
+
+AS_CASE("$target_cpu", [x64|x86_64|i[3-6]86*], [
+  AC_CHECK_HEADERS(x86intrin.h)
+])
+RUBY_UNIVERSAL_CHECK_HEADER([x86_64, i386], x86intrin.h)
+
+AS_IF([test "x$with_gmp" != xno],
+  [RUBY_CHECK_HEADER(gmp.h)
+   AS_IF([test "x$ac_cv_header_gmp_h" != xno],
+     AC_SEARCH_LIBS([__gmpz_init], [gmp],
+       [AC_DEFINE(HAVE_LIBGMP, 1)]))])
+
+AC_ARG_WITH([jemalloc],
+  [AS_HELP_STRING([--with-jemalloc],[use jemalloc allocator])],
+  [with_jemalloc=$withval], [with_jemalloc=no])
+AS_IF([test "x$with_jemalloc" != xno],[
+  # find jemalloc header first
+  save_CPPFLAGS="${CPPFLAGS}"
+  CPPFLAGS="${INCFLAGS} ${CPPFLAGS}"
+  malloc_header=
+  AC_CHECK_HEADER(jemalloc/jemalloc.h, [malloc_header=jemalloc/jemalloc.h], [
+    AC_CHECK_HEADER(jemalloc.h, [malloc_header=jemalloc.h])
+  ])
+  AS_IF([test "$malloc_header" != ""], [
+    AC_DEFINE_UNQUOTED(RUBY_ALTERNATIVE_MALLOC_HEADER, [<$malloc_header>])
+  ])
+  save_LIBS="$LIBS"
+  AC_CACHE_CHECK([for jemalloc library], rb_cv_jemalloc_library, [
+    rb_cv_jemalloc_library=no
+    # try [with mangle, without mangle] x [no more additional
+    # libraries, adding jemalloc] combination, using the jemalloc
+    # header found above.
+    for mangle in '' mangle; do
+      for lib in '' -ljemalloc; do
+        LIBS="${lib:+$lib }$LIBS"
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([${mangle:+@%:@define JEMALLOC_MANGLE 1}
+          @%:@include <stdio.h>
+          @%:@ifdef RUBY_ALTERNATIVE_MALLOC_HEADER
+          @%:@include RUBY_ALTERNATIVE_MALLOC_HEADER
+          @%:@else
+          extern const char *malloc_conf;
+          @%:@endif],
+          [/* access at runtime not to be optimized away */
+          if (malloc_conf) printf("malloc_conf=%s\n", malloc_conf);])],
+          [rb_cv_jemalloc_library="${lib:-none required}${mangle:+ with mangle}"])
+        LIBS="$save_LIBS"
+        test "${rb_cv_jemalloc_library}" = no || break 2
+      done
+    done
+  ])
+  CPPFLAGS="${save_CPPFLAGS}"
+  unset save_CPPFLAGS
+  with_jemalloc=${rb_cv_jemalloc_library}
+  AS_CASE(["$with_jemalloc"],
+  [no],
+    [AC_MSG_ERROR([jemalloc requested but not found])],
+  [-l*], [
+    set dummy $with_jemalloc
+    LIBS="$2 $LIBS"
+    DLDLIBS="$2${DLDLIBS:+ $DLDLIBS}" # probably needed also in extension libraries
+  ])
+  AS_CASE(["$with_jemalloc"],
+  [*" with mangle"], [
+    AC_DEFINE(JEMALLOC_MANGLE)
+  ])
+  AC_DEFINE(HAVE_MALLOC_CONF)
+  ac_cv_func_malloc_usable_size=yes
+]) # with_jemalloc
+
+dnl check for large file stuff
+mv confdefs.h confdefs1.h
+: > confdefs.h
+AC_SYS_LARGEFILE
+# On 32-bit Solaris, it is safe to define _LARGEFILE_SOURCE
+# which is not added by AC_SYS_LARGEFILE.
+AS_IF([test x"$enable_largefile" != xno], [
+  AS_CASE(["$target_os"], [solaris*], [
+    AC_MSG_CHECKING([wheather _LARGEFILE_SOURCE should be defined])
+    AS_CASE(["${ac_cv_sys_file_offset_bits}:${ac_cv_sys_large_files}"],
+      ["64:"|"64:no"|"64:unknown"], [
+	# insert _LARGEFILE_SOURCE before _FILE_OFFSET_BITS line
+	# that is the same order as "getconf LFS_CFLAGS" output
+	mv confdefs.h largefile0.h
+	: > confdefs.h
+	AC_DEFINE(_LARGEFILE_SOURCE)
+	cat largefile0.h >> confdefs.h
+	rm largefile0.h
+	AC_MSG_RESULT([yes])
+      ], [AC_MSG_RESULT([no])])
+  ])
+])
+mv confdefs.h largefile.h
+mv confdefs1.h confdefs.h
+cat largefile.h >> confdefs.h
+
+AS_CASE(["$target_os"],
+    [aix*], [
+    AS_CASE(["$target_cpu:$ac_cv_sys_large_files"],
+	[ppc64:*|powerpc64:*], [],
+	[*:no|*:unknown], [],
+	[
+	    # AIX currently does not support a 32-bit call to posix_fadvise()
+	    # if _LARGE_FILES is defined.
+	    ac_cv_func_posix_fadvise=no
+	])
+    ])
+
+AC_C_BIGENDIAN([], [], [], [AC_DEFINE(AC_APPLE_UNIVERSAL_BUILD, 1)])
+AC_C_CONST
+AC_C_CHAR_UNSIGNED
+AC_C_INLINE
+AC_C_VOLATILE
+AC_C_TYPEOF
+AC_C_RESTRICT
+
+AS_CASE(":$ac_cv_c_const:$ac_cv_c_volatile:",
+    [*:no:*], [AC_MSG_ERROR(ANSI C-conforming const and volatile are mandatory)])
+
+AC_CHECK_TYPES([long long, off_t])
+
+AC_CACHE_CHECK([char bit], [rb_cv_char_bit],
+    [test "$universal_binary" = yes && cross_compiling=yes
+    AC_COMPUTE_INT([rb_cv_char_bit], [CHAR_BIT],
+	[AC_INCLUDES_DEFAULT([@%:@include <limits.h>])], [rb_cv_char_bit=8])
+    test "$universal_binary" = yes && cross_compiling=$real_cross_compiling])
+
+RUBY_CHECK_SIZEOF(int, [], [ILP])
+RUBY_CHECK_SIZEOF(short)
+RUBY_CHECK_SIZEOF(long, [int], [ILP LP])
+RUBY_CHECK_SIZEOF(long long)
+RUBY_CHECK_SIZEOF(__int64, [8], [ILP LP])
+RUBY_CHECK_SIZEOF(__int128, [16], [ILP LP])
+RUBY_CHECK_SIZEOF(off_t)
+RUBY_CHECK_SIZEOF(void*, [int long "long long"], [ILP LP LLP])
+RUBY_CHECK_SIZEOF(float)
+RUBY_CHECK_SIZEOF(double)
+RUBY_CHECK_SIZEOF(time_t, [long "long long"], [], [@%:@include <time.h>])
+RUBY_CHECK_SIZEOF(clock_t, [], [], [@%:@include <time.h>])
+AC_SUBST(X_BUILTIN_BINARY, yes)
+AS_IF([test "$cross_compiling" = yes],
+[dnl miniruby cannot run if cross compiling
+    X_BUILTIN_BINARY=no
+],
+[
+    AS_CASE([ac_cv_sizeof_voidp],
+    [[1-9]*], [dnl fixed value
+    ],
+    [
+        AC_CACHE_CHECK([word size], [rb_cv_word_size],
+            [for w in 4 8; do
+                AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@if SIZEOF_VOIDP != ${w}
+                @%:@error SIZEOF_VOIDP
+                @%:@endif]])], [rb_cv_word_size=${w}; break])
+            done])
+        AS_IF([test -z $rb_cv_word_size], [X_BUILTIN_BINARY=no])
+    ])
+])
+
+AC_CACHE_CHECK(packed struct attribute, rb_cv_packed_struct,
+    [rb_cv_packed_struct=no
+    for mac in \
+	"__pragma(pack(push, 1)) x __pragma(pack(pop))" \
+	"x __attribute__((packed))" \
+	; do
+	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@define PACKED_STRUCT(x) $mac
+			PACKED_STRUCT(struct { int a; });]], [[]])],
+		[rb_cv_packed_struct=$mac; break])
+    done])
+AS_IF([test "$rb_cv_packed_struct" != no], [
+    AC_DEFINE_UNQUOTED([RBIMPL_ATTR_PACKED_STRUCT_BEGIN()], [`echo " $rb_cv_packed_struct " | sed 's/ x .*//;s/^ *//'`])
+    AC_DEFINE_UNQUOTED([RBIMPL_ATTR_PACKED_STRUCT_END()], [`echo " $rb_cv_packed_struct " | sed 's/.* x //;s/ *$//'`])
+    RUBY_TRY_CFLAGS(-Wno-address-of-packed-member, [AC_DEFINE(USE_UNALIGNED_MEMBER_ACCESS)])
+])
+
+AS_IF([test "x$ac_cv_type_long_long" = xyes], [
+    RUBY_CHECK_PRINTF_PREFIX(long long, ll I64, LL)
+], [test "x$ac_cv_type___int64" = xyes], [
+    RUBY_CHECK_PRINTF_PREFIX(__int64, ll I64, LL)
+])
+
+RUBY_REPLACE_TYPE(pid_t, int, PIDT)
+RUBY_REPLACE_TYPE(uid_t, int, UIDT)
+RUBY_REPLACE_TYPE(gid_t, int, GIDT)
+RUBY_REPLACE_TYPE(time_t, [], TIMET, [@%:@include <time.h>])
+RUBY_REPLACE_TYPE(dev_t, [int long "long long"], DEVT)
+RUBY_REPLACE_TYPE(mode_t, ["unsigned short" "unsigned int" long], MODET, [@%:@include <sys/stat.h>])
+RUBY_REPLACE_TYPE(rlim_t, [int long "long long"], RLIM, [
+@%:@ifdef HAVE_SYS_TYPES_H
+@%:@include <sys/types.h>
+@%:@endif
+@%:@ifdef HAVE_SYS_TYPES_H
+@%:@include <sys/time.h>
+@%:@endif
+@%:@include <sys/resource.h>
+])
+RUBY_REPLACE_TYPE(off_t, [], OFFT)
+RUBY_REPLACE_TYPE(clockid_t, [], CLOCKID, [@%:@ifdef HAVE_TIME_H
+@%:@ include <time.h>
+@%:@endif
+@%:@ifdef HAVE_SYS_TIME_H
+@%:@ include <sys/time.h>
+@%:@endif])
+
+# __VA_ARGS__ is also tested in AC_PROG_CC_C99 since autoconf 2.60a (around
+# 2006). The check below is redundant and should always success.  Remain not
+# deleted for backward compat.
+AC_CACHE_CHECK(for variable length macro, rb_cv_va_args_macro,
+  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+int foo(const char*);
+@%:@define FOO(...) foo(@%:@__VA_ARGS__)
+]], [[FOO(1);FOO(1,2);FOO(1,2,3);]])],
+  rb_cv_va_args_macro=yes,
+  rb_cv_va_args_macro=no)])
+AS_IF([test "$rb_cv_va_args_macro" = yes], [
+  AC_DEFINE(HAVE_VA_ARGS_MACRO)
+])
+
+# We want C11's  `_Alignof`.  GCC (and alike) have  `__alignof__`, which behave
+# slightly differently  than the  C11's.  We cannot  use `__alignof__`  for our
+# purpose.   The problem  is, however,  that  old gcc  and old  clang had  both
+# implemented `_Alignof` as  a synonym of `__alignof__`.  They are  not what we
+# want.  We have to check sanity.
+#
+# See also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52023
+# See also: https://bugs.llvm.org/show_bug.cgi?id=26547
+AC_CACHE_CHECK([if _Alignof() works], rb_cv_have__alignof,[
+    rb_cv_have__alignof=no
+    RUBY_WERROR_FLAG([
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+            @%:@ifdef HAVE_STDALIGN_H
+            @%:@include <stdalign.h>
+            @%:@endif
+            @%:@ifdef STDC_HEADERS
+            @%:@include <stddef.h>
+            @%:@endif
+            @%:@ifndef __GNUC__
+            @%:@define __extension__
+            @%:@endif
+        ]], [[
+            typedef struct conftest_tag {
+                char _;
+                double d;
+            } T;
+            static int conftest_ary@<:@
+                offsetof(T, d) == __extension__ _Alignof(double)
+                ? 1 : -1
+            @:>@;
+            return conftest_ary@<:@0@:>@;
+        ]])],[
+            rb_cv_have__alignof=yes
+        ],[])
+    ])
+])
+AS_IF([test "$rb_cv_have__alignof" != no], [
+    AC_DEFINE(HAVE__ALIGNOF)
+])
+
+RUBY_FUNC_ATTRIBUTE(__const__, CONSTFUNC)
+RUBY_FUNC_ATTRIBUTE(__pure__, PUREFUNC)
+RUBY_FUNC_ATTRIBUTE(__noreturn__, NORETURN)
+RUBY_FUNC_ATTRIBUTE(__deprecated__, DEPRECATED)
+RUBY_FUNC_ATTRIBUTE(__deprecated__("by "@%:@n), DEPRECATED_BY(n,x), rb_cv_func_deprecated_by)
+RUBY_FUNC_ATTRIBUTE(__noinline__, NOINLINE)
+RUBY_FUNC_ATTRIBUTE(__always_inline__, ALWAYS_INLINE)
+RUBY_FUNC_ATTRIBUTE(__no_sanitize__(san), NO_SANITIZE(san, x), rb_cv_func_no_sanitize)
+RUBY_FUNC_ATTRIBUTE(__no_sanitize_address__, NO_SANITIZE_ADDRESS)
+RUBY_FUNC_ATTRIBUTE(__no_address_safety_analysis__, NO_ADDRESS_SAFETY_ANALYSIS)
+RUBY_FUNC_ATTRIBUTE(__warn_unused_result__, WARN_UNUSED_RESULT)
+RUBY_FUNC_ATTRIBUTE(__unused__, MAYBE_UNUSED)
+RUBY_FUNC_ATTRIBUTE(__error__ mesg, ERRORFUNC(mesg,x), rb_cv_func___error__)
+RUBY_FUNC_ATTRIBUTE(__warning__ mesg, WARNINGFUNC(mesg,x), rb_cv_func___warning__)
+RUBY_FUNC_ATTRIBUTE(__weak__, WEAK, rb_cv_func_weak)
+AS_IF([test "$rb_cv_func_weak" != x], [
+   AC_DEFINE(HAVE_FUNC_WEAK)
+])
+
+AC_CACHE_CHECK([for __attribute__((__depreacted__(msg))) in C++],
+  rb_cv_CentOS6_CXX_workaround,
+  RUBY_WERROR_FLAG([
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE(
+      [AC_LANG_PROGRAM(
+        [],
+        [__attribute__((__deprecated__("message"))) int conftest(...);])],
+      [rb_cv_CentOS6_CXX_workaround=yes],
+      [rb_cv_CentOS6_CXX_workaround=no])
+    AC_LANG_POP()]))
+AS_IF([test "$rb_cv_CentOS6_CXX_workaround" != no],[
+  AC_DEFINE([RUBY_CXX_DEPRECATED(msg)],
+    [__attribute__((__deprecated__(msg)))])])
+
+AC_CACHE_CHECK([for std::nullptr_t], rb_cv_CXX_nullptr, [
+  AC_LANG_PUSH([C++])
+  AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [@%:@include <cstddef>],
+      [static std::nullptr_t const *const conftest = nullptr;])],
+    [rb_cv_CXX_nullptr=yes],
+    [rb_cv_CXX_nullptr=no])
+  AC_LANG_POP()])
+AS_IF([test "$rb_cv_CXX_nullptr" != no],[AC_DEFINE(HAVE_NULLPTR)])
+
+if_i386=${universal_binary+[defined __i386__]}
+RUBY_FUNC_ATTRIBUTE(__stdcall__,  FUNC_STDCALL,  rb_cv_func_stdcall,  ${if_i386})
+RUBY_FUNC_ATTRIBUTE(__cdecl__,    FUNC_CDECL,    rb_cv_func_cdecl,    ${if_i386})
+RUBY_FUNC_ATTRIBUTE(__fastcall__, FUNC_FASTCALL, rb_cv_func_fastcall, ${if_i386})
+RUBY_FUNC_ATTRIBUTE(__optimize__("O0"), FUNC_UNOPTIMIZED, rb_cv_func_unoptimized)
+RUBY_FUNC_ATTRIBUTE(__optimize__("-Os","-fomit-frame-pointer"), FUNC_MINIMIZED, rb_cv_func_minimized)
+
+AS_IF([test "$GCC" = yes], [
+    AC_CACHE_CHECK([for function alias], [rb_cv_gcc_function_alias],
+	[rb_cv_gcc_function_alias=no
+	for a in alias weak,alias; do
+	    AC_LINK_IFELSE([AC_LANG_PROGRAM([[void foo(void) {}
+		void bar(void) __attribute__(($a("foo")));]], [[bar()]])],
+		[rb_cv_gcc_function_alias=$a; break])
+	done])
+    AS_IF([test "$rb_cv_gcc_function_alias" != no], [
+	AC_DEFINE(HAVE_ATTRIBUTE_FUNCTION_ALIAS)
+	AC_DEFINE_UNQUOTED([RUBY_ALIAS_FUNCTION_TYPE(type, prot, name, args)],
+			   [type prot __attribute__(($rb_cv_gcc_function_alias(@%:@name)));])
+	AC_DEFINE_UNQUOTED([RUBY_ALIAS_FUNCTION_VOID(prot, name, args)],
+			   [RUBY_ALIAS_FUNCTION_TYPE(void, prot, name, args)])
+    ])
+])
+
+{
+    AC_CACHE_CHECK([for __atomic builtins], [rb_cv_gcc_atomic_builtins], [
+	AC_LINK_IFELSE([AC_LANG_PROGRAM([[unsigned int atomic_var;]],
+		    [[
+			__atomic_exchange_n(&atomic_var, 0, __ATOMIC_SEQ_CST);
+			__atomic_exchange_n(&atomic_var, 1, __ATOMIC_SEQ_CST);
+			__atomic_fetch_add(&atomic_var, 1, __ATOMIC_SEQ_CST);
+			__atomic_fetch_sub(&atomic_var, 1, __ATOMIC_SEQ_CST);
+			__atomic_or_fetch(&atomic_var, 1, __ATOMIC_SEQ_CST);
+		    ]])],
+		    [rb_cv_gcc_atomic_builtins=yes],
+		    [rb_cv_gcc_atomic_builtins=no])])
+    AS_IF([test "$rb_cv_gcc_atomic_builtins" = yes], [
+	AC_DEFINE(HAVE_GCC_ATOMIC_BUILTINS)
+    ])
+
+    AC_CACHE_CHECK([for __sync builtins], [rb_cv_gcc_sync_builtins], [
+	AC_LINK_IFELSE([AC_LANG_PROGRAM([[unsigned int atomic_var;]],
+		    [[
+			__sync_lock_test_and_set(&atomic_var, 0);
+			__sync_lock_test_and_set(&atomic_var, 1);
+			__sync_fetch_and_add(&atomic_var, 1);
+			__sync_fetch_and_sub(&atomic_var, 1);
+			__sync_or_and_fetch(&atomic_var, 1);
+			__sync_val_compare_and_swap(&atomic_var, 0, 1);
+		    ]])],
+		    [rb_cv_gcc_sync_builtins=yes],
+		    [rb_cv_gcc_sync_builtins=no])])
+    AS_IF([test "$rb_cv_gcc_sync_builtins" = yes], [
+	AC_DEFINE(HAVE_GCC_SYNC_BUILTINS)
+    ])
+
+    AC_CACHE_CHECK(for __builtin_unreachable, rb_cv_func___builtin_unreachable,
+    [RUBY_WERROR_FLAG(
+    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[volatile int zero;]],
+	[[if (zero) __builtin_unreachable();]])],
+	[rb_cv_func___builtin_unreachable=yes],
+	[rb_cv_func___builtin_unreachable=no])
+    ])
+    ])
+    AS_IF([test "$rb_cv_func___builtin_unreachable" = yes], [
+	AC_DEFINE(HAVE___BUILTIN_UNREACHABLE)
+    ])
+
+    AC_CACHE_CHECK(for __assume, rb_cv_func___assume,
+    [RUBY_WERROR_FLAG([
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],
+            [[__assume(1);]])],
+            [rb_cv_func___assume=yes],
+            [rb_cv_func___assume=no])
+    ])
+    ])
+    AS_IF([test "$rb_cv_func___assume" = yes], [
+	AC_DEFINE(HAVE___ASSUME)
+    ])
+}
+
+AC_CACHE_CHECK(for exported function attribute, rb_cv_func_exported, [
+rb_cv_func_exported=no
+RUBY_WERROR_FLAG([
+for mac in '__attribute__ ((__visibility__("default")))' '__declspec(dllexport)'; do
+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@define RUBY_FUNC_EXPORTED $mac extern
+    RUBY_FUNC_EXPORTED void conftest_attribute_check(void);]], [[]])],
+    [rb_cv_func_exported="$mac"; break])
+done
+])])
+AS_IF([test "$rb_cv_func_exported" != no], [
+    AC_DEFINE_UNQUOTED(RUBY_FUNC_EXPORTED, [$rb_cv_func_exported extern])
+])
+RUBY_DECL_ATTRIBUTE([__nonnull__(n)], [RUBY_FUNC_NONNULL(n,x)], [rb_cv_func_nonnull],
+                    [], [function], [
+@%:@define x int conftest_attribute_check(void *p)
+@%:@define n 1
+])
+
+RUBY_APPEND_OPTION(XCFLAGS, -DRUBY_EXPORT)
+
+AC_ARG_ENABLE(mathn,
+    AS_HELP_STRING([--enable-mathn], [enable canonicalization for mathn]),
+    [AC_MSG_ERROR([mathn support has been dropped])])
+
+AC_CACHE_CHECK(for function name string predefined identifier,
+    rb_cv_function_name_string,
+    [AS_CASE(["$target_os"],[openbsd*],[
+      rb_cv_function_name_string=__func__
+     ],[
+     rb_cv_function_name_string=no
+      RUBY_WERROR_FLAG([
+        for func in __func__ __FUNCTION__; do
+            AC_LINK_IFELSE([AC_LANG_PROGRAM([[@%:@include <stdio.h>]],
+					    [[puts($func);]])],
+            [rb_cv_function_name_string=$func
+            break])
+        done
+      ])])]
+)
+AS_IF([test "$rb_cv_function_name_string" != no], [
+    AC_DEFINE_UNQUOTED(RUBY_FUNCTION_NAME_STRING, [$rb_cv_function_name_string])
+])
+
+AC_CACHE_CHECK(if enum over int is allowed, rb_cv_enum_over_int, [
+    rb_cv_enum_over_int=no
+    AS_IF([test "x$ac_cv_type_long_long" = xyes], [
+	type="unsigned long long" max="ULLONG_MAX"
+    ], [
+	type="unsigned long" max="ULONG_MAX"
+    ])
+    RUBY_WERROR_FLAG([
+        AC_COMPILE_IFELSE([
+            AC_LANG_BOOL_COMPILE_TRY([
+                    @%:@include <limits.h>
+                    enum {conftest_max = $max};
+                ], [
+                    (conftest_max == $max) &&
+                    (sizeof(conftest_max) == sizeof($type))
+                ]
+	    )],
+	    [rb_cv_enum_over_int=yes],
+	    [rb_cv_enum_over_int=no]
+	)
+    ])
+])
+AS_IF([test $rb_cv_enum_over_int = yes], [
+    AC_DEFINE(ENUM_OVER_INT, 1)
+])
+
+dnl Check whether we need to define sys_nerr locally
+AC_CHECK_DECLS([sys_nerr], [], [], [$ac_includes_default
+@%:@include <errno.h>])
+
+AC_CHECK_DECLS([getenv])
+
+AS_CASE(["$target_cpu"],
+[alpha*|sh4|sh4el|sh4eb], [AS_CASE(["$target_os"::"$GCC"],
+		[*::yes],  # gcc
+			[CFLAGS="-mieee $CFLAGS"],
+		[osf*],    # ccc
+			[CFLAGS="-ieee $CFLAGS"],
+		)],
+[sparc*], [AC_LIBOBJ([sparc])])
+
+ac_cv_header_net_socket_h=${ac_cv_header_net_socket_h=no}
+AS_IF([test "$ac_cv_header_net_socket_h" = yes], [
+    ac_cv_header_sys_socket_h=${ac_cv_header_sys_socket_h=no}
+], [
+    ac_cv_header_sys_socket_h=${ac_cv_header_sys_socket_h=yes}
+])
+
+
+AC_TYPE_SIZE_T
+RUBY_CHECK_SIGNEDNESS(size_t, [AC_MSG_ERROR(size_t is signed)], [],
+		      [@%:@include <sys/types.h>])
+RUBY_CHECK_SIZEOF(size_t, [int long void*], [], [@%:@include <sys/types.h>])
+RUBY_CHECK_SIZEOF(ptrdiff_t, size_t, [], [@%:@include <stddef.h>])
+RUBY_CHECK_SIZEOF(dev_t)
+RUBY_CHECK_PRINTF_PREFIX(size_t, z)
+RUBY_CHECK_PRINTF_PREFIX(ptrdiff_t, t)
+AC_CHECK_MEMBERS([struct stat.st_blksize])
+AC_CHECK_MEMBERS([struct stat.st_blocks])
+AC_CHECK_MEMBERS([struct stat.st_rdev])
+RUBY_CHECK_SIZEOF([struct stat.st_size], [off_t int long "long long"], [], [@%:@include <sys/stat.h>])
+AS_IF([test "$ac_cv_member_struct_stat_st_blocks" = yes], [
+    RUBY_CHECK_SIZEOF([struct stat.st_blocks], [off_t int long "long long"], [], [@%:@include <sys/stat.h>])
+])
+RUBY_CHECK_SIZEOF([struct stat.st_ino], [long "long long"], [], [@%:@include <sys/stat.h>])
+RUBY_CHECK_SIZEOF([struct stat.st_dev], [dev_t int long "long long"], [], [@%:@include <sys/stat.h>])
+AS_IF([test "$ac_cv_member_struct_stat_st_rdev" = yes], [
+    RUBY_CHECK_SIZEOF([struct stat.st_rdev], [dev_t int long "long long"], [], [@%:@include <sys/stat.h>])
+])
+AC_CHECK_MEMBERS([struct stat.st_atim])
+AC_CHECK_MEMBERS([struct stat.st_atimespec])
+AC_CHECK_MEMBERS([struct stat.st_atimensec])
+AC_CHECK_MEMBERS([struct stat.st_mtim])
+AC_CHECK_MEMBERS([struct stat.st_mtimespec])
+AC_CHECK_MEMBERS([struct stat.st_mtimensec])
+AC_CHECK_MEMBERS([struct stat.st_ctim])
+AC_CHECK_MEMBERS([struct stat.st_ctimespec])
+AC_CHECK_MEMBERS([struct stat.st_ctimensec])
+AC_CHECK_MEMBERS([struct stat.st_birthtimespec])
+AS_IF([test "x$ac_cv_member_struct_stat_st_birthtimespec" != xyes],
+    [AC_CHECK_MEMBERS([struct statx.stx_btime])])
+
+AC_CHECK_TYPES([struct timeval], [], [], [@%:@ifdef HAVE_TIME_H
+@%:@include <time.h>
+@%:@endif
+@%:@ifdef HAVE_SYS_TIME_H
+@%:@include <sys/time.h>
+@%:@endif])
+
+AS_IF([test "${ac_cv_type_struct_timeval}" = yes], [
+    RUBY_CHECK_SIZEOF([struct timeval.tv_sec], [time_t long "long long"], [],
+		      [@%:@ifdef HAVE_TIME_H
+@%:@include <time.h>
+@%:@endif
+@%:@ifdef HAVE_SYS_TIME_H
+@%:@include <sys/time.h>
+@%:@endif])
+    AS_CASE(${ac_cv_sizeof_struct_timeval_tv_sec},
+	    [SIZEOF_INT], [t=int],
+	    [SIZEOF_LONG], [t=long],
+	    [SIZEOF_LONG_LONG], [t=LONG_LONG],
+	    [t=])
+    AS_IF([test "${t}" != ""], [
+	AC_DEFINE_UNQUOTED(TYPEOF_TIMEVAL_TV_SEC, [$t])
+    ])
+])
+
+AC_CHECK_TYPES([struct timespec], [], [], [@%:@ifdef HAVE_TIME_H
+@%:@include <time.h>
+@%:@endif
+@%:@ifdef HAVE_SYS_TIME_H
+@%:@include <sys/time.h>
+@%:@endif])
+
+AC_CHECK_TYPES([struct timezone], [], [], [@%:@ifdef HAVE_TIME_H
+@%:@ include <time.h>
+@%:@endif
+@%:@ifdef HAVE_SYS_TIME_H
+@%:@ include <sys/time.h>
+@%:@endif])
+
+AC_CACHE_VAL([rb_cv_large_fd_select],
+    [AC_CHECK_TYPE(fd_mask, [rb_cv_large_fd_select=yes], [rb_cv_large_fd_select=no], [AC_INCLUDES_DEFAULT([])
+@%:@ifdef HAVE_SYS_SELECT_H
+@%:@ include <sys/select.h>
+@%:@endif])])
+AS_IF([test "$rb_cv_large_fd_select" = yes], [
+    AC_DEFINE(HAVE_RB_FD_INIT, 1)
+])
+
+RUBY_DEFINT(int8_t, 1)
+RUBY_DEFINT(uint8_t, 1, unsigned)
+RUBY_DEFINT(int16_t, 2)
+RUBY_DEFINT(uint16_t, 2, unsigned)
+RUBY_DEFINT(int32_t, 4)
+RUBY_DEFINT(uint32_t, 4, unsigned)
+RUBY_DEFINT(int64_t, 8)
+RUBY_DEFINT(uint64_t, 8, unsigned)
+RUBY_DEFINT(int128_t, 16)
+RUBY_DEFINT(uint128_t, 16, unsigned)
+RUBY_DEFINT(intptr_t, void*)
+RUBY_DEFINT(uintptr_t, void*, unsigned)
+AS_IF([test "x$rb_cv_type_intptr_t" != xno], [
+    RUBY_CHECK_PRINTF_PREFIX(intptr_t, '' ll I64 l, PTR)
+])
+RUBY_DEFINT(ssize_t, size_t, [], [@%:@include <sys/types.h>])	dnl may differ from int, so not use AC_TYPE_SSIZE_T.
+AS_IF([test "x$rb_cv_type_int64_t" != xno], [
+    RUBY_CHECK_PRINTF_PREFIX(int64_t, ll I64 l, 64)
+])
+
+AC_CACHE_CHECK(for stack end address, rb_cv_stack_end_address,
+[rb_cv_stack_end_address=no
+  AC_LINK_IFELSE([AC_LANG_PROGRAM(
+      [[extern void *__libc_stack_end;]],
+      [[if (!__libc_stack_end) return 1;]])],
+    [rb_cv_stack_end_address="__libc_stack_end"])
+])
+AS_IF([test $rb_cv_stack_end_address != no], [
+  AC_DEFINE_UNQUOTED(STACK_END_ADDRESS, $rb_cv_stack_end_address)
+])
+
+dnl Checks for library functions.
+AC_TYPE_GETGROUPS
+AS_CASE(["${target_cpu}-${target_os}:${target_archs}"],
+[powerpc*-darwin*], [
+  AC_LIBSOURCES(alloca.c)
+  AC_SUBST([ALLOCA], [\${LIBOBJDIR}alloca.${ac_objext}])
+  AC_DEFINE(C_ALLOCA)
+  AC_DEFINE_UNQUOTED(alloca, alloca)
+  ],
+[universal-darwin*:*ppc*], [
+  AC_LIBSOURCES(alloca.c)
+  AC_SUBST([ALLOCA], [\${LIBOBJDIR}alloca.${ac_objext}])
+  RUBY_DEFINE_IF([defined __POWERPC__], C_ALLOCA, 1) # Darwin defines __POWERPC__ for ppc and ppc64 both
+  RUBY_DEFINE_IF([defined __POWERPC__], alloca, alloca)
+  ],
+[
+  AC_FUNC_ALLOCA
+  ])
+AS_IF([test "x$ALLOCA" = "x"], [
+    AC_CACHE_CHECK([for dynamic size alloca], rb_cv_dynamic_alloca, [
+    for chk in ok __chkstk; do
+	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+	    @%:@ifdef HAVE_ALLOCA_H
+	    @%:@include <alloca.h>
+	    @%:@endif
+	    void $chk() {}
+	    int dynamic_alloca_test;
+	    int dynamic_alloca_result;]],
+	    [[dynamic_alloca_result = alloca(dynamic_alloca_test) != 0;]])],
+	    [rb_cv_dynamic_alloca=$chk; break])
+    done])
+    AS_IF([test "x$rb_cv_dynamic_alloca" = "x__chkstk"], [
+	AC_DEFINE_UNQUOTED(RUBY_ALLOCA_CHKSTK, _$rb_cv_dynamic_alloca)
+	AS_CASE("$target_cpu",
+	[x64|x86_64], [
+	    AC_SUBST([ALLOCA], [\${LIBOBJDIR}x86_64-chkstk.${ac_objext}])
+	],)
+    ])
+])
+AC_FUNC_MEMCMP
+
+AS_CASE(["$target_os"],[freebsd*],[
+	 AC_DEFINE(BROKEN_CLOSE)
+	 AC_REPLACE_FUNCS(close)
+	 ])
+
+# dup and dup2 are always available except for WASI
+AS_CASE(["$target_os"],
+    [wasi*], [],
+    [
+        RUBY_REQUIRE_FUNCS(dup dup2)
+    ]
+)
+
+AC_REPLACE_FUNCS(acosh)
+AC_REPLACE_FUNCS(cbrt)
+AC_REPLACE_FUNCS(crypt)
+AC_REPLACE_FUNCS(erf)
+AC_REPLACE_FUNCS(explicit_bzero)
+AC_REPLACE_FUNCS(ffs)
+AC_REPLACE_FUNCS(flock)
+AC_REPLACE_FUNCS(hypot)
+AC_REPLACE_FUNCS(lgamma_r)
+AC_REPLACE_FUNCS(memmove)
+AC_REPLACE_FUNCS(nan)
+AC_REPLACE_FUNCS(nextafter)
+AC_REPLACE_FUNCS(setproctitle)
+AC_REPLACE_FUNCS(strchr)
+AC_REPLACE_FUNCS(strerror)
+AC_REPLACE_FUNCS(strlcat)
+AC_REPLACE_FUNCS(strlcpy)
+AC_REPLACE_FUNCS(strstr)
+AC_REPLACE_FUNCS(tgamma)
+
+AC_DEFINE(HAVE_ISFINITE)        # C99; backward compatibility
+
+# for missing/setproctitle.c
+AS_CASE(["$target_os"],
+[aix* | k*bsd*-gnu | kopensolaris*-gnu | linux* | darwin*], [AC_DEFINE(SPT_TYPE,SPT_REUSEARGV)],
+[])
+AC_CHECK_HEADERS(sys/pstat.h)
+
+
+AC_DEFINE(HAVE_SIGNBIT)         # C99; backward compatibility
+
+AC_FUNC_FORK
+
+AC_CHECK_FUNCS(__syscall)
+AC_CHECK_FUNCS(_longjmp)		# used for AC_ARG_WITH(setjmp-type)
+# we don't use _setjmp if _longjmp doesn't exist.
+test x$ac_cv_func__longjmp = xno && ac_cv_func__setjmp=no
+AC_CHECK_FUNCS(arc4random_buf)
+AC_CHECK_FUNCS(atan2l atan2f)
+AC_CHECK_FUNCS(chmod)
+AC_CHECK_FUNCS(chown)
+AC_CHECK_FUNCS(chroot)
+AC_CHECK_FUNCS(chsize)
+AC_CHECK_FUNCS(clock_gettime)
+AC_CHECK_FUNCS(copy_file_range)
+AC_CHECK_FUNCS(cosh)
+AC_CHECK_FUNCS(crypt_r)
+AC_CHECK_FUNCS(daemon)
+AC_CHECK_FUNCS(dirfd)
+AC_CHECK_FUNCS(dl_iterate_phdr)
+AC_CHECK_FUNCS(dlopen)
+AC_CHECK_FUNCS(dladdr)
+AC_CHECK_FUNCS(dup3)
+AC_CHECK_FUNCS(eaccess)
+AC_CHECK_FUNCS(endgrent)
+AC_CHECK_FUNCS(eventfd)
+AC_CHECK_FUNCS(execl)
+AC_CHECK_FUNCS(execle)
+AC_CHECK_FUNCS(execv)
+AC_CHECK_FUNCS(execve)
+AC_CHECK_FUNCS(explicit_memset)
+AC_CHECK_FUNCS(fcopyfile)
+AC_CHECK_FUNCS(fchdir)
+AC_CHECK_FUNCS(fchmod)
+AC_CHECK_FUNCS(fchown)
+AC_CHECK_FUNCS(fcntl)
+AC_CHECK_FUNCS(fdatasync)
+AC_CHECK_FUNCS(fdopendir)
+AC_CHECK_FUNCS(fgetattrlist)
+AC_CHECK_FUNCS(fmod)
+AC_CHECK_FUNCS(fstatat)
+AC_CHECK_FUNCS(fsync)
+AC_CHECK_FUNCS(ftruncate)
+AC_CHECK_FUNCS(ftruncate64)		# used for Win32 platform
+AC_CHECK_FUNCS(getattrlist)
+AC_CHECK_FUNCS(getcwd)
+AC_CHECK_FUNCS(getegid)
+AC_CHECK_FUNCS(getentropy)
+AC_CHECK_FUNCS(geteuid)
+AC_CHECK_FUNCS(getgid)
+AC_CHECK_FUNCS(getgidx)
+AC_CHECK_FUNCS(getgrnam)
+AC_CHECK_FUNCS(getgrnam_r)
+AC_CHECK_FUNCS(getgroups)
+AC_CHECK_FUNCS(getlogin)
+AC_CHECK_FUNCS(getlogin_r)
+AC_CHECK_FUNCS(getpgid)
+AC_CHECK_FUNCS(getpgrp)
+AC_CHECK_FUNCS(getppid)
+AC_CHECK_FUNCS(getpriority)
+AC_CHECK_FUNCS(getpwnam)
+AC_CHECK_FUNCS(getpwnam_r)
+AC_CHECK_FUNCS(getpwuid)
+AC_CHECK_FUNCS(getpwuid_r)
+AC_CHECK_FUNCS(getrandom)
+AC_CHECK_FUNCS(getresgid)
+AC_CHECK_FUNCS(getresuid)
+AC_CHECK_FUNCS(getrlimit)
+AC_CHECK_FUNCS(getsid)
+AC_CHECK_FUNCS(gettimeofday)		# for making ac_cv_func_gettimeofday
+AC_CHECK_FUNCS(getuid)
+AC_CHECK_FUNCS(getuidx)
+AC_CHECK_FUNCS(gmtime_r)
+AC_CHECK_FUNCS(grantpt)
+AC_CHECK_FUNCS(initgroups)
+AC_CHECK_FUNCS(ioctl)
+AC_CHECK_FUNCS(isfinite)
+AC_CHECK_FUNCS(issetugid)
+AC_CHECK_FUNCS(kill)
+AC_CHECK_FUNCS(killpg)
+AC_CHECK_FUNCS(lchmod)
+AC_CHECK_FUNCS(lchown)
+AC_CHECK_FUNCS(link)
+AC_CHECK_FUNCS(llabs)
+AC_CHECK_FUNCS(lockf)
+AC_CHECK_FUNCS(log2)
+AC_CHECK_FUNCS(lstat)
+AC_CHECK_FUNCS(lutimes)
+AC_CHECK_FUNCS(malloc_usable_size)
+AC_CHECK_FUNCS(malloc_size)
+AC_CHECK_FUNCS(malloc_trim)
+AC_CHECK_FUNCS(mblen)
+AC_CHECK_FUNCS(memalign)
+AC_CHECK_FUNCS(memset_s)
+AC_CHECK_FUNCS(writev)
+AC_CHECK_FUNCS(memrchr)
+AC_CHECK_FUNCS(memmem)
+AC_CHECK_FUNCS(mkfifo)
+AC_CHECK_FUNCS(mknod)
+AC_CHECK_FUNCS(mktime)
+AC_CHECK_FUNCS(mmap)
+AC_CHECK_FUNCS(mremap)
+AC_CHECK_FUNCS(openat)
+AC_CHECK_FUNCS(pclose)
+AC_CHECK_FUNCS(pipe)
+AC_CHECK_FUNCS(pipe2)
+AC_CHECK_FUNCS(poll)
+AC_CHECK_FUNCS(popen)
+AC_CHECK_FUNCS(posix_fadvise)
+AC_CHECK_FUNCS(posix_madvise)
+AC_CHECK_FUNCS(posix_memalign)
+AC_CHECK_FUNCS(ppoll)
+AC_CHECK_FUNCS(pread)
+AC_CHECK_FUNCS(pwrite)
+AC_CHECK_FUNCS(qsort_r)
+AC_CHECK_FUNCS(qsort_s)
+AC_CHECK_FUNCS(readlink)
+AC_CHECK_FUNCS(realpath)
+AC_CHECK_FUNCS(round)
+AC_CHECK_FUNCS(sched_getaffinity)
+AC_CHECK_FUNCS(seekdir)
+AC_CHECK_FUNCS(select_large_fdset)
+AC_CHECK_FUNCS(sendfile)
+AC_CHECK_FUNCS(setegid)
+AC_CHECK_FUNCS(setenv)
+AC_CHECK_FUNCS(seteuid)
+AC_CHECK_FUNCS(setgid)
+AC_CHECK_FUNCS(setgroups)
+AC_CHECK_FUNCS(setpgid)
+AC_CHECK_FUNCS(setpgrp)
+AC_CHECK_FUNCS(setregid)
+AC_CHECK_FUNCS(setresgid)
+AC_CHECK_FUNCS(setresuid)
+AC_CHECK_FUNCS(setreuid)
+AC_CHECK_FUNCS(setrgid)
+AC_CHECK_FUNCS(setrlimit)
+AC_CHECK_FUNCS(setruid)
+AC_CHECK_FUNCS(setsid)
+AC_CHECK_FUNCS(setuid)
+AC_CHECK_FUNCS(shutdown)
+AC_CHECK_FUNCS(sigaction)
+AC_CHECK_FUNCS(sigaltstack)
+AC_CHECK_FUNCS(sigprocmask)
+AC_CHECK_FUNCS(sinh)
+AC_CHECK_FUNCS(snprintf)
+AC_CHECK_FUNCS(spawnv)
+AC_CHECK_FUNCS(symlink)
+AC_CHECK_FUNCS(syscall)
+AC_CHECK_FUNCS(sysconf)
+AC_CHECK_FUNCS(system)
+AC_CHECK_FUNCS(tanh)
+AC_CHECK_FUNCS(telldir)
+AC_CHECK_FUNCS(timegm)
+AC_CHECK_FUNCS(times)
+AC_CHECK_FUNCS(truncate)
+AC_CHECK_FUNCS(truncate64)		# used for Win32
+AC_CHECK_FUNCS(tzset)
+AC_CHECK_FUNCS(umask)
+AC_CHECK_FUNCS(unsetenv)
+AC_CHECK_FUNCS(utimensat)
+AC_CHECK_FUNCS(utimes)
+AC_CHECK_FUNCS(wait4)
+AC_CHECK_FUNCS(waitpid)
+AC_CHECK_FUNCS(__cospi)
+AC_CHECK_FUNCS(__sinpi)
+
+AS_IF([test "x$ac_cv_member_struct_statx_stx_btime" = xyes],
+    [AC_CHECK_FUNCS(statx)])
+
+AS_IF([test "$ac_cv_func_getcwd" = yes], [
+    AC_CACHE_CHECK(if getcwd allocates buffer if NULL is given, [rb_cv_getcwd_malloc],
+	[AC_RUN_IFELSE([AC_LANG_SOURCE([[
+@%:@include <stddef.h>
+@%:@include <stdio.h>
+@%:@ifdef HAVE_UNISTD_H
+@%:@include <unistd.h>
+@%:@endif
+@%:@ifndef EXIT_SUCCESS
+@%:@define EXIT_SUCCESS 0
+@%:@endif
+@%:@ifndef EXIT_FAILURE
+@%:@define EXIT_FAILURE 1
+@%:@endif
+
+int
+main(int argc, char **argv)
+{
+    if (!getcwd(NULL, 0)) return EXIT_FAILURE;
+    return EXIT_SUCCESS;
+}
+]])],
+	    rb_cv_getcwd_malloc=yes,
+	    rb_cv_getcwd_malloc=no,
+	    AS_CASE($target_os,
+		[linux*|darwin*|*bsd|cygwin*|msys*|mingw*|mswin*],
+		[rb_cv_getcwd_malloc=yes],
+		[rb_cv_getcwd_malloc=no]))])
+    AS_IF([test "$rb_cv_getcwd_malloc" = no], [AC_DEFINE(NO_GETCWD_MALLOC, 1)])
+])
+
+AS_IF([test "$ac_cv_func_crypt_r" = yes],
+    [AC_CHECK_HEADERS(crypt.h)])
+AS_IF([test "$ac_cv_func_crypt_r:$ac_cv_header_crypt_h" = yes:yes],
+    [AC_CHECK_MEMBERS([struct crypt_data.initialized], [], [],
+		      [AC_INCLUDES_DEFAULT([@%:@include <crypt.h>])])])
+
+RUBY_CHECK_BUILTIN_FUNC(__builtin_alloca_with_align, [__builtin_alloca_with_align(1, 4096)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_assume_aligned, [__builtin_assume_aligned((void*)32, 32)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_bswap16, [__builtin_bswap16(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_bswap32, [__builtin_bswap32(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_bswap64, [__builtin_bswap64(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_popcount, [__builtin_popcount(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_popcountll, [__builtin_popcountll(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_clz, [__builtin_clz(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_clzl, [__builtin_clzl(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_clzll, [__builtin_clzll(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_ctz, [__builtin_ctz(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_ctzll, [__builtin_ctzll(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_add_overflow, [int x;__builtin_add_overflow(0,0,&x)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_sub_overflow, [int x;__builtin_sub_overflow(0,0,&x)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_mul_overflow, [int x;__builtin_mul_overflow(0,0,&x)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_mul_overflow_p, [__builtin_mul_overflow_p(0,0,(int)0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_constant_p, [__builtin_constant_p(0)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_choose_expr, [
+    [int x[__extension__(__builtin_choose_expr(1, 1, -1))]];
+    [int y[__extension__(__builtin_choose_expr(0, -1, 1))]];
+    ])
+AS_IF([test x$rb_cv_builtin___builtin_choose_expr = xyes], [
+    RUBY_CHECK_BUILTIN_FUNC(__builtin_choose_expr_constant_p, [
+    [int x[__extension__(__builtin_choose_expr(__builtin_constant_p(1), 1, -1))]];
+    [int y[__extension__(__builtin_choose_expr(__builtin_constant_p(foo), -1, 1))]];
+    ])
+])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_types_compatible_p, [__builtin_types_compatible_p(int, int)])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_trap, [__builtin_trap()])
+RUBY_CHECK_BUILTIN_FUNC(__builtin_expect, [__builtin_expect(0, 0)])
+
+AS_IF([test "$rb_cv_builtin___builtin_mul_overflow" != no], [
+  AC_CACHE_CHECK(for __builtin_mul_overflow with long long arguments, rb_cv_use___builtin_mul_overflow_long_long, [
+    AC_LINK_IFELSE([AC_LANG_SOURCE([[
+#pragma clang optimize off
+
+int
+main(void)
+{
+    long long x = 0, y;
+    __builtin_mul_overflow(x, x, &y);
+
+    return 0;
+}
+]])],
+	rb_cv_use___builtin_mul_overflow_long_long=yes,
+	rb_cv_use___builtin_mul_overflow_long_long=no)])
+])
+AS_IF([test "$rb_cv_use___builtin_mul_overflow_long_long" = yes], [
+  AC_DEFINE(USE___BUILTIN_MUL_OVERFLOW_LONG_LONG, 1)
+])
+
+AS_IF([test "$ac_cv_func_qsort_r" != no], [
+  AC_CACHE_CHECK(whether qsort_r is GNU version, rb_cv_gnu_qsort_r,
+    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+@%:@include <stdlib.h>
+void (qsort_r)(void *base, size_t nmemb, size_t size,
+	    int (*compar)(const void *, const void *, void *),
+	    void *arg);
+]], [[ ]])],
+      [rb_cv_gnu_qsort_r=yes],
+      [rb_cv_gnu_qsort_r=no])
+  ])
+  AC_CACHE_CHECK(whether qsort_r is BSD version, rb_cv_bsd_qsort_r,
+    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+@%:@include <stdlib.h>
+void (qsort_r)(void *base, size_t nmemb, size_t size,
+	     void *arg, int (*compar)(void *, const void *, const void *));
+]], [[ ]])],
+      [rb_cv_bsd_qsort_r=yes],
+      [rb_cv_bsd_qsort_r=no])
+  ])
+  AS_CASE("$rb_cv_gnu_qsort_r:$rb_cv_bsd_qsort_r",
+  [yes:no], [
+    AC_DEFINE(HAVE_GNU_QSORT_R, 1)
+  ],
+  [no:yes], [
+    AC_DEFINE(HAVE_BSD_QSORT_R, 1)
+  ])
+])
+
+AC_CACHE_CHECK(whether atan2 handles Inf as C99, rb_cv_atan2_inf_c99, [
+    AS_IF([test $ac_cv_func_atan2f:$ac_cv_func_atan2l = yes:yes], [
+	AC_RUN_IFELSE([AC_LANG_SOURCE([[
+@%:@include <math.h>
+@%:@ifdef HAVE_UNISTD_H
+@%:@include <unistd.h>
+@%:@endif
+@%:@ifndef EXIT_SUCCESS
+@%:@define EXIT_SUCCESS 0
+@%:@endif
+@%:@ifndef EXIT_FAILURE
+@%:@define EXIT_FAILURE 1
+@%:@endif
+
+int
+main(int argc, char **argv)
+{
+    if (fabs(atan2(INFINITY, INFINITY) - M_PI_4) <= 0.01) return EXIT_SUCCESS;
+    return EXIT_FAILURE;
+}
+]])],
+	[rb_cv_atan2_inf_c99=yes],
+	[rb_cv_atan2_inf_c99=no],
+	[AS_CASE($target_os, [mingw*|mswin*], [rb_cv_atan2_inf_c99=no], [rb_cv_atan2_inf_c99=yes])]
+	)
+    ], [rb_cv_atan2_inf_c99=no])
+])
+AS_IF([test "x$rb_cv_atan2_inf_c99" = xyes], [AC_DEFINE(ATAN2_INF_C99)])
+
+# Some platform need -lrt for clock_gettime, but the other don't.
+AS_IF([test x"$ac_cv_func_clock_gettime" != xyes], [
+    # glibc 2.17 moves clock_* functions from librt to the main C library.
+    # https://sourceware.org/legacy-ml/libc-announce/2012/msg00001.html
+    AC_CHECK_LIB(rt, clock_gettime)
+    AS_IF([test x"$ac_cv_lib_rt_clock_gettime" = xyes], [
+	AC_DEFINE(HAVE_CLOCK_GETTIME, 1)
+    ])
+])
+AC_CHECK_FUNCS(clock_getres) # clock_getres should be tested after clock_gettime test including librt test.
+AC_CHECK_LIB([rt], [timer_create])
+AC_CHECK_LIB([rt], [timer_settime])
+AS_IF([test x"$ac_cv_lib_rt_timer_create" = xyes], [
+    AC_DEFINE(HAVE_TIMER_CREATE, 1)
+])
+AS_IF([test x"$ac_cv_lib_rt_timer_settime" = xyes], [
+    AC_DEFINE(HAVE_TIMER_SETTIME, 1)
+])
+
+AC_CACHE_CHECK(for unsetenv returns a value, rb_cv_unsetenv_return_value,
+  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+#include <stdlib.h>
+]], [[int v = unsetenv("foo");]])],
+	rb_cv_unsetenv_return_value=yes,
+	rb_cv_unsetenv_return_value=no)])
+AS_IF([test "$rb_cv_unsetenv_return_value" = no], [
+  AC_DEFINE(VOID_UNSETENV)
+])
+
+# End of setjmp check.
+
+AC_ARG_ENABLE(setreuid,
+       AS_HELP_STRING([--enable-setreuid], [use setreuid()/setregid() according to need even if obsolete]),
+       [use_setreuid=$enableval])
+AS_IF([test "$use_setreuid" = yes], [
+    AC_DEFINE(USE_SETREUID)
+    AC_DEFINE(USE_SETREGID)
+])
+AC_STRUCT_TIMEZONE
+AC_CACHE_CHECK(for struct tm.tm_gmtoff, rb_cv_member_struct_tm_tm_gmtoff,
+  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+@%:@define _BSD_SOURCE
+@%:@define _DEFAULT_SOURCE
+@%:@include <time.h>
+    ]],
+    [[struct tm t; t.tm_gmtoff = 3600;]])],
+  [rb_cv_member_struct_tm_tm_gmtoff=yes],
+  [rb_cv_member_struct_tm_tm_gmtoff=no])])
+AS_IF([test "$rb_cv_member_struct_tm_tm_gmtoff" = yes], [
+  AC_DEFINE(HAVE_STRUCT_TM_TM_GMTOFF)
+])
+AC_CACHE_CHECK(for external int daylight, rb_cv_have_daylight,
+  [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <time.h>
+  int i;]],
+	[[i = daylight;]])],
+	rb_cv_have_daylight=yes,
+	rb_cv_have_daylight=no)])
+AS_IF([test "$rb_cv_have_daylight" = yes], [
+  AC_DEFINE(HAVE_DAYLIGHT)
+])
+
+AC_CACHE_CHECK(for negative time_t for gmtime(3), rb_cv_negative_time_t,
+  [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdlib.h>
+#include <time.h>
+
+void
+check(tm, y, m, d, h, s)
+    struct tm *tm;
+    int y, m, d, h, s;
+{
+    if (!tm ||
+	tm->tm_year != y ||
+	tm->tm_mon  != m-1 ||
+	tm->tm_mday != d ||
+	tm->tm_hour != h ||
+	tm->tm_sec  != s) {
+	exit(1);
+    }
+}
+
+int
+main()
+{
+   time_t t = -1;
+   struct tm *tm;
+
+   check(gmtime(&t), 69, 12, 31, 23, 59);
+   t = ~(time_t)0 << 31;
+   check(gmtime(&t), 1, 12, 13, 20, 52);
+   return 0;
+}
+]])],
+	rb_cv_negative_time_t=yes,
+	rb_cv_negative_time_t=no,
+	rb_cv_negative_time_t=yes)])
+AS_IF([test "$rb_cv_negative_time_t" = yes], [
+  AC_DEFINE(NEGATIVE_TIME_T)
+])
+
+# [ruby-dev:40910] overflow of time on FreeBSD
+# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=145341
+AC_CACHE_CHECK(for localtime(3) overflow correctly, rb_cv_localtime_overflow,
+  [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdlib.h>
+#include <time.h>
+
+void
+check(time_t t1)
+{
+    struct tm *tm;
+    time_t t2;
+    tm = localtime(&t1);
+    if (!tm)
+	return; /* overflow detected.  ok. */
+    t2 = mktime(tm);
+    if (t1 == t2)
+        return; /* round-trip.  ok. */
+    exit(1);
+}
+
+int
+main()
+{
+    time_t t;
+    if (~(time_t)0 <= 0) {
+        t = (((time_t)1) << (sizeof(time_t) * 8 - 2));
+        t |= t - 1;
+    }
+    else {
+        t = ~(time_t)0;
+    }
+    check(t);
+    return 0;
+}
+]])],
+	rb_cv_localtime_overflow=yes,
+	rb_cv_localtime_overflow=no,
+	rb_cv_localtime_overflow=no)])
+AS_IF([test "$rb_cv_localtime_overflow" = no], [
+  AC_DEFINE(LOCALTIME_OVERFLOW_PROBLEM)
+])
+
+AS_IF([test "$ac_cv_func_sigprocmask" = yes && test "$ac_cv_func_sigaction" = yes], [
+   AC_DEFINE(POSIX_SIGNAL)
+], [
+  AC_CHECK_FUNCS(sigsetmask)
+  AC_CACHE_CHECK(for BSD signal semantics, rb_cv_bsd_signal,
+    [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdio.h>
+#include <signal.h>
+
+void
+sig_handler(dummy)
+     int dummy;
+{
+}
+
+int
+main()
+{
+  signal(SIGINT, sig_handler);
+  kill(getpid(), SIGINT);
+  kill(getpid(), SIGINT);
+  return 0;
+}
+]])],
+	rb_cv_bsd_signal=yes,
+	rb_cv_bsd_signal=no,
+	rb_cv_bsd_signal=$ac_cv_func_sigsetmask)])
+  AS_IF([test "$rb_cv_bsd_signal" = yes], [
+    AC_DEFINE(BSD_SIGNAL)
+  ])
+])
+
+AC_CHECK_TYPES([sig_t],[],[],[@%:@include <signal.h>])
+
+AS_IF([test "$ac_cv_func_getpgid" = no], [
+  # AC_FUNC_GETPGRP fails when cross-compiling with old autoconf.
+  # autoconf is changed between 2.52d and 2.52f?
+  # https://lists.gnu.org/archive/html/bug-gnu-utils/2001-09/msg00181.html
+  # "autoconf cleanup for AC_FUNC_GETPGRP and GETPGRP_VOID"
+AC_FUNC_GETPGRP
+])
+AS_IF([test "$ac_cv_func_setpgid:$ac_cv_func_setpgrp" = no:yes], [
+  # AC_FUNC_SETPGRP fails when cross-compiling.  (until autoconf 2.69?)
+  # https://lists.gnu.org/archive/html/bug-autoconf/2013-02/msg00002.html
+  # "AC_FUNC_SETPGRP fails to work properly when cross-compiling"
+AC_FUNC_SETPGRP
+])
+
+AS_IF([test x"$ac_cv_func_dirfd" = xno], [
+  AS_CASE(["$target_os"],[solaris*],
+          [AC_CHECK_MEMBERS([DIR.d_fd, DIR.dd_fd],,,[
+#include <sys/types.h>
+#include <dirent.h>
+])])
+])
+
+AC_CACHE_CHECK(whether right shift preserve sign bit, rb_cv_rshift_sign,
+    [AC_COMPILE_IFELSE([AC_LANG_BOOL_COMPILE_TRY([], [(-1==(-1>>1))])],
+	rb_cv_rshift_sign=yes,
+	rb_cv_rshift_sign=no)])
+AS_IF([test "$rb_cv_rshift_sign" = yes], [
+  AC_DEFINE(RSHIFT(x,y), ((x)>>(int)(y)))
+], [
+  AC_DEFINE(RSHIFT(x,y), (((x)<0) ? ~((~(x))>>(int)(y)) : (x)>>(int)(y)))
+])
+
+AS_IF([test "$ac_cv_func_copy_file_range" = no], [
+  AC_CACHE_CHECK([for copy_file_range],
+    rb_cv_use_copy_file_range,
+    [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/syscall.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#ifndef O_TMPFILE
+  #define O_TMPFILE __O_TMPFILE
+#endif
+
+int
+main()
+{
+#ifdef __NR_copy_file_range
+   int ret, fd_in, fd_out;
+   fd_in = open("/tmp", O_TMPFILE|O_RDWR, S_IRUSR);
+   fd_out = open("/tmp", O_TMPFILE|O_WRONLY, S_IWUSR);
+   ret = syscall(__NR_copy_file_range, fd_in, NULL, fd_out, NULL, 0, 0);
+   close(fd_in);
+   close(fd_out);
+   if (ret == -1) { return 1; }
+   return 0;
+#else
+   return 1;
+#endif
+}
+  ]])],
+    [rb_cv_use_copy_file_range=yes],
+    [rb_cv_use_copy_file_range=no],
+    [rb_cv_use_copy_file_range=no])])
+])
+AS_CASE(["$ac_cv_func_copy_file_range:$rb_cv_use_copy_file_range"], [*yes*], [
+  AC_DEFINE(USE_COPY_FILE_RANGE)
+])
+
+AS_CASE(["$ac_cv_func_gettimeofday:$ac_cv_func_clock_gettime"],
+[*yes*], [],
+[
+    AC_MSG_ERROR(clock_gettime() or gettimeofday() must exist)
+])
+
+AS_IF([test "$ac_cv_func_sysconf" = yes], [
+  RUBY_CHECK_SYSCONF(CLK_TCK)
+])
+
+AS_IF([test "${universal_binary-no}" = yes ], [
+    archflagpat=`eval echo '"'"${ARCH_FLAG}"'"' | sed 's/[[][|.*]]/\\&/g'`
+    save_CFLAGS="$CFLAGS" new_cflags=`echo "$CFLAGS" | sed "s|$archflagpat"'||'`
+    save_LDFLAGS="$LDFLAGS" new_ldflags=`echo "$LDFLAGS" | sed "s|$archflagpat"'||'`
+    stack_dir=
+    for archs in ${universal_archnames}; do
+	archs=`echo $archs | sed 's/=.*//'`
+	CFLAGS="$new_cflags -arch $archs"
+	LDFLAGS="$new_ldflags -arch $archs"
+	RUBY_STACK_GROW_DIRECTION($archs, dir)
+	AS_IF([test x$stack_dir = x], [
+	    stack_dir=$dir
+	], [test x$stack_dir != x$dir], [
+	    stack_dir=no
+	])
+    done
+    CFLAGS="$save_CFLAGS" LDFLAGS="$save_LDFLAGS"
+    AS_IF([test x$stack_dir = xno], [
+	for archs in ${universal_archnames}; do
+	    archs=`echo $archs | sed 's/=.*//'`
+	    eval dir=\$[rb_cv_stack_grow_dir_]AS_TR_SH([$archs])
+	    RUBY_DEFINE_IF([defined __${archs}__], STACK_GROW_DIRECTION, $dir)
+	done
+    ], [
+	AC_DEFINE_UNQUOTED(STACK_GROW_DIRECTION, $stack_dir)
+    ])
+], [
+    RUBY_STACK_GROW_DIRECTION($target_cpu, dir)
+    AC_DEFINE_UNQUOTED(STACK_GROW_DIRECTION, $dir)
+])
+
+AC_ARG_WITH(coroutine,
+    AS_HELP_STRING([--with-coroutine=IMPLEMENTATION], [specify the coroutine implementation to use]),
+    [coroutine_type=$withval], [coroutine_type=])
+AS_CASE([$coroutine_type], [yes|''], [
+    coroutine_type=
+    AS_CASE(["$target_cpu-$target_os"],
+        [universal-darwin*], [
+            coroutine_type=universal
+        ],
+        [x*64-darwin*], [
+            coroutine_type=amd64
+        ],
+        [arm64-darwin*], [
+            coroutine_type=arm64
+        ],
+        # Correct target name is powerpc*-, but Ruby seems to prefer ppc*-.
+        # Notice that Darwin PPC ABI differs from AIX and ELF.
+        # Adding PPC targets for AIX, *BSD and *Linux will require separate implementations.
+        [powerpc-darwin*|ppc-darwin*], [
+            coroutine_type=ppc
+        ],
+        [powerpc64-darwin*|ppc64-darwin*], [
+            coroutine_type=ppc64
+        ],
+        [x*64-linux*], [
+            AS_CASE(["$ac_cv_sizeof_voidp"],
+                [8], [ coroutine_type=amd64 ],
+                [4], [ coroutine_type=x86 ],
+                dnl unknown pointer size, bail out as no Context.h soon.
+            )
+        ],
+        [*86-linux*], [
+            coroutine_type=x86
+        ],
+        [x64-mingw*], [
+            coroutine_type=win64
+        ],
+        [*86-mingw*], [
+            coroutine_type=win32
+        ],
+        [aarch64-mingw*], [
+            coroutine_type=arm64
+        ],
+        [arm*-linux*], [
+            coroutine_type=arm32
+        ],
+        [aarch64-linux*], [
+            coroutine_type=arm64
+        ],
+        [powerpc64le-linux*], [
+            coroutine_type=ppc64le
+        ],
+        [riscv64-linux*], [
+            coroutine_type=riscv64
+        ],
+        [loongarch64-linux*], [
+            coroutine_type=loongarch64
+        ],
+        [x86_64-freebsd*], [
+            coroutine_type=amd64
+        ],
+        [i386-freebsd*], [
+            coroutine_type=x86
+        ],
+        [aarch64-freebsd*], [
+            coroutine_type=arm64
+        ],
+        [x86_64-netbsd*], [
+            coroutine_type=amd64
+        ],
+        [i386-netbsd*], [
+            coroutine_type=x86
+        ],
+        [aarch64-netbsd*], [
+            coroutine_type=arm64
+        ],
+        [x86_64-openbsd*], [
+            coroutine_type=amd64
+        ],
+        [i386-openbsd*], [
+            coroutine_type=x86
+        ],
+        [aarch64-openbsd*], [
+            coroutine_type=arm64
+        ],
+        [*-openbsd*], [
+            coroutine_type=pthread
+        ],
+        [x86_64-dragonfly*], [
+            coroutine_type=amd64
+        ],
+        [*-haiku*], [
+            coroutine_type=pthread
+        ],
+        [*-emscripten*], [
+            coroutine_type=emscripten
+        ],
+        [*-wasi*], [
+            coroutine_type=asyncify
+        ],
+        [
+            AC_CHECK_FUNCS([getcontext swapcontext makecontext],
+                [coroutine_type=ucontext],
+                [coroutine_type=pthread; break]
+            )
+        ]
+    )
+    AC_MSG_CHECKING(native coroutine implementation for ${target_cpu}-${target_os})
+    AC_MSG_RESULT(${coroutine_type})
+])
+COROUTINE_H=coroutine/$coroutine_type/Context.h
+AS_IF([test ! -f "$srcdir/$COROUTINE_H"],
+      [AC_MSG_ERROR('$coroutine_type' is not supported as coroutine)])
+COROUTINE_SRC=coroutine/$coroutine_type/Context.c
+AS_IF([test ! -f "$srcdir/$COROUTINE_SRC"],
+      [COROUTINE_SRC=coroutine/$coroutine_type/Context.'$(ASMEXT)'])
+AC_DEFINE_UNQUOTED(COROUTINE_H, ["$COROUTINE_H"])
+AC_SUBST(X_COROUTINE_H, [$COROUTINE_H])
+AC_SUBST(X_COROUTINE_SRC, [$COROUTINE_SRC])
+
+AS_IF([test "$THREAD_MODEL" = pthread], [
+    AC_CACHE_CHECK([whether pthread_t is scalar type], [rb_cv_scalar_pthread_t], [
+	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+	    @%:@include <pthread.h>
+	    ]], [[
+	    pthread_t thread_id;
+	    thread_id = 0;
+	    if (!thread_id) return 0;
+	    ]])],[rb_cv_scalar_pthread_t=yes],[rb_cv_scalar_pthread_t=no])
+    ])
+    AS_IF([test x"$rb_cv_scalar_pthread_t" = xyes], [
+	: # RUBY_CHECK_SIZEOF(pthread_t, [void* int long], [], [@%:@include <pthread.h>])
+    ], [
+	AC_DEFINE(NON_SCALAR_THREAD_ID)
+    ])
+    AC_CHECK_FUNCS(sched_yield pthread_attr_setinheritsched \
+	pthread_attr_get_np pthread_attr_getstack pthread_attr_getguardsize \
+	pthread_get_stackaddr_np pthread_get_stacksize_np \
+	thr_stksegment pthread_stackseg_np pthread_getthrds_np \
+	pthread_condattr_setclock \
+	pthread_setname_np pthread_set_name_np)
+    AS_CASE(["$target_os"],[emscripten*],[ac_cv_func_pthread_sigmask=no],[AC_CHECK_FUNCS(pthread_sigmask)])
+    AS_CASE(["$target_os"],[aix*],[ac_cv_func_pthread_getattr_np=no],[AC_CHECK_FUNCS(pthread_getattr_np)])
+    set_current_thread_name=
+    AS_IF([test "$ac_cv_func_pthread_setname_np" = yes], [
+	AC_CACHE_CHECK([arguments of pthread_setname_np], [rb_cv_func_pthread_setname_np_arguments],
+	    [rb_cv_func_pthread_setname_np_arguments=
+	    # Linux,AIX,  (pthread_self(), name)
+	    # NetBSD (pthread_self(), \"%s\", name)
+	    # Darwin (name)
+	    for mac in \
+		"(pthread_self(), name)" \
+		"(pthread_self(), \"%s\", name)" \
+		"(name)" \
+		; do
+		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+		    @%:@include <pthread.h>
+		    @%:@ifdef HAVE_PTHREAD_NP_H
+		    @%:@include <pthread_np.h>
+		    @%:@endif
+		    @%:@define SET_THREAD_NAME(name) pthread_setname_np${mac}
+		    ]],
+		    [[if (SET_THREAD_NAME("conftest")) return 1;]])],
+		    [rb_cv_func_pthread_setname_np_arguments="${mac}"
+		    break])
+	    done
+	    ]
+	)
+	AS_IF([test -n "${rb_cv_func_pthread_setname_np_arguments}"], [
+	    set_current_thread_name="pthread_setname_np${rb_cv_func_pthread_setname_np_arguments}"
+	])
+    ], [test "$ac_cv_func_pthread_set_name_np" = yes], [
+	set_current_thread_name="pthread_set_name_np(pthread_self(), name)"
+    ])
+    AS_IF([test -n "$set_current_thread_name"], [
+	AC_DEFINE_UNQUOTED(SET_CURRENT_THREAD_NAME(name), $set_current_thread_name)
+	AS_CASE([$set_current_thread_name],
+	    [*'pthread_self()'*], [
+		set_another_thread_name=`echo "$set_current_thread_name" | sed 's/pthread_self()/thid/'`
+		AC_DEFINE_UNQUOTED(SET_ANOTHER_THREAD_NAME(thid,name), $set_another_thread_name)
+	    ])
+    ])
+
+    AC_CACHE_CHECK([for thread-local storage sepcifier], [rb_cv_tls_specifier],
+        rb_cv_tls_specifier=none
+        RUBY_WERROR_FLAG([
+            for attr in \
+                _Thread_local \
+                __thread \
+                ; do
+                AC_LINK_IFELSE([AC_LANG_PROGRAM([[$attr int conftest;]])],
+                    [rb_cv_tls_specifier=$attr; break])
+            done
+        ])
+    )
+    AS_IF([test x"${rb_cv_tls_specifier}" != xnone],
+        [AC_DEFINE_UNQUOTED(RB_THREAD_LOCAL_SPECIFIER, ${rb_cv_tls_specifier})]
+    )
+])
+
+AS_IF([test x"$ac_cv_header_ucontext_h" = xno], [
+    AC_CACHE_CHECK([if signal.h defines ucontext_t], [rb_cv_ucontext_in_signal_h],
+	[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <signal.h>]],
+					    [[size_t size = sizeof(ucontext_t);]])],
+	[rb_cv_ucontext_in_signal_h=yes], [rb_cv_ucontext_in_signal_h=no])])
+    AS_IF([test x"$rb_cv_ucontext_in_signal_h" = xyes], [
+	    AC_DEFINE_UNQUOTED(UCONTEXT_IN_SIGNAL_H, 1)
+    ])
+])
+AS_IF([test x"$ac_cv_header_ucontext_h" = xyes -o x"$rb_cv_ucontext_in_signal_h" = xyes], [
+    AC_CACHE_CHECK([if mcontext_t is a pointer], [rb_cv_mcontext_t_ptr],
+	[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+	    @%:@include <signal.h>
+	    @%:@ifdef HAVE_UCONTEXT_H
+	    @%:@include <ucontext.h>
+	    @%:@endif
+        mcontext_t test(mcontext_t mc) {return mc+1;}
+	  ]],
+	  [[test(0);]])],
+	[rb_cv_mcontext_t_ptr=yes], [rb_cv_mcontext_t_ptr=no])])
+    AS_IF([test x"$rb_cv_mcontext_t_ptr" = xyes], [
+	AC_DEFINE_UNQUOTED(DEFINE_MCONTEXT_PTR(mc, uc), mcontext_t mc = (uc)->uc_mcontext)
+    ], [
+	AC_DEFINE_UNQUOTED(DEFINE_MCONTEXT_PTR(mc, uc), mcontext_t *mc = &(uc)->uc_mcontext)
+    ])
+    AS_IF([test x"$THREAD_MODEL" = xpthread], [
+	AC_CHECK_FUNCS(getcontext setcontext)
+    ])
+])
+
+AS_IF([test "$ac_cv_func_fork_works" = "yes" -a x"$THREAD_MODEL" = xpthread], [
+    AC_CACHE_CHECK([if fork works with pthread], rb_cv_fork_with_pthread,
+	[AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdlib.h>
+#include <unistd.h>
+#include <pthread.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <signal.h>
+#ifndef EXIT_SUCCESS
+#define EXIT_SUCCESS 0
+#endif
+#ifndef EXIT_FAILURE
+#define EXIT_FAILURE 1
+#endif
+
+void *
+thread_func(void *dmy)
+{
+    return dmy;
+}
+
+int
+use_threads(void)
+{
+    pthread_t tid;
+    if (pthread_create(&tid, 0, thread_func, 0) != 0) {
+	return -1;
+    }
+    if (pthread_join(tid, 0) != 0) {
+	return -1;
+    }
+    return 0;
+}
+
+int
+main(int argc, char *argv[])
+{
+    pid_t pid;
+    if (use_threads()) return EXIT_FAILURE;
+    pid = fork();
+
+    if (pid) {
+	int loc;
+	sleep(1);
+	if (waitpid(pid, &loc, WNOHANG) == 0) {
+	    kill(pid, SIGKILL);
+	    return EXIT_FAILURE;
+	}
+        if (!WIFEXITED(loc) || WEXITSTATUS(loc) != EXIT_SUCCESS)
+           return EXIT_FAILURE;
+    }
+    else {
+	if (use_threads()) return EXIT_FAILURE;
+    }
+
+    return EXIT_SUCCESS;
+}]])],
+	rb_cv_fork_with_pthread=yes,
+	rb_cv_fork_with_pthread=no,
+	rb_cv_fork_with_pthread=yes)])
+    test x$rb_cv_fork_with_pthread = xyes || AC_DEFINE(CANNOT_FORK_WITH_PTHREAD)
+])
+
+AC_CHECK_HEADERS([sys/user.h])
+AS_IF([test "x$ac_cv_func_mmap" = xyes], [
+    AC_CACHE_CHECK([whether PAGE_SIZE is compile-time const], rb_cv_const_page_size,
+	[malloc_headers=`sed -n '/MALLOC_HEADERS_BEGIN/,/MALLOC_HEADERS_END/p' ${srcdir}/gc.c`
+	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[$malloc_headers
+            typedef char conftest_page[PAGE_SIZE];
+        ]], [[]])],
+        [rb_cv_const_page_size=yes],
+        [rb_cv_const_page_size=no])])
+])
+AS_IF([test "x$rb_cv_const_page_size" = xyes],
+    [AC_DEFINE(HAVE_CONST_PAGE_SIZE, 1)],
+    [AC_DEFINE(HAVE_CONST_PAGE_SIZE, 0)]
+)
+
+AS_IF([test "x$ac_cv_func_ioctl" = xyes], [
+    AC_CACHE_CHECK([ioctl request type], rb_cv_ioctl_request_type,
+        [rb_cv_ioctl_request_type=no
+        dnl corresponding NUM2IOCTLREQ needs to be defined
+        for type in "unsigned long:ULONG_MAX" int:INT_MAX; do
+            max=`echo $type | sed 's/.*://'`
+            type=`echo $type | sed 's/:.*//'`
+            RUBY_WERROR_FLAG([
+                AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+                    @%:@include <limits.h>
+                    @%:@include <sys/types.h>
+                    @%:@if defined(HAVE_SYS_IOCTL_H) && !defined(_WIN32)
+                    @%:@include <sys/ioctl.h>
+                    @%:@endif
+                ]], [[
+                    $type req = $max;
+                    if (ioctl(0, req)) {/* do nothing*/};
+                ]])],
+                [rb_cv_ioctl_request_type="$type"])
+            ])
+            test "x$rb_cv_ioctl_request_type" = xno || break
+        done])
+    AS_CASE(["$rb_cv_ioctl_request_type"], [no|int], [],
+    ["unsigned long"], [
+        AC_DEFINE_UNQUOTED(IOCTL_REQ_TYPE, [$rb_cv_ioctl_request_type])
+        AC_DEFINE_UNQUOTED(NUM2IOCTLREQ(num), [NUM2ULONG(num)])
+    ])
+])
+
+}
+
+[begin]_group "runtime section" && {
+dnl wheather use dln_a_out or not
+AC_ARG_WITH(dln-a-out,
+	AS_HELP_STRING([--with-dln-a-out], [dln_a_out is deprecated]),
+	[
+	AS_CASE([$withval],
+	[yes], [
+	    AC_MSG_ERROR(dln_a_out no longer supported)
+	])
+])
+
+AS_IF([test "$rb_cv_binary_elf" = yes], [
+  AC_DEFINE(USE_ELF)
+  AC_CHECK_HEADERS([elf.h elf_abi.h])
+  AS_IF([test $ac_cv_header_elf_h = yes -o $ac_cv_header_elf_abi_h = yes], [
+    AC_LIBOBJ([addr2line])
+    AC_CHECK_LIB([z], [uncompress])
+  ])
+])
+
+AC_CHECK_HEADERS([mach-o/loader.h])
+AS_IF([test "$ac_cv_header_mach_o_loader_h" = yes], [
+  AC_LIBOBJ([addr2line])
+])
+
+AS_CASE(["$target_os"],
+[linux* | gnu* | k*bsd*-gnu | bsdi* | kopensolaris*-gnu], [
+    AS_IF([test "$rb_cv_binary_elf" = no], [
+	AC_MSG_ERROR(Not ELF)
+    ], [
+	LDFLAGS="$LDFLAGS -rdynamic"
+    ])])
+LIBEXT=a
+
+AC_SUBST(DLDFLAGS)dnl
+AC_SUBST(ARCH_FLAG)dnl
+
+AC_SUBST(STATIC)dnl
+AC_SUBST(CCDLFLAGS)dnl
+AC_SUBST(LDSHARED)dnl
+AC_SUBST(LDSHAREDXX)dnl
+AC_SUBST(DLEXT)dnl
+AC_SUBST(LIBEXT)dnl
+AC_SUBST(ASMEXT, S)dnl
+
+STATIC=
+
+: "dlopen" && {
+  rb_cv_dlopen=unknown
+  AC_MSG_CHECKING(whether OS depend dynamic link works)
+  AS_IF([test "$GCC" = yes], [
+    AS_CASE(["$target_os"],
+    [darwin*], [
+      # The -fno-common is needed if we wish to embed the Ruby interpreter
+      # into a plugin module of some project (as opposed to embedding it
+      # within the project's application).  The -I/usr/local/include is
+      # needed because CPP as discovered by configure (cc -E -traditional)
+      # fails to consult /usr/local/include by default.  This causes
+      # mkmf.rb's have_header() to fail if the desired resource happens to be
+      # installed in the /usr/local tree.
+      RUBY_APPEND_OPTION(CCDLFLAGS, -fno-common)],
+    [bsdi*|cygwin*|msys*|mingw*|aix*|interix*], [ ],
+    [
+      RUBY_APPEND_OPTION(CCDLFLAGS, -fPIC)])
+  ], [
+    AS_CASE(["$target_os"],
+	[solaris*|irix*], [CCDLFLAGS="$CCDLFLAGS -KPIC"],
+	[sunos*],         [CCDLFLAGS="$CCDLFLAGS -PIC"],
+	[esix*|uxpds*],   [CCDLFLAGS="$CCDLFLAGS -KPIC"],
+	                  [: ${CCDLFLAGS=""}])
+  ])
+}
+
+EXTSTATIC=
+AC_SUBST(EXTSTATIC)dnl
+AC_ARG_WITH(static-linked-ext,
+	    AS_HELP_STRING([--with-static-linked-ext], [link external modules statically]),
+            [AS_CASE([$withval],[yes],[STATIC=;EXTSTATIC=static],[no],[],[EXTSTATIC="$withval"])])
+AS_CASE([",$EXTSTATIC,"], [,static,|*,enc,*], [
+  ENCOBJS='enc/encinit.$(OBJEXT) enc/libenc.$(LIBEXT) enc/libtrans.$(LIBEXT)'
+  EXTOBJS='ext/extinit.$(OBJEXT)'
+  AC_DEFINE_UNQUOTED(EXTSTATIC, 1)
+  AC_SUBST(ENCSTATIC, static)
+], [
+  ENCOBJS='dmyenc.$(OBJEXT)'
+  EXTOBJS='dmyext.$(OBJEXT)'
+])
+AC_SUBST(ENCOBJS)
+AC_SUBST(EXTOBJS)
+
+: "rpath" && {
+    AS_CASE(["$target_os"],
+	[solaris*], [	AS_IF([test "$GCC" = yes], [
+			    : ${LDSHARED='$(CC) -shared'}
+			    AS_IF([test "$rb_cv_prog_gnu_ld" = yes], [
+				LDFLAGS="$LDFLAGS -Wl,-E"
+			    ])
+			], [
+			    : ${LDSHARED='$(CC) -G'}
+			])
+			AS_IF([test "$ac_cv_sizeof_voidp" = 8], [
+			    : ${LIBPATHENV=LD_LIBRARY_PATH_64}
+			    : ${PRELOADENV=LD_PRELOAD_64}
+			], [
+			    : ${LIBPATHENV=LD_LIBRARY_PATH_32}
+			    : ${PRELOADENV=LD_PRELOAD_32}
+			])
+			rb_cv_dlopen=yes],
+	[sunos*], [	: ${LDSHARED='$(LD) -assert nodefinitions'}
+			rb_cv_dlopen=yes],
+	[irix*], [	: ${LDSHARED='$(LD) -shared'}
+			rb_cv_dlopen=yes],
+	[sysv4*], [	: ${LDSHARED='$(LD) -G'}
+			rb_cv_dlopen=yes],
+	[nto-qnx*], [	: ${LDSHARED='$(CC) -shared'}
+			rb_cv_dlopen=yes],
+	[esix*|uxpds*], [ : ${LDSHARED='$(LD) -G'}
+			rb_cv_dlopen=yes],
+	[osf*], [	: ${LDSHARED='$(LD) -shared -expect_unresolved "*"'}
+			rb_cv_dlopen=yes],
+	[bsdi3*], [	AS_CASE(["$CC"],
+			[*shlicc*], [	: ${LDSHARED='$(CC) -r'}
+					rb_cv_dlopen=yes])],
+	[linux* | gnu* | k*bsd*-gnu | netbsd* | bsdi* | kopensolaris*-gnu | haiku*], [
+			: ${LDSHARED='$(CC) -shared'}
+			AS_IF([test "$rb_cv_binary_elf" = yes], [
+			    LDFLAGS="$LDFLAGS -Wl,-export-dynamic"
+			])
+			rb_cv_dlopen=yes],
+	[interix*], [	: ${LDSHARED='$(CC) -shared'}
+			XLDFLAGS="$XLDFLAGS -Wl,-E"
+			rb_cv_dlopen=yes],
+	[freebsd*|dragonfly*], [
+			: ${LDSHARED='$(CC) -shared'}
+			AS_IF([test "$rb_cv_binary_elf" = yes], [
+			    LDFLAGS="$LDFLAGS -rdynamic"
+			    DLDFLAGS="$DLDFLAGS "'-Wl,-soname,$@'
+			], [
+			  test "$GCC" = yes && test "$rb_cv_prog_gnu_ld" = yes || LDSHARED='$(LD) -Bshareable'
+			])
+			rb_cv_dlopen=yes],
+	[openbsd*|mirbsd*], [	: ${LDSHARED='$(CC) -shared ${CCDLFLAGS}'}
+			AS_IF([test "$rb_cv_binary_elf" = yes], [
+			    LDFLAGS="$LDFLAGS -Wl,-E"
+			])
+			rb_cv_dlopen=yes],
+	[darwin*], [	: ${LDSHARED='$(CC) -dynamic -bundle'}
+			: ${DLDSHARED='$(CC) -dynamiclib'}
+			: ${LDFLAGS=""}
+			: ${LIBPATHENV=DYLD_LIBRARY_PATH}
+			: ${PRELOADENV=DYLD_INSERT_LIBRARIES}
+                        AS_IF([test x"$enable_shared" = xyes], [
+                            # Resolve symbols from libruby.dylib in $(LIBS) when --enable-shared
+                        ], [test "x$EXTSTATIC" = x], [
+                            # When building exts as bundles, a mach-o bundle needs to know its loader
+                            # program to bind symbols from the ruby executable
+                            EXTDLDFLAGS="-bundle_loader '\$(BUILTRUBY)'"
+			])
+			rb_cv_dlopen=yes],
+        [aix*], [	: ${LDSHARED='$(CC)'}
+			AS_IF([test "$GCC" = yes], [
+			    LDSHARED="$LDSHARED ${linker_flag}-G -shared"
+			], [
+			    LDSHARED="$LDSHARED ${linker_flag}-G"
+			])
+			EXTDLDFLAGS='-e$(TARGET_ENTRY)'
+			XLDFLAGS="${linker_flag}"'-bE:$(ARCHFILE)'" ${linker_flag}-brtl"
+			XLDFLAGS="$XLDFLAGS ${linker_flag}-blibpath:${prefix}/lib:${LIBPATH:-/usr/lib:/lib}"
+			: ${ARCHFILE="ruby.imp"}
+                        TRY_LINK='$(CC) -oconftest $(INCFLAGS) -I$(hdrdir) $(CPPFLAGS)'
+                        TRY_LINK="$TRY_LINK"' $(CFLAGS) $(src) $(LIBPATH) $(LDFLAGS) $(LOCAL_LIBS) $(LIBS)'
+			: ${LIBPATHENV=LIBPATH}
+			: ${PRELOADENV=LDR_PRELOAD}
+			rb_cv_dlopen=yes],
+	[nto-qnx*], [	DLDFLAGS="$DLDFLAGS -L/lib -L/usr/lib -L/usr/local/lib"
+			: ${LDSHARED='$(LD) -Bshareable -x'}
+			LDFLAGS="$LDFLAGS -L/lib -L/usr/lib -L/usr/local/lib"
+			rb_cv_dlopen=yes],
+	[cygwin*|msys*|mingw*], [
+			: ${LDSHARED='$(CC) -shared'}
+			XLDFLAGS="$XLDFLAGS -Wl,--stack,0x00200000,--enable-auto-import"
+			DLDFLAGS="${DLDFLAGS} -Wl,--enable-auto-image-base,--enable-auto-import"
+			: ${LIBPATHENV=PATH}
+			: ${PRELOADENV=""}
+			rb_cv_dlopen=yes],
+	[hiuxmpp], [	: ${LDSHARED='$(LD) -r'}],
+	[atheos*], [	: ${LDSHARED='$(CC) -shared'}
+			rb_cv_dlopen=yes],
+	[	: ${LDSHARED='$(LD)'}])
+    AC_MSG_RESULT($rb_cv_dlopen)
+}
+
+AS_IF([test "$rb_cv_dlopen" = yes], [
+    AS_CASE(["$target_os"],
+    [darwin*], [
+        AC_SUBST(ADDITIONAL_DLDFLAGS, "")
+	for flag in \
+	  "-multiply_defined suppress" \
+	  "-undefined dynamic_lookup" \
+	  ; do
+            test "x${linker_flag}" = x || flag="${linker_flag}`echo ${flag} | tr ' ' ,`"
+            RUBY_TRY_LDFLAGS([$flag], [], [flag=])
+            AS_IF([test x"$flag" = x], [continue])
+
+            AC_MSG_CHECKING([whether $flag is accepted for bundle])
+            : > conftest.c
+            AS_IF([${LDSHARED%%'$(CC)'*}$CC${LDSHARED@%:@*'$(CC)'} -o conftest.bundle $flag conftest.c >/dev/null 2>conftest.err &&
+                test ! -s conftest.err], [
+                AC_MSG_RESULT([yes])
+                RUBY_APPEND_OPTIONS(DLDFLAGS, [$flag])
+            ], [
+                AC_MSG_RESULT([no])
+                RUBY_APPEND_OPTIONS(ADDITIONAL_DLDFLAGS, [$flag])
+            ])
+            rm -fr conftest.*
+	done
+    ])
+])
+
+AS_IF([test "${LDSHAREDXX}" = ""], [
+    AS_CASE(["${LDSHARED}"],
+	[*'$(CC)'*], [
+	    LDSHAREDXX=`echo "${LDSHARED}" | sed 's/\$(CC)/$(CXX)/'`
+	    ],
+	[*'${CC}'*], [
+	    LDSHAREDXX=`echo "${LDSHARED}" | sed 's/\${CC}/${CXX}/'`
+	    ],
+	[*$CC*], [
+	    LDSHAREDXX=`echo "${LDSHARED}" | sed "s|$CC|$CXX|"`
+	    ],
+	[ld" "*], [
+	    ])
+])
+
+AC_SUBST(LINK_SO)
+AC_SUBST(LIBPATHFLAG)
+AC_SUBST(RPATHFLAG)
+AC_SUBST(LIBPATHENV, "${LIBPATHENV-LD_LIBRARY_PATH}")
+AC_SUBST(PRELOADENV, "${PRELOADENV-LD_PRELOAD}")
+AC_SUBST(TRY_LINK)
+
+AS_CASE(["$target_os"],
+[freebsd*], [
+    AC_CHECK_LIB([procstat], [procstat_open_sysctl])
+    AS_IF([test "x$ac_cv_lib_procstat_procstat_open_sysctl" = xyes], [
+	AC_CHECK_FUNCS(procstat_getvmmap)
+    ])
+    ])
+AS_CASE(["$target_cpu-$target_os"],
+[*-darwin*], [
+    AC_CHECK_HEADERS([libproc.h])
+    AC_CHECK_HEADERS([execinfo.h])
+    AS_IF([test "x$ac_cv_header_execinfo_h" = xyes], [
+	AC_CHECK_LIB([execinfo], [backtrace])
+	AC_CHECK_HEADERS([libunwind.h])
+
+    AC_CHECK_HEADERS([mach/task.h mach/mach_init.h mach/mach_port.h])
+    AS_IF([ test \
+        "x${ac_cv_header_mach_task_h}" = xyes -a \
+        "x${ac_cv_header_mach_mach_init_h}" = xyes -a \
+        "x${ac_cv_header_mach_mach_port_h}" = xyes \
+    ], [
+        AC_DEFINE([HAVE_MACH_TASK_EXCEPTION_PORTS], [1])
+    ])
+    ])],
+[*-freebsd*|x86_64-netbsd*], [
+    AC_CHECK_HEADERS([execinfo.h])
+    AS_IF([test "x$ac_cv_header_execinfo_h" = xyes], [
+	AC_CHECK_LIB([execinfo], [backtrace])
+	AC_CHECK_LIB([unwind], [unw_backtrace])
+    ])])
+AC_CHECK_FUNCS(backtrace)
+
+AS_IF([test "x$ac_cv_func_backtrace" = xyes], [
+  AC_CACHE_CHECK(for broken backtrace, rb_cv_broken_backtrace,
+    [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include <string.h>
+#include <signal.h>
+#include <execinfo.h>
+
+]`grep '^@%:@ *define  *RUBY_SIGALTSTACK_SIZE' ${srcdir}/signal.c`[
+#define TRACE_SIZE 256
+
+void sigsegv(int signum, siginfo_t *info, void *ctx){
+    void *trace[TRACE_SIZE];
+    int n = backtrace(trace, TRACE_SIZE);
+    if (n > 0) {
+	/*fprintf(stdout, "backtrace:%d\n",n);*/
+    } else {
+	_exit(EXIT_FAILURE);
+    }
+    _exit(EXIT_SUCCESS);
+}
+int
+main(void)
+{
+    volatile int *a = NULL;
+    stack_t ss;
+    struct sigaction sa;
+
+    ss.ss_sp = malloc(RUBY_SIGALTSTACK_SIZE);
+    if (ss.ss_sp == NULL) {
+	fprintf(stderr, "cannot allocate memory for sigaltstack\n");
+	return EXIT_FAILURE;
+    }
+    ss.ss_size = RUBY_SIGALTSTACK_SIZE;
+    ss.ss_flags = 0;
+    if (sigaltstack(&ss, NULL) == -1) {
+	fprintf(stderr, "sigaltstack failed\n");
+	return EXIT_FAILURE;
+    }
+    memset(&sa, 0, sizeof(struct sigaction));
+    sigemptyset(&sa.sa_mask);
+    sa.sa_sigaction = sigsegv;
+    sa.sa_flags |= SA_SIGINFO;
+    sa.sa_flags |= SA_ONSTACK;
+    sigaction(SIGSEGV, &sa, NULL);
+    a[0] = 1;
+    return EXIT_SUCCESS;
+}
+]])],
+	rb_cv_broken_backtrace=no,
+	rb_cv_broken_backtrace=yes,
+	rb_cv_broken_backtrace=no)])
+  AS_IF([test "$rb_cv_broken_backtrace" = yes], [
+    AC_DEFINE(BROKEN_BACKTRACE, 1)
+  ])
+])
+
+AC_ARG_WITH(valgrind,
+        AS_HELP_STRING([--without-valgrind],[disable valgrind memcheck support]),
+        [], with_valgrind=yes)
+AS_IF([test x$with_valgrind != xno],
+        [AC_CHECK_HEADERS(valgrind/memcheck.h)])
+
+: "dlext & soext" && {
+  AS_CASE(["$target_os"],
+    [darwin*], [
+	SOEXT=dylib
+	DLEXT=bundle],
+    [cygwin*|msys*|mingw*|*djgpp*], [
+	LOAD_RELATIVE=1
+	SOEXT=dll
+	DLEXT=so],
+    [
+	DLEXT=so])
+: ${SOEXT="${DLEXT}"}
+AC_SUBST(SOEXT)
+}
+
+AS_IF([test "$rb_cv_dlopen:$load_relative" = yes:yes], [
+    AS_IF([test "$ac_cv_func_dladdr" = yes], [
+	LOAD_RELATIVE=1
+    ])
+])
+AS_IF([test x"$LOAD_RELATIVE" = x1], [
+    load_relative=yes
+], [
+    unset load_relative
+])
+
+len=2 # .rb
+n=`expr "$DLEXT"  : '.*'`; test "$n" -gt "$len" && len=$n
+AC_DEFINE_UNQUOTED(DLEXT_MAXLEN, `expr $len + 1`)
+test ".$DLEXT"  = "." || AC_DEFINE_UNQUOTED(DLEXT,  ".$DLEXT")
+AC_SUBST(DLEXT)
+
+: "strip" && {
+    AC_MSG_CHECKING([for $STRIP flags])
+    AC_LINK_IFELSE([AC_LANG_PROGRAM], [AS_IF(
+        ["${STRIP}" -A -n conftest$ac_exeext 2>/dev/null], [
+            AC_MSG_RESULT([-A -n])
+            STRIP="${STRIP} -A -n"
+        ],
+        ["${STRIP}" -S -x conftest$ac_exeext 2>/dev/null], [
+            AC_MSG_RESULT([-S -x])
+            STRIP="${STRIP} -S -x"
+        ], [
+            AC_MSG_RESULT([none needed])
+        ])
+    ])
+}
+
+AC_ARG_WITH(ext,
+            AS_HELP_STRING([--with-ext=EXTS],
+                           [pass to --with-ext option of extmk.rb]))
+AC_ARG_WITH(out-ext,
+            AS_HELP_STRING([--with-out-ext=EXTS],
+                           [pass to --without-ext option of extmk.rb]))
+AC_ARG_WITH(setup,
+	    AS_HELP_STRING([--with-setup=SETUP], [use extension libraries setup]),
+	    [setup=$withval])
+AS_IF([test -n "$setup"], [
+    AS_IF([! test -f "ext/$setup" -o -f "$srcdir/ext/$setup"], [
+	AC_MSG_ERROR(Setup file $setup not found under ext or $srcdir/ext)
+    ])
+], [test -f "$srcdir/ext/Setup.$target_os"], [
+    setup="Setup.$target_os"
+], [
+    setup=
+    for file in "$srcdir"/ext/Setup.*; do
+	AS_CASE(["$file"], [*~|*.bak|*.orig|*.rej|*.tmp], [continue])
+	setup=`basename "$file"`
+	AS_CASE(["$target_os"], [`expr "$setup" : 'Setup.\(.*\)'`*], [break])
+	platform=`sed '/^option  *platform  */!d;s///;s/|/*|/g;q' "$file"`
+	AS_IF([test "x$platform" != x], [
+	    eval "AS_CASE([\"\$target_os\"], [$platform*], [break])"
+	])
+	setup=
+    done
+    : ${setup:=Setup}
+])
+AC_SUBST(setup)
+
+rubylibprefix='${libdir}/${RUBY_BASE_NAME}'
+AC_ARG_WITH(rubylibprefix,
+	    AS_HELP_STRING([--with-rubylibprefix=DIR], [prefix for ruby libraries [[LIBDIR/RUBY_BASE_NAME]]]),
+	    [AS_IF([test "x$withval" = xno], [
+		AC_MSG_ERROR([No ruby, No libprefix])
+	    ])
+	    rubylibprefix="$withval"])
+AC_SUBST(rubylibprefix)
+
+AS_IF([test x"${exec_prefix}" != xNONE], [
+    RUBY_EXEC_PREFIX="$exec_prefix"
+], [test x"$prefix" != xNONE], [
+    RUBY_EXEC_PREFIX="$prefix"
+], [
+    RUBY_EXEC_PREFIX=$ac_default_prefix
+])
+pat=`echo "${RUBY_EXEC_PREFIX}" | tr -c '\012' .`'\(.*\)'
+for var in bindir includedir libdir rubylibprefix; do
+    eval val='"$'$var'"'
+    AS_CASE(["$val"], ["${RUBY_EXEC_PREFIX}"*], [val='${exec_prefix}'"`expr \"$val\" : \"$pat\"`"])
+    eval $var='"$val"'
+done
+
+BTESTRUBY='$(MINIRUBY)'
+AS_IF([test x"$cross_compiling" = xyes], [
+  test x"$MINIRUBY" = x && MINIRUBY="${RUBY-$BASERUBY} -I`$CHDIR .; pwd` "-r'$(arch)-fake'
+  XRUBY_LIBDIR=`${RUBY-$BASERUBY} -rrbconfig -e ['puts RbConfig::CONFIG["libdir"]']`
+  XRUBY_RUBYLIBDIR=`${RUBY-$BASERUBY} -rrbconfig -e ['puts RbConfig::CONFIG["rubylibdir"]']`
+  XRUBY_RUBYHDRDIR=`${RUBY-$BASERUBY} -rrbconfig -e ['puts RbConfig::CONFIG["rubyhdrdir"]']`
+  AC_SUBST(XRUBY_LIBDIR)
+  AC_SUBST(XRUBY_RUBYLIBDIR)
+  AC_SUBST(XRUBY_RUBYHDRDIR)
+  PREP='$(arch)-fake.rb'
+  AS_CASE(["$enable_shared:$EXTSTATIC:$target_os"], [no::darwin*], [
+    # darwin target requires miniruby for linking ext bundles
+    PREP="$PREP"' miniruby$(EXEEXT)'
+  ])
+  RUNRUBY_COMMAND='$(MINIRUBY) -I`cd $(srcdir)/lib; pwd`'
+  RUNRUBY='$(RUNRUBY_COMMAND)'
+  XRUBY='$(MINIRUBY)'
+  TEST_RUNNABLE=no
+  CROSS_COMPILING=yes
+  AC_DEFINE(CROSS_COMPILING, 1)
+], [
+  MINIRUBY='./miniruby$(EXEEXT) -I$(srcdir)/lib -I.'
+  MINIRUBY="$MINIRUBY"' -I$(EXTOUT)/common'
+  PREP='miniruby$(EXEEXT)'
+  RUNRUBY_COMMAND='$(MINIRUBY) $(tooldir)/runruby.rb --extout=$(EXTOUT) $(RUNRUBYOPT)'
+  RUNRUBY='$(RUNRUBY_COMMAND) --'
+  XRUBY='$(RUNRUBY)'
+  TEST_RUNNABLE=yes
+  CROSS_COMPILING=no
+])
+AC_SUBST(TEST_RUNNABLE)
+AC_SUBST(CROSS_COMPILING)
+AC_SUBST(MINIRUBY)
+AC_SUBST(BTESTRUBY)
+AC_SUBST(PREP)
+AC_SUBST(RUNRUBY_COMMAND)
+AC_SUBST(RUNRUBY)
+AC_SUBST(XRUBY)
+AC_SUBST(EXTOUT, [${EXTOUT=.ext}])
+
+FIRSTMAKEFILE=""
+LIBRUBY_A='lib$(RUBY_SO_NAME)-static.a'
+LIBRUBY='$(LIBRUBY_A)'
+LIBRUBYARG_STATIC='-l$(RUBY_SO_NAME)-static'
+LIBRUBYARG='$(LIBRUBYARG_STATIC)'
+SOLIBS='$(MAINLIBS)'
+
+AS_CASE(["$target_os"],
+  [cygwin*|msys*|mingw*|haiku*|darwin*], [
+    : ${DLDLIBS=""}
+    ],
+  [
+    DLDLIBS="${DLDLIBS:+$DLDLIBS }-lc"
+    ])
+
+AC_ARG_ENABLE(multiarch,
+	      AS_HELP_STRING([--enable-multiarch], [enable multiarch compatible directories]),
+	      [multiarch=], [unset multiarch])
+AS_IF([test ${multiarch+set}], [
+   AC_DEFINE(ENABLE_MULTIARCH)
+])
+
+archlibdir='${libdir}/${arch}'
+AC_ARG_WITH(archlibdir,
+	    AS_HELP_STRING([--with-archlibdir=DIR],
+			   [prefix for libruby [[LIBDIR/ARCH]]]),
+	    [archlibdir="$withval"])
+
+sitearchlibdir='${libdir}/${sitearch}'
+archincludedir='${includedir}/${arch}'
+sitearchincludedir='${includedir}/${sitearch}'
+
+AC_ARG_WITH(soname,
+	AS_HELP_STRING([--with-soname=SONAME], [base name of shared library]),
+	[RUBY_SO_NAME=$withval],
+	[
+	    AS_CASE(["$target_os"],
+	    [darwin*], [
+	        RUBY_SO_NAME='$(RUBY_BASE_NAME).$(RUBY_API_VERSION)'
+	    ],
+	    [cygwin*], [
+	        RUBY_SO_NAME='$(RUBY_BASE_NAME)$(MAJOR)$(MINOR)0'
+	    ],
+	    [mingw*], [
+		RUBY_SO_NAME="${rb_cv_msvcrt}"'-$(RUBY_BASE_NAME)$(MAJOR)$(MINOR)0'
+		AS_IF([test x"${target_cpu}" != xi386], [
+		    RUBY_SO_NAME="${target_cpu}-${RUBY_SO_NAME}"
+		])
+	    ],
+	    [RUBY_SO_NAME='$(RUBY_BASE_NAME)'])
+	])
+
+LIBRUBY_LDSHARED=${DLDSHARED=${LDSHARED}}
+LIBRUBY_DLDFLAGS=$DLDFLAGS
+LIBRUBY_SO='lib$(RUBY_SO_NAME).$(SOEXT).$(RUBY_PROGRAM_VERSION)'
+LIBRUBY_SONAME='lib$(RUBY_SO_NAME).$(SOEXT).$(RUBY_API_VERSION)'
+LIBRUBY_ALIASES='lib$(RUBY_SO_NAME).$(SOEXT)'
+ENABLE_SHARED=no
+
+AC_ARG_ENABLE(shared,
+       AS_HELP_STRING([--enable-shared], [build a shared library for Ruby]),
+       [enable_shared=$enableval])
+libprefix=${multiarch+'$(archlibdir)'}${multiarch-'$(libdir)'}
+LIBRUBY_RELATIVE=${load_relative-no}
+AS_CASE("$enable_shared", [yes], [
+  LIBRUBY='$(LIBRUBY_SO)'
+  LIBRUBYARG_SHARED='-l$(RUBY_SO_NAME)'
+  LIBRUBYARG='$(LIBRUBYARG_SHARED)'
+  LIBRUBY_RELATIVE=no
+  test -z "$CCDLFLAGS" || CFLAGS="$CFLAGS $CCDLFLAGS"
+  ENABLE_SHARED=yes
+
+  # libdir can be overridden in config.site file (on OpenSUSE at least).
+  libdir_basename=lib
+  AS_IF([test "$bindir" = '${exec_prefix}/bin'], [
+    AS_CASE(["$libdir"], ['${exec_prefix}/'*], [libdir_basename=`basename "$libdir"`])
+  ])
+  AC_DEFINE_UNQUOTED(LIBDIR_BASENAME, ["${libdir_basename}"])
+  libdir_basename="${libdir_basename}"${multiarch+'/${arch}'}
+
+  # Debian bullseye reportedly has its ld(1) patched, which breaks
+  # --enable-shared --with-jemalloc combination.  We might have to deal with
+  # the ld(1) change sooner or later, but in the meantime let us force it
+  # the old way.
+  #
+  # See https://github.com/ruby/ruby/pull/4627
+  RUBY_TRY_LDFLAGS([${linker_flag}--no-as-needed], [no_as_needed=yes], [no_as_needed=no])
+  AS_IF([test "$no_as_needed" = yes], [
+      RUBY_APPEND_OPTIONS(LDFLAGS, [${linker_flag}--no-as-needed])
+  ])
+
+  AS_CASE(["$target_os"],
+    [freebsd*|dragonfly*], [],
+    [
+     AS_IF([test "$GCC" = yes], [
+       RUBY_TRY_LDFLAGS([${linker_flag}--no-undefined], [no_undefined=yes], [no_undefined=no])
+       AS_IF([test "no_undefined" = yes], [
+	  RUBY_APPEND_OPTION(EXTLDFLAGS, [${linker_flag}--no-undefined])
+       ])
+     ])
+    ])
+
+  AS_CASE(["$target_os"],
+    [sunos4*], [
+	LIBRUBY_ALIASES='$(LIBRUBY_SONAME) lib$(RUBY_SO_NAME).$(SOEXT)'
+	],
+    [linux* | gnu* | k*bsd*-gnu | atheos* | kopensolaris*-gnu | haiku*], [
+	RUBY_APPEND_OPTIONS(LIBRUBY_DLDFLAGS, ['-Wl,-soname,$(LIBRUBY_SONAME)' "$LDFLAGS_OPTDIR"])
+	LIBRUBY_ALIASES='$(LIBRUBY_SONAME) lib$(RUBY_SO_NAME).$(SOEXT)'
+	AS_IF([test "$load_relative" = yes], [
+	    libprefix="'\$\${ORIGIN}/../${libdir_basename}'"
+	    LIBRUBY_RPATHFLAGS="-Wl,-rpath,${libprefix}"
+	    LIBRUBY_RELATIVE=yes
+	])
+	],
+    [freebsd*|dragonfly*], [
+	LIBRUBY_SO='lib$(RUBY_SO_NAME).$(SOEXT).$(MAJOR)$(MINOR)'
+	LIBRUBY_SONAME='$(LIBRUBY_SO)'
+	AS_IF([test "$rb_cv_binary_elf" != "yes" ], [
+	    LIBRUBY_SO="$LIBRUBY_SO.\$(TEENY)"
+	    LIBRUBY_ALIASES=''
+	], [test "$load_relative" = yes], [
+	    libprefix="'\$\$ORIGIN/../${libdir_basename}'"
+	    LIBRUBY_RPATHFLAGS="-Wl,-rpath,${libprefix}"
+	    LIBRUBY_RELATIVE=yes
+	])
+	],
+    [netbsd*], [
+	LIBRUBY_SONAME='lib$(RUBY_SO_NAME).$(SOEXT).$(MAJOR)$(MINOR)'
+	LIBRUBY_SO="${LIBRUBY_SONAME}"'.$(TEENY)'
+	RUBY_APPEND_OPTIONS(LIBRUBY_DLDFLAGS, ['-Wl,-soname,$(LIBRUBY_SONAME)' "$LDFLAGS_OPTDIR"])
+	AS_IF([test "$rb_cv_binary_elf" = yes], [ # ELF platforms
+	   LIBRUBY_ALIASES='$(LIBRUBY_SONAME) lib$(RUBY_SO_NAME).$(SOEXT)'
+	], [	# a.out platforms
+	   LIBRUBY_ALIASES=""
+	])
+	],
+    [openbsd*|mirbsd*], [
+	LIBRUBY_SO='lib$(RUBY_SO_NAME).$(SOEXT).$(MAJOR).'`expr ${MINOR} \* 10 + ${TEENY}`
+	],
+    [solaris*], [
+	LIBRUBY_SO='lib$(RUBY_SO_NAME).$(SOEXT).$(MAJOR)'
+	LIBRUBY_SONAME='lib$(RUBY_SO_NAME).$(SOEXT).$(RUBY_PROGRAM_VERSION)'
+	LIBRUBY_ALIASES='$(LIBRUBY_SONAME) lib$(RUBY_SO_NAME).$(SOEXT)'
+	RUBY_APPEND_OPTIONS(LIBRUBY_DLDFLAGS, ["${linker_flag}-h${linker_flag:+,}"'$(@F)'])
+	AS_IF([test "$load_relative" = yes], [
+	    libprefix="'\$\$ORIGIN/../${libdir_basename}'"
+	    LIBRUBY_RPATHFLAGS="-R${libprefix}"
+	    LIBRUBY_RELATIVE=yes
+	], [
+	    LIBRUBY_RPATHFLAGS='-R${libdir}'
+	])
+	],
+    [aix*], [
+	RUBY_APPEND_OPTIONS(LIBRUBY_DLDFLAGS, ["${linker_flag}-bnoentry" "$XLDFLAGS" "$LDFLAGS_OPTDIR"])
+	LIBRUBYARG_SHARED='-L${libdir} -l${RUBY_SO_NAME}'
+	LIBS="$LIBS -lm -lc"
+	],
+    [darwin*], [
+	LIBRUBY_SO='lib$(RUBY_SO_NAME).$(SOEXT)'
+	LIBRUBY_SONAME='$(LIBRUBY_SO)'
+	LIBRUBY_ALIASES='lib$(RUBY_INSTALL_NAME).$(SOEXT)'
+	AS_IF([test "$load_relative" = yes], [
+	    libprefix="@executable_path/../${libdir_basename}"
+	    LIBRUBY_RELATIVE=yes
+	])
+	LIBRUBY_DLDFLAGS="$LIBRUBY_DLDFLAGS -install_name ${libprefix}"'/$(LIBRUBY_SONAME)'
+	LIBRUBY_DLDFLAGS="$LIBRUBY_DLDFLAGS "'-compatibility_version $(RUBY_API_VERSION)'
+	LIBRUBY_DLDFLAGS="$LIBRUBY_DLDFLAGS "'-current_version $(RUBY_PROGRAM_VERSION)'
+	AS_IF([test "$visibility_option" = ld], [
+	    LIBRUBY_DLDFLAGS="$LIBRUBY_DLDFLAGS "'-Wl,-unexported_symbol,_Init_*'
+	    LIBRUBY_DLDFLAGS="$LIBRUBY_DLDFLAGS "'-Wl,-unexported_symbol,_ruby_static_id_*'
+	    LIBRUBY_DLDFLAGS="$LIBRUBY_DLDFLAGS "'-Wl,-unexported_symbol,*_threadptr_*'
+	])
+	LIBRUBY_DLDFLAGS="$LIBRUBY_DLDFLAGS "' $(XLDFLAGS)'
+	],
+    [interix*], [
+	LIBRUBYARG_SHARED='-L. -L${libdir} -l$(RUBY_SO_NAME)'
+	],
+    [cygwin*|msys*|mingw*|mswin*], [
+	LIBRUBY_RELATIVE=yes
+	])
+], [
+  LIBRUBYARG_SHARED=
+
+  # enable PIE if possible
+  AC_ARG_ENABLE(pie,
+          AS_HELP_STRING([--disable-pie], [disable PIE feature]),
+          [pie=$enableval], [pie=])
+  AS_IF([test "$GCC" = yes -a -z "$EXTSTATIC" -a "x$pie" != xno], [
+    RUBY_TRY_CFLAGS(-fPIE, [pie=yes], [pie=no])
+    AS_IF([test "$pie" = yes], [
+      # Use -fPIE when testing -pie.  RUBY_TRY_LDFLAGS sets
+      # $save_CFLAGS internally, so set other name here.
+      save_CFLAGS_before_pie="$CFLAGS"
+      CFLAGS="$CFLAGS -fPIE"
+
+      # gcc need -pie but clang need -Wl,-pie.
+      for pie in -pie -Wl,-pie; do
+	RUBY_TRY_LDFLAGS([$pie], [], [pie=])
+	AS_IF([test "x$pie" != x], [
+	  RUBY_APPEND_OPTION(XCFLAGS, -fPIE)
+	  RUBY_APPEND_OPTION(XLDFLAGS, $pie)
+	  break
+	])
+      done
+      CFLAGS="$save_CFLAGS_before_pie"
+    ])
+  ])
+])
+AS_IF([test "$enable_rpath" = yes], [
+    test -z "$LIBRUBY_RPATHFLAGS" || LIBRUBY_RPATHFLAGS="$LIBRUBY_RPATHFLAGS "
+    rpathflag="${RPATHFLAG}"
+    AS_CASE(["${cross_compiling}${load_relative}"], [*yes*], [], [rpathflag="$RPATHFLAG$LIBPATHFLAG"])
+    rpathflag=`IFS="$PATH_SEPARATOR"
+        echo x "$rpathflag" |
+        sed "s/^x *//;s${IFS}"'%1\\$-s'"${IFS}${libprefix}${IFS}g;s${IFS}%s${IFS}${libprefix}${IFS}g"
+    `
+    LIBRUBY_RPATHFLAGS="$LIBRUBY_RPATHFLAGS${rpathflag}"
+    LIBRUBYARG_SHARED="$LIBRUBY_RPATHFLAGS $LIBRUBYARG_SHARED"
+    LIBRUBYARG_STATIC="$LIBRUBY_RPATHFLAGS $LIBRUBYARG_STATIC"
+])
+AC_SUBST(LIBRUBY_RELATIVE)
+
+LDFLAGS="-L. $LDFLAGS"
+AC_SUBST(ARCHFILE)
+
+AS_IF([test "$EXEEXT" = .exe], [
+    EXECUTABLE_EXTS='".exe",".com",".cmd",".bat"'
+    AC_DEFINE_UNQUOTED(EXECUTABLE_EXTS, $EXECUTABLE_EXTS)
+    EXECUTABLE_EXTS=`echo $EXECUTABLE_EXTS | tr -d '"' | tr , ' '`
+    AC_SUBST(EXECUTABLE_EXTS)
+])
+
+AS_CASE("$cross_compiling:${LIBPATHENV}", [yes:* | no:], [], [
+    AC_MSG_CHECKING(whether wrapper for $LIBPATHENV is needed)
+    AS_IF([env ${LIBPATHENV}=/lib /bin/sh -c ': ${'${LIBPATHENV}'?}' 2>/dev/null],
+	[AC_MSG_RESULT(no)],
+	[AC_SUBST(XRUBY_LIBPATHENV_WRAPPER, 'exe/$(PROGRAM)')
+	AC_MSG_RESULT(yes)]
+    )
+])
+
+AC_ARG_ENABLE(dtrace,
+        AS_HELP_STRING([--enable-dtrace],
+        [enable DTrace for tracing inside ruby. enabled by default on systems having dtrace]),
+        [enable_dtrace=$enableval], [enable_dtrace=auto])
+
+LIBRUBY_A_OBJS='$(OBJS)'
+DTRACE_REBUILD=
+AS_CASE(["${enable_dtrace}"],
+[yes|auto], [
+    RUBY_DTRACE_AVAILABLE()
+], [
+    rb_cv_dtrace_available=no
+])
+AS_CASE(["$target_os"],[freebsd*],[
+         rb_cv_dtrace_available=no
+	 ])
+AS_IF([test "${enable_dtrace}" = yes], [dnl
+    AS_IF([test -z "$DTRACE"], [dnl
+	AC_MSG_ERROR([dtrace(1) is missing])
+    ], [test "$cross_compiling" = yes], [dnl
+	AC_MSG_ERROR([--enable-dtrace, however, cross compiling])
+    ], [test "${rb_cv_dtrace_available}" = "no"], [dnl
+       AC_MSG_ERROR([--enable-dtrace, however, USDT is not available])
+    ])
+])
+AS_CASE([$rb_cv_dtrace_available],
+[yes*], [dnl
+    RUBY_DTRACE_POSTPROCESS()
+    AS_IF([test "$rb_cv_prog_dtrace_g" != no], [dnl
+	DTRACE_OBJ='probes.$(OBJEXT)'
+    ])
+    AS_IF([test "$rb_cv_prog_dtrace_g" = rebuild], [dnl
+	DTRACE_REBUILD=yes
+	LIBRUBY_A_OBJS='$(DTRACE_GLOMMED_OBJ)'
+    ])
+    AS_CASE("${target_os}", [freebsd*], [dnl
+        # FreeBSD's dtrace requires libelf
+        LIBS="-lelf $LIBS"
+    ])
+    DTRACE_EXT=d
+], [dnl
+    enable_dtrace=no
+    DTRACE_EXT=dmyh
+])
+AC_SUBST(DTRACE_EXT)
+AC_SUBST(DTRACE_OBJ)
+AC_SUBST(DTRACE_REBUILD)
+AC_SUBST(DTRACE_OPT)
+AC_SUBST(LIBRUBY_A_OBJS)
+
+AC_ARG_ENABLE(gcov,
+       AS_HELP_STRING([--enable-gcov], [enable coverage measurement by gcov]),
+       [gcov=yes])
+AS_IF([test x"$gcov" = xyes], [
+    CFLAGS="$CFLAGS -coverage"
+    LDFLAGS="$LDFLAGS -coverage"
+])
+
+RUBY_SETJMP_TYPE
+}
+
+[begin]_group "installation section" && {
+dnl build rdoc index if requested
+RDOCTARGET=""
+CAPITARGET=""
+AC_ARG_ENABLE(install-doc,
+       AS_HELP_STRING([--disable-install-doc], [do not install either rdoc indexes or C API documents during install]),
+       [install_doc=$enableval], [install_doc=yes])
+AC_ARG_WITH(rdoc,
+      AS_HELP_STRING([--with-rdoc=ri,html], [comma/space separated list of RDoc formats to install]),
+      [install_rdoc=`echo ,$withval, | sed 'y/,/ /;s/ ri / rdoc /;s/^ *//;s/ *$//'`], [
+AC_ARG_ENABLE(install-rdoc,
+      AS_HELP_STRING([--disable-install-rdoc], [do not install rdoc indexes during install]),
+      [install_rdoc=$enableval], [install_rdoc=yes])
+])
+AC_ARG_ENABLE(install-capi,
+      AS_HELP_STRING([--disable-install-capi], [do not install C API documents during install]),
+      [install_capi=$enableval], [install_capi=no])
+
+AS_IF([test "$install_doc" != no], [
+    AS_CASE(["$install_rdoc"],
+    [yes], [
+	RDOCTARGET="rdoc"
+    ],
+    [all], [
+	RDOCTARGET="rdoc html"
+    ],
+    [no|''], [
+	RDOCTARGET="nodoc"
+    ],
+    [
+	RDOCTARGET="$install_rdoc"
+    ])
+    AS_IF([test "$install_capi" != no -a -n "$DOXYGEN"], [
+	CAPITARGET="capi"
+    ], [
+	CAPITARGET="nodoc"
+    ])
+], [
+    RDOCTARGET="nodoc"
+    CAPITARGET="nodoc"
+])
+
+AC_SUBST(RDOCTARGET)
+AC_SUBST(CAPITARGET)
+
+AS_CASE(["$RDOCTARGET:$CAPITARGET"],[nodoc:nodoc],[INSTALLDOC=nodoc],[INSTALLDOC=all])
+AC_SUBST(INSTALLDOC)
+
+AC_ARG_ENABLE(install-static-library,
+	AS_HELP_STRING([--disable-install-static-library], [do not install static ruby library]),
+	[INSTALL_STATIC_LIBRARY=$enableval
+         AS_IF([test x"$enable_shared" = xno -a x"$INSTALL_STATIC_LIBRARY" = xno],
+                 [AC_MSG_ERROR([must install either static or shared library])],
+                 [])],
+	AS_IF([test x"$enable_shared" = xyes],
+	    [INSTALL_STATIC_LIBRARY=no],
+	    [INSTALL_STATIC_LIBRARY=yes]))
+AC_SUBST(INSTALL_STATIC_LIBRARY)
+}
+
+[begin]_group "JIT section" && {
+AC_CHECK_PROG(RUSTC, [rustc], [rustc], [no]) dnl no ac_tool_prefix
+
+dnl check if rustc is recent enough to build YJIT (rustc >= 1.58.0)
+YJIT_RUSTC_OK=no
+AS_IF([test "$RUSTC" != "no"],
+    AC_MSG_CHECKING([whether ${RUSTC} works for YJIT])
+    YJIT_TARGET_ARCH=
+    AS_CASE(["$target_cpu"],
+        [arm64|aarch64], [YJIT_TARGET_ARCH=aarch64],
+        [x86_64], [YJIT_TARGET_ARCH=x86_64],
+    )
+    dnl Fails in case rustc target doesn't match ruby target.
+    dnl Can happen on Rosetta, for example.
+    AS_IF([echo "#[cfg(target_arch = \"$YJIT_TARGET_ARCH\")] fn main() { let x = 1; format!(\"{x}\"); }" |
+            $RUSTC - --emit asm=/dev/null 2>/dev/null],
+        [YJIT_RUSTC_OK=yes]
+    )
+    AC_MSG_RESULT($YJIT_RUSTC_OK)
+)
+
+dnl check if we can build YJIT on this target platform
+dnl we can't easily cross-compile with rustc so we don't support that
+YJIT_TARGET_OK=no
+AS_IF([test "$cross_compiling" = no],
+    AS_CASE(["$target_cpu-$target_os"],
+        [*android*], [
+            YJIT_TARGET_OK=no
+        ],
+        [arm64-darwin*|aarch64-darwin*|x86_64-darwin*], [
+            YJIT_TARGET_OK=yes
+        ],
+        [arm64-*linux*|aarch64-*linux*|x86_64-*linux*], [
+            YJIT_TARGET_OK=yes
+        ],
+        [arm64-*bsd*|aarch64-*bsd*|x86_64-*bsd*], [
+            YJIT_TARGET_OK=yes
+        ]
+    )
+)
+
+dnl build YJIT in release mode if rustc >= 1.58.0 is present and we are on a supported platform
+AC_ARG_ENABLE(yjit,
+    AS_HELP_STRING([--enable-yjit],
+    [enable in-process JIT compiler that requires Rust build tools. enabled by default on supported platforms if rustc 1.58.0+ is available]),
+    [YJIT_SUPPORT=$enableval],
+    [AS_CASE(["$YJIT_TARGET_OK:$YJIT_RUSTC_OK"],
+        [yes:yes], [
+            YJIT_SUPPORT=yes
+        ],
+        [YJIT_SUPPORT=no]
+    )]
+)
+
+CARGO=
+CARGO_BUILD_ARGS=
+YJIT_LIBS=
+AS_CASE(["${YJIT_SUPPORT}"],
+[yes|dev|stats|dev_nodebug], [
+    AS_IF([test x"$RUSTC" = "xno"],
+        AC_MSG_ERROR([rustc is required. Installation instructions available at https://www.rust-lang.org/tools/install])
+    )
+
+    AS_CASE(["${YJIT_SUPPORT}"],
+    [yes], [
+	rb_rust_target_subdir=release
+    ],
+    [dev], [
+	rb_rust_target_subdir=debug
+	CARGO_BUILD_ARGS='--features stats,disasm'
+	AC_DEFINE(RUBY_DEBUG, 1)
+    ],
+    [dev_nodebug], [
+	rb_rust_target_subdir=dev_nodebug
+	CARGO_BUILD_ARGS='--profile dev_nodebug --features stats,disasm'
+	AC_DEFINE(YJIT_STATS, 1)
+    ],
+    [stats], [
+	rb_rust_target_subdir=stats
+	CARGO_BUILD_ARGS='--profile stats --features stats'
+	AC_DEFINE(YJIT_STATS, 1)
+    ])
+
+    AS_IF([test -n "${CARGO_BUILD_ARGS}"], [
+             AC_CHECK_TOOL(CARGO, [cargo], [no])
+             AS_IF([test x"$CARGO" = "xno"],
+                AC_MSG_ERROR([cargo is required. Installation instructions available at https://www.rust-lang.org/tools/install])
+             ]))
+
+    YJIT_LIBS="yjit/target/${rb_rust_target_subdir}/libyjit.a"
+    AS_CASE(["$target_os"],[openbsd*],[
+        # Link libc++abi (which requires libpthread) for _Unwind_* functions needed by yjit
+        LDFLAGS="$LDFLAGS -lpthread -lc++abi"
+    ])
+    YJIT_OBJ='yjit.$(OBJEXT)'
+    AS_IF([test x"$YJIT_SUPPORT" != "xyes" ], [
+        AC_DEFINE_UNQUOTED(YJIT_SUPPORT, [$YJIT_SUPPORT])
+    ])
+    AC_DEFINE(USE_YJIT, 1)
+], [
+    AC_DEFINE(USE_YJIT, 0)
+])
+
+dnl These variables end up in ::RbConfig::CONFIG
+AC_SUBST(YJIT_SUPPORT)dnl what flavor of YJIT the Ruby build includes
+AC_SUBST(RUSTC)dnl Rust compiler command
+AC_SUBST(CARGO)dnl Cargo command for Rust builds
+AC_SUBST(CARGO_BUILD_ARGS)dnl for selecting Rust build profiles
+AC_SUBST(YJIT_LIBS)dnl for optionally building the Rust parts of YJIT
+AC_SUBST(YJIT_OBJ)dnl for optionally building the C parts of YJIT
+
+dnl RJIT supports only x86_64 platforms, but allows arm64/aarch64 for custom JITs.
+RJIT_TARGET_OK=no
+AS_IF([test "$cross_compiling" = no],
+    AS_CASE(["$target_cpu-$target_os"],
+        [*android*], [
+            RJIT_TARGET_OK=no
+        ],
+        [arm64-darwin*|aarch64-darwin*|x86_64-darwin*], [
+            RJIT_TARGET_OK=yes
+        ],
+        [arm64-*linux*|aarch64-*linux*|x86_64-*linux*], [
+            RJIT_TARGET_OK=yes
+        ],
+        [arm64-*bsd*|aarch64-*bsd*|x86_64-*bsd*], [
+            RJIT_TARGET_OK=yes
+        ]
+    )
+)
+
+dnl Build RJIT on supported platforms or if --enable-rjit is specified.
+AC_ARG_ENABLE(rjit,
+    AS_HELP_STRING([--enable-rjit],
+    [enable pure-Ruby JIT compiler. enabled by default on Unix x86_64 platforms]),
+    [RJIT_SUPPORT=$enableval],
+    [AS_CASE(["$RJIT_TARGET_OK"],
+        [yes], [RJIT_SUPPORT=yes],
+        [RJIT_SUPPORT=no]
+    )]
+)
+
+AS_CASE(["$RJIT_SUPPORT"],
+[yes|dev], [
+    AS_CASE(["$RJIT_SUPPORT"],
+    [dev], [
+        # Link libcapstone for --rjit-dump-disasm
+        AC_CHECK_LIB([capstone], [cs_disasm])
+    ])
+
+    AC_DEFINE(USE_RJIT, 1)
+], [
+    AC_DEFINE(USE_RJIT, 0)
+])
+
+AC_SUBST(RJIT_SUPPORT)
+}
+
+[begin]_group "build section" && {
+AC_CACHE_CHECK([for prefix of external symbols], rb_cv_symbol_prefix, [
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[extern void conftest_external(void) {}]], [[]])],[
+	rb_cv_symbol_prefix=`$NM conftest.$ac_objext |
+			     sed -n ['/.*T[ 	]\([^ 	]*\)conftest_external.*/!d;s//\1/p;q']`
+	],
+	[rb_cv_symbol_prefix=''])
+    test -n "$rb_cv_symbol_prefix" || rb_cv_symbol_prefix=NONE
+])
+SYMBOL_PREFIX="$rb_cv_symbol_prefix"
+test "x$SYMBOL_PREFIX" = xNONE && SYMBOL_PREFIX=''
+
+AS_IF([test x"$enable_shared" = xyes], [
+    AC_CACHE_CHECK([for default symbols in empty shared library], rb_cv_symbols_in_emptylib, [
+        save_CC="$CC"
+        eval CC=\"`printf "%s" "${DLDSHARED}" | sed ['s/\$(CC)/${CC}/']`\"
+        AC_LINK_IFELSE([AC_LANG_PROGRAM()],[
+            rb_cv_symbols_in_emptylib=`$NM -Pgp conftest$ac_exeext |
+                sed ["/ [A-TV-Z] .*/!d;s///;s/^${SYMBOL_PREFIX}//;/^main$/d"]`
+        ])
+        set dummy ${rb_cv_symbols_in_emptylib}
+        shift
+        rb_cv_symbols_in_emptylib="$*"
+        CC="$save_CC"
+    ])
+])
+AC_SUBST(XSYMBOLS_IN_EMPTYLIB, "${rb_cv_symbols_in_emptylib}")
+
+DLNOBJ=dln.o
+AC_ARG_ENABLE(dln,
+	      AS_HELP_STRING([--disable-dln], [disable dynamic link feature]),
+	      [test "$enableval" = yes || DLNOBJ=dmydln.o])
+AC_SUBST(DLNOBJ)
+MINIDLNOBJ=dmydln.o
+
+AS_CASE(["$target_os"],
+    [linux*], [
+	],
+    [netbsd*], [
+	RUBY_APPEND_OPTION(CFLAGS, -pipe)
+	],
+    [darwin*], [
+	RUBY_APPEND_OPTION(CFLAGS, -pipe)
+        AC_MSG_CHECKING([whether Security framework is needed])
+	AC_COMPILE_IFELSE([
+	    AC_LANG_BOOL_COMPILE_TRY([
+@%:@include <AvailabilityMacros.h>
+enum {
+    least = MAC_OS_X_VERSION_10_7, /* just fail if undefined */
+    required = MAC_OS_X_VERSION_MIN_REQUIRED,
+    upper /* bigger than MIN_REQUIRED, or */
+@%:@ifdef MAC_OS_X_VERSION_10_10
+        = MAC_OS_X_VERSION_10_10
+@%:@endif
+};],
+	    [required >= least && required < upper])],
+	    [dnl
+		AC_MSG_RESULT(yes)
+		RUBY_APPEND_OPTION(XLDFLAGS, [-framework Security])
+		RUBY_APPEND_OPTION(LIBRUBYARG_STATIC, [-framework Security])
+	    ],dnl
+	    [dnl
+		AC_MSG_RESULT(no)
+	    ]dnl
+	)
+	RUBY_APPEND_OPTION(XLDFLAGS, [-framework CoreFoundation])
+	RUBY_APPEND_OPTION(LIBRUBYARG_STATIC, [-framework CoreFoundation])
+	],
+    [osf*], [
+	AS_IF([test "$GCC" != "yes" ], [
+	  # compile something small: taint.c is fine for this.
+	  # the main point is the '-v' flag of 'cc'.
+	  AS_CASE(["`cc -v -I. -c main.c -o /tmp/main.o 2>&1`"],
+	  [*/gemc_cc*], [   # we have the new DEC GEM CC
+                        CFLAGS="$CFLAGS -oldc"
+                        ],
+          [            # we have the old MIPS CC
+                        ])
+	  # cleanup
+	  rm -f /tmp/main.o
+	  CFLAGS="$CFLAGS -std"
+	])
+	],
+    [cygwin*|msys*|mingw*], [
+	LIBRUBY_DLDFLAGS="${LIBRUBY_DLDFLAGS}"' -Wl,--out-implib=$(LIBRUBY)'
+	AS_CASE(["$target_os"],
+	[cygwin*], [
+	    AS_IF([test x"$enable_shared" = xyes], [
+		LIBRUBY_SO='cyg$(RUBY_SO_NAME)'.dll
+		LIBRUBY_DLDFLAGS="${LIBRUBY_DLDFLAGS}"' $(RUBYDEF)'
+	    ])
+	    ],
+	[mingw*], [
+	    AS_IF([test x"$enable_shared" = xyes], [
+		LIBRUBY_SO='$(RUBY_SO_NAME)'.dll
+		LIBRUBY_DLDFLAGS="${LIBRUBY_DLDFLAGS}"' $(RUBYDEF)'
+	    ])
+	    EXPORT_PREFIX=' '
+	    EXTDLDFLAGS='$(DEFFILE)'
+	    AC_LIBOBJ([win32/win32])
+	    AC_LIBOBJ([win32/file])
+	    COMMON_LIBS=m
+#	    COMMON_MACROS="WIN32_LEAN_AND_MEAN="
+	    COMMON_HEADERS="winsock2.h windows.h"
+	    PLATFORM_DIR=win32
+	    ])
+	LIBRUBY_ALIASES=''
+	FIRSTMAKEFILE=GNUmakefile:cygwin/GNUmakefile.in
+	AS_IF([test x"$enable_shared" = xyes], [
+	    LIBRUBY='lib$(RUBY_SO_NAME).dll.a'
+	], [
+	    LIBRUBY_SO=dummy
+	    LIBRUBY='lib$(RUBY_SO_NAME).a'
+	    LIBRUBYARG='-l$(RUBY_SO_NAME)'
+	])
+	],
+    [wasi*], [
+        FIRSTMAKEFILE=GNUmakefile:wasm/GNUmakefile.in
+        AC_LIBOBJ([wasm/missing])
+        AC_LIBOBJ([wasm/runtime])
+        AC_LIBOBJ([wasm/fiber])
+        AC_LIBOBJ([wasm/machine])
+        AC_LIBOBJ([wasm/setjmp])
+        AC_LIBOBJ([wasm/machine_core])
+        AC_LIBOBJ([wasm/setjmp_core])
+        PLATFORM_DIR=wasm
+])
+
+MINIOBJS="$MINIDLNOBJ"
+
+AC_ARG_ENABLE(debug-env,
+       AS_HELP_STRING([--enable-debug-env], [enable RUBY_DEBUG environment variable]),
+       [AC_SUBST(ENABLE_DEBUG_ENV, yes)])
+
+AS_CASE(["$FIRSTMAKEFILE"], [*GNUmakefile:*], [gnumake=yes], [
+    AC_MSG_CHECKING([if ${MAKE-make} is GNU make])
+    mkdir conftest.dir
+    echo "all:; @echo yes" > conftest.dir/GNUmakefile
+    echo "all:; @echo no" > conftest.dir/Makefile
+    gnumake=`(cd conftest.dir; ${MAKE-make})`
+    rm -fr conftest.dir
+    AS_CASE(["$gnumake"],
+    [*yes*], [
+	FIRSTMAKEFILE=GNUmakefile:template/GNUmakefile.in
+	gnumake=yes],
+    [
+	gnumake=no])
+    AC_MSG_RESULT($gnumake)
+])
+AS_IF([test "$gnumake" = yes], [ NULLCMD=: ], [
+    AC_MSG_CHECKING([for safe null command for ${MAKE-make}])
+    mkdir conftest.dir
+    NULLCMD=
+    for cmd in : true; do
+	echo 'A=1' > conftest.dir/Makefile
+	echo 'B=$(A:1=@'$cmd')' >> conftest.dir/Makefile
+	echo 'all:; $B 1 2 3 4 5 6 7 8 9' >> conftest.dir/Makefile
+	AS_IF([(cd conftest.dir; ${MAKE-make} >/dev/null 2>/dev/null)], [
+	    NULLCMD=$cmd
+	    break
+	])
+    done
+    rm -fr conftest.dir
+    AS_IF([test -z "$NULLCMD"], [
+	AC_MSG_ERROR(no candidate for safe null command)
+    ])
+    AC_MSG_RESULT($NULLCMD)
+])
+AC_SUBST(NULLCMD)
+
+AS_IF([test "${universal_binary-no}" = yes ], [
+    AC_CACHE_CHECK([for architecture macros], rb_cv_architecture_macros, [
+    mv confdefs.h confdefs1.h
+    : > confdefs.h
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@if defined __`echo ${universal_archnames} |
+    sed 's/=[^ ]*//g;s/ /__ || defined __/g'`__
+@%:@else
+@%:@error
+>>>>>><<<<<<
+@%:@endif]], [[]])],[
+    rb_cv_architecture_macros=yes
+    mv -f confdefs1.h confdefs.h
+], [
+    rb_cv_architecture_macros=no
+    archflagpat=`eval echo '"'"${ARCH_FLAG}"'"' | sed 's/[[][|.*]]/\\&/g'`
+    new_cflags=`echo "$CFLAGS" | sed "s|$archflagpat"'||'`
+    for archs in ${universal_archnames}; do
+	cpu=${archs@%:@*=}
+	archs=${archs%=*}
+	CFLAGS="$new_cflags -arch $archs"
+	archs="__${archs}__"
+	AC_MSG_CHECKING([for macro ${archs} on ${cpu}])
+	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@ifndef ${archs}
+@%:@error
+@%:@endif]], [[]])],
+	[AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no])])
+    done
+    mv -f confdefs1.h confdefs.h
+    AC_MSG_ERROR([failed])
+    ])])
+    AC_CACHE_CHECK(whether __ARCHITECTURE__ is available, rb_cv_architecture_available,
+	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <stdio.h>
+		const char arch[[]] = __ARCHITECTURE__;]], [[puts(arch);]])],
+		[rb_cv_architecture_available=yes], [rb_cv_architecture_available=no]))
+])
+}
+
+[end]_group
+
+MAINLIBS="$LIBS"
+LIBS=$ORIG_LIBS
+AS_IF([test -n "${LIBS}"], [
+    libspat=`echo "${LIBS}" | sed 's/[[][|.*$^]]/\\&/g;s/^  */ /;s/^  *$/ /'`
+    MAINFLAGS=`echo " $MAINLIBS " | sed "s|$libspat"'||;s/^ *//;s/ *$//'`
+])
+LIBRUBYARG_STATIC="${LIBRUBYARG_STATIC} \$(MAINLIBS)"
+CPPFLAGS="$CPPFLAGS "'$(DEFS)'
+test -z "$CPPFLAGS" || CPPFLAGS="$CPPFLAGS "; CPPFLAGS="$CPPFLAGS"'${cppflags}'
+AS_IF([test -n "${cflags+set}"], [
+    cflagspat=`eval echo '"'"${cflags}"'"' | sed 's/[[][|.*]]/\\&/g;s/^  */ /;s/^  *$/ /'`
+    CFLAGS=`echo " $CFLAGS " | sed "s|$cflagspat"'|${cflags}|;s/^ *//;s/ *$//'`
+])
+AS_IF([test -n "${cxxflags+set}"], [
+    cxxflagspat=`eval echo '"'"${cxxflags}"'"' | sed 's/[[][|.*]]/\\&/g;s/^  */ /;s/^  *$/ /'`
+    CXXFLAGS=`echo " $CXXFLAGS " | sed "s|$cxxflagspat"'|${cxxflags}|;s/^ *//;s/ *$//'`
+])
+AS_IF([test "${ARCH_FLAG}"], [
+    archflagpat=`eval echo '"'"${ARCH_FLAG}"'"' | sed 's/[[][|.*]]/\\&/g'`
+    CFLAGS=`echo "$CFLAGS" | sed "s| *$archflagpat"'||'`
+    CXXFLAGS=`echo "$CXXFLAGS" | sed "s| *$archflagpat"'||'`
+    LDFLAGS=`echo "$LDFLAGS" | sed "s| *$archflagpat"'||'`
+])
+rb_cv_warnflags=`echo "$rb_cv_warnflags" | sed 's/^ *//;s/ *$//'`
+warnflags="$rb_cv_warnflags"
+AC_SUBST(cppflags)dnl
+AC_SUBST(cflags, ["${orig_cflags:+$orig_cflags }"'${optflags} ${debugflags} ${warnflags}'])dnl
+AC_SUBST(cxxflags)dnl
+AC_SUBST(optflags)dnl
+AC_SUBST(debugflags)dnl
+AC_SUBST(warnflags)dnl
+AC_SUBST(strict_warnflags)dnl
+AC_SUBST(XCFLAGS)dnl
+AC_SUBST(XLDFLAGS)dnl
+AC_SUBST(EXTLDFLAGS)dnl
+AC_SUBST(EXTDLDFLAGS)dnl
+AC_SUBST(LIBRUBY_LDSHARED)
+AC_SUBST(LIBRUBY_DLDFLAGS)
+AC_SUBST(RUBY_INSTALL_NAME)
+AC_SUBST(rubyw_install_name)
+AC_SUBST(RUBYW_INSTALL_NAME)
+AC_SUBST(RUBY_SO_NAME)
+AC_SUBST(LIBRUBY_A)
+AC_SUBST(LIBRUBY_SO)
+AC_SUBST(LIBRUBY_SONAME)
+AC_SUBST(LIBRUBY_ALIASES)
+AC_SUBST(LIBRUBY)
+AC_SUBST(LIBRUBYARG)
+AC_SUBST(LIBRUBYARG_STATIC)
+AC_SUBST(LIBRUBYARG_SHARED)
+AC_SUBST(SOLIBS)
+AC_SUBST(DLDLIBS)
+AC_SUBST(DLDSHARED)
+AC_SUBST(ENABLE_SHARED)
+AC_SUBST(MAINLIBS)
+AC_SUBST(COMMON_LIBS)
+AC_SUBST(COMMON_MACROS)
+AC_SUBST(COMMON_HEADERS)
+AC_SUBST(EXPORT_PREFIX)
+AC_SUBST(SYMBOL_PREFIX)
+AC_SUBST(MINIOBJS)
+AC_SUBST(THREAD_MODEL)
+AC_SUBST(COROUTINE_TYPE, ${coroutine_type})
+AC_SUBST(PLATFORM_DIR)
+AC_SUBST(USE_LLVM_WINDRES)
+
+firstmf=`echo $FIRSTMAKEFILE | sed 's/:.*//'`
+firsttmpl=`echo $FIRSTMAKEFILE | sed 's/.*://'`
+MAKEFILES="Makefile $firstmf"
+MAKEFILES="`echo $MAKEFILES`"
+AC_SUBST(MAKEFILES)
+
+ri_prefix=
+test "$program_prefix" != NONE &&
+  ri_prefix=$program_prefix
+
+ri_suffix=
+test "$program_suffix" != NONE &&
+  ri_suffix=$program_suffix
+
+RUBY_INSTALL_NAME="${ri_prefix}"'$(RUBY_BASE_NAME)'"${ri_suffix}"
+AS_CASE(["$target_os"],
+  [cygwin*|msys*|mingw*], [
+    RUBYW_INSTALL_NAME="${ri_prefix}"'$(RUBYW_BASE_NAME)'"${ri_suffix}"
+    rubyw_install_name='$(RUBYW_INSTALL_NAME)'
+    ])
+
+rubyarchprefix=${multiarch+'${archlibdir}/${RUBY_BASE_NAME}'}${multiarch-'${rubylibprefix}/${arch}'}
+AC_ARG_WITH(rubyarchprefix,
+	    AS_HELP_STRING([--with-rubyarchprefix=DIR],
+			   [prefix for architecture dependent ruby libraries [[RUBYLIBPREFIX/ARCH]]]),
+	    [rubyarchprefix="$withval"])
+AC_SUBST(rubyarchprefix)
+
+rubysitearchprefix=${multiarch+'${sitearchlibdir}/${RUBY_BASE_NAME}'}${multiarch-'${rubylibprefix}/${sitearch}'}
+AC_ARG_WITH(rubysitearchprefix,
+	    AS_HELP_STRING([--with-rubysitearchprefix=DIR],
+			   [prefix for architecture dependent site libraries [[RUBYLIBPREFIX/SITEARCH]]]),
+	    [rubysitearchprefix="$withval"])
+AC_SUBST(rubysitearchprefix)
+
+RI_BASE_NAME=`echo ${RUBY_BASE_NAME} | sed 's/ruby/ri/'`
+ridir='${datarootdir}/${RI_BASE_NAME}'
+AC_ARG_WITH(ridir,
+	    AS_HELP_STRING([--with-ridir=DIR], [ri documentation [[DATAROOTDIR/ri]]]),
+	    [ridir=$withval])
+AC_SUBST(ridir)
+AC_SUBST(RI_BASE_NAME)
+
+unset RUBY_LIB_VERSION
+RUBY_LIB_VERSION_STYLE='3	/* full */'
+{
+echo "#define RUBY_LIB_VERSION_STYLE $RUBY_LIB_VERSION_STYLE"
+echo '@%:@include "confdefs.h"'
+echo '#define STRINGIZE(x) x'
+test -f revision.h -o -f "${srcdir}/revision.h" || echo '#define RUBY_REVISION 0'
+echo '#include "version.h"'
+echo 'ruby_version=RUBY_LIB_VERSION'
+} > conftest.c
+ruby_version="`$CPP -I. -I"${srcdir}" -I"${srcdir}/include" conftest.c | sed '/^ruby_version=/!d;s/ //g'`"
+eval $ruby_version
+
+RUBY_LIB_VERSION="${ruby_version}"
+
+AC_SUBST(RUBY_LIB_VERSION_STYLE)
+AC_SUBST(RUBY_LIB_VERSION)
+
+AC_ARG_WITH(ruby-version,
+	    AS_HELP_STRING([--with-ruby-version=STR], [ruby version string for version specific directories [[full]] (full|STR)]),
+            [ruby_version_dir_name=$withval],
+            [ruby_version_dir_name=full])
+AS_CASE(["$ruby_version_dir_name"],
+  [full], [ruby_version_dir_name='${ruby_version}'])
+
+ruby_version_dir=/'${ruby_version_dir_name}'
+
+if test -z "${ruby_version_dir_name}"; then
+    unset ruby_version_dir
+    AC_DEFINE(RUBY_LIB_VERSION_BLANK, 1)
+fi
+
+rubylibdir='${rubylibprefix}'${ruby_version_dir}
+rubyarchdir=${multiarch+'${rubyarchprefix}'${ruby_version_dir}}${multiarch-'${rubylibdir}/${arch}'}
+
+AC_ARG_WITH(sitedir,
+	    AS_HELP_STRING([--with-sitedir=DIR], [site libraries in DIR [[RUBY_LIB_PREFIX/site_ruby]], "no" to disable site directory]),
+            [sitedir=$withval],
+            [sitedir='${rubylibprefix}/site_ruby'])
+sitelibdir='${sitedir}'${ruby_version_dir}
+
+AC_ARG_WITH(sitearchdir,
+	    AS_HELP_STRING([--with-sitearchdir=DIR],
+			   [architecture dependent site libraries in DIR [[SITEDIR/SITEARCH]], "no" to disable site directory]),
+            [sitearchdir=$withval],
+            [sitearchdir=${multiarch+'${rubysitearchprefix}/site_ruby'${ruby_version_dir}}${multiarch-'${sitelibdir}/${sitearch}'}])
+
+AC_ARG_WITH(vendordir,
+	    AS_HELP_STRING([--with-vendordir=DIR], [vendor libraries in DIR [[RUBY_LIB_PREFIX/vendor_ruby]], "no" to disable vendor directory]),
+            [vendordir=$withval],
+            [vendordir='${rubylibprefix}/vendor_ruby'])
+vendorlibdir='${vendordir}'${ruby_version_dir}
+
+AC_ARG_WITH(vendorarchdir,
+	    AS_HELP_STRING([--with-vendorarchdir=DIR],
+			   [architecture dependent vendor libraries in DIR [[VENDORDIR/SITEARCH]], "no" to disable vendor directory]),
+            [vendorarchdir=$withval],
+            [vendorarchdir=${multiarch+'${rubysitearchprefix}/vendor_ruby'${ruby_version_dir}}${multiarch-'${vendorlibdir}/${sitearch}'}])
+
+AC_ARG_WITH(rubygemsdir,
+           AS_HELP_STRING([--with-rubygemsdir=DIR], [custom rubygems directory]),
+            [rubygemsdir=$withval])
+
+AS_IF([test "${LOAD_RELATIVE+set}"], [
+    AC_DEFINE_UNQUOTED(LOAD_RELATIVE, $LOAD_RELATIVE)
+    RUBY_EXEC_PREFIX=''
+])
+
+AC_SUBST(RUBY_EXEC_PREFIX)
+
+AC_SUBST(libdirname, ${multiarch+arch}libdir)
+AC_SUBST(archlibdir)dnl
+AC_SUBST(sitearchlibdir)dnl
+AC_SUBST(archincludedir)dnl
+AC_SUBST(sitearchincludedir)dnl
+AC_SUBST(arch)dnl
+AC_SUBST(sitearch)dnl
+AC_SUBST(ruby_version)dnl
+AC_SUBST(ruby_version_dir_name)dnl
+AC_SUBST(rubylibdir)dnl
+AC_SUBST(rubyarchdir)dnl
+AC_SUBST(sitedir)dnl
+AC_SUBST(sitelibdir)dnl
+AC_SUBST(sitearchdir)dnl
+AC_SUBST(vendordir)dnl
+AC_SUBST(vendorlibdir)dnl
+AC_SUBST(vendorarchdir)dnl
+AC_SUBST(rubygemsdir)dnl
+
+AC_SUBST(CONFIGURE, "`echo $0 | sed 's|.*/||'`")dnl
+AC_SUBST(configure_args, "`echo "${ac_configure_args}" | sed 's/\\$/$$/g'`")dnl
+
+target_cpu=`echo $target_cpu | sed s/i.86/i386/`
+
+AS_IF([test "${universal_binary-no}" = yes ], [
+    arch="universal-${target_os}"
+    AS_IF([test "${rb_cv_architecture_available}" = yes], [
+	AC_DEFINE_UNQUOTED(RUBY_PLATFORM_CPU, __ARCHITECTURE__)
+    ], [
+	for archs in ${universal_archnames}; do
+	    cpu=`echo $archs | sed 's/.*=//'`
+	    archs=`echo $archs | sed 's/=.*//'`
+	    RUBY_DEFINE_IF([defined __${archs}__ &&! defined RUBY_PLATFORM_CPU], RUBY_PLATFORM_CPU, ["${cpu}"])
+	done
+    ])
+    ints='long int short'
+    test "$ac_cv_type_long_long" = yes && ints="'long long' $ints"
+    AC_SUBST(UNIVERSAL_ARCHNAMES, "${universal_archnames}")
+    AC_SUBST(UNIVERSAL_INTS, "${ints}")
+    AC_DEFINE_UNQUOTED(RUBY_PLATFORM_OS, "${target_os}")
+    AC_DEFINE_UNQUOTED(RUBY_ARCH, "universal-" RUBY_PLATFORM_OS)
+    AC_DEFINE_UNQUOTED(RUBY_PLATFORM, "universal." RUBY_PLATFORM_CPU "-" RUBY_PLATFORM_OS)
+], [
+    AS_IF([test "${target_os}-${rb_cv_msvcrt}" = "mingw32-ucrt" ], [
+        arch="${target_cpu}-mingw-ucrt"
+    ], [
+        arch="${target_cpu}-${target_os}"
+    ])
+    AC_DEFINE_UNQUOTED(RUBY_PLATFORM, "$arch")
+
+    AS_IF([test "$arch" = "s390x-linux"], [
+       AC_DEFINE_UNQUOTED(USE_MN_THREADS, 0)
+    ])
+])
+
+unset sitearch
+AS_CASE(["$target_os"],[mingw*],[sitearch="$target_cpu-$rb_cv_msvcrt"])
+: ${sitearch='${arch}'}
+
+AC_ARG_WITH(search-path,
+		AS_HELP_STRING([--with-search-path=DIR], [specify the additional search path]),
+		[search_path=$withval])
+AS_IF([test "$search_path" != ""], [
+    AC_SUBST(RUBY_SEARCH_PATH, $search_path)
+])
+
+AC_ARG_WITH(rubyhdrdir,
+	    AS_HELP_STRING([--with-rubyhdrdir=DIR], [core headers in DIR [[INCLUDEDIR/RUBY_BASE_NAME-RUBY_VERSION]]]),
+	    [rubyhdrdir=$withval],
+	    [rubyhdrdir='${includedir}/${RUBY_VERSION_NAME}'])
+
+AC_ARG_WITH(rubyarchhdrdir,
+	    AS_HELP_STRING([--with-rubyarchhdrdir=DIR],
+			   [architecture dependent core headers in DIR [[$(rubyhdrdir)/$(arch)]]]),
+	    [rubyarchhdrdir=$withval],
+	    [rubyarchhdrdir=${multiarch+'${archincludedir}/${RUBY_VERSION_NAME}'}${multiarch-'${rubyhdrdir}/${arch}'}])
+
+AC_ARG_WITH(sitehdrdir,
+	    AS_HELP_STRING([--with-sitehdrdir=DIR], [core site headers in DIR [[RUBYHDRDIR/site_ruby]]]),
+	    [sitehdrdir=$withval],
+	    [sitehdrdir='${rubyhdrdir}/site_ruby'])
+
+AC_ARG_WITH(sitearchhdrdir,
+	    AS_HELP_STRING([--with-sitearchhdrdir=DIR],
+			   [architecture dependent core site headers in DIR [[RUBYHDRDIR/site_ruby]]]),
+	    [sitearchhdrdir=$withval],
+	    [sitearchhdrdir=${multiarch+'${sitearchincludedir}/${RUBY_VERSION_NAME}/site_ruby'}${multiarch-'${sitehdrdir}/${sitearch}'}])
+
+AC_ARG_WITH(vendorhdrdir,
+	    AS_HELP_STRING([--with-vendorhdrdir=DIR], [core vendor headers in DIR [[RUBYHDRDIR/vendor_ruby]]]),
+	    [vendorhdrdir=$withval],
+	    [vendorhdrdir='${rubyhdrdir}/vendor_ruby'])
+
+AC_ARG_WITH(vendorarchhdrdir,
+	    AS_HELP_STRING([--with-vendorarchhdrdir=DIR],
+			   [architecture dependent core vendor headers in DIR [[RUBYHDRDIR/vendor_ruby]]]),
+	    [vendorarchhdrdir=$withval],
+	    [vendorarchhdrdir=${multiarch+'${sitearchincludedir}/${RUBY_VERSION_NAME}/vendor_ruby'}${multiarch-'${vendorhdrdir}/${sitearch}'}])
+
+AC_SUBST(rubyhdrdir)dnl
+AC_SUBST(sitehdrdir)dnl
+AC_SUBST(vendorhdrdir)dnl
+AC_SUBST(rubyarchhdrdir)dnl
+AC_SUBST(sitearchhdrdir)dnl
+AC_SUBST(vendorarchhdrdir)dnl
+
+AC_ARG_WITH(mantype,
+	AS_HELP_STRING([--with-mantype=TYPE], [specify man page type; TYPE is one of man and doc]),
+		[
+			AS_CASE(["$withval"],
+			[man|man.gz|man.bz2|doc|doc.gz|doc.bz2], [MANTYPE=$withval],
+			[AC_MSG_ERROR(invalid man type: $withval)])
+		])
+AS_IF([test -z "$MANTYPE"], [
+	dnl Looks for nroff with -mdoc support.
+	AC_CACHE_VAL([ac_cv_path_NROFF], [
+		AC_PATH_PROGS_FEATURE_CHECK([NROFF],
+			[nroff awf mandoc],
+			[$ac_path_NROFF -mdoc ${srcdir}/man/ruby.1 \
+				>/dev/null 2>&1 &&
+				ac_cv_path_NROFF=$ac_path_NROFF \
+				ac_path_NROFF_found=:],
+			[], ["/usr/bin:/usr/ucb"]
+		)
+	])
+	AS_IF([test -n "$ac_cv_path_NROFF"], [
+		MANTYPE=doc
+	], [
+		MANTYPE=man
+	])
+])
+AC_SUBST(MANTYPE)
+
+MKMF_VERBOSE=0
+AC_ARG_ENABLE(mkmf-verbose,
+    AS_HELP_STRING([--enable-mkmf-verbose], [enable verbose in mkmf]),
+    [MKMF_VERBOSE=1],
+    [MKMF_VERBOSE=0])
+AC_SUBST(MKMF_VERBOSE)
+
+AC_ARG_ENABLE(rubygems,
+	AS_HELP_STRING([--disable-rubygems], [disable rubygems by default]),
+	[enable_rubygems="$enableval"], [enable_rubygems=yes])
+AS_IF([test x"$enable_rubygems" = xno], [
+    USE_RUBYGEMS=no
+], [
+    USE_RUBYGEMS=yes
+])
+AC_SUBST(USE_RUBYGEMS)
+
+arch_hdrdir="${EXTOUT}/include/${arch}/ruby"
+AS_MKDIR_P("${arch_hdrdir}")
+config_h="${arch_hdrdir}/config.h"
+guard=INCLUDE_RUBY_CONFIG_H
+{
+  echo "#ifndef $guard"
+  echo "#define $guard 1"
+  sed "/^@%:@define PACKAGE_/d;s/  *$//" confdefs.h
+  echo "#endif /* $guard */"
+} | tr -d '\015' |
+(
+  AS_IF([test "x$CONFIGURE_TTY" = xyes], [color=--color], [color=])
+  exec ${SHELL} ${tooldir}/ifchange $color "${config_h}" -
+) >&AS_MESSAGE_FD || AC_MSG_ERROR([failed to create ${config_h}])
+tr -d '\015' < largefile.h > confdefs.h
+rm largefile.h
+
+BUILTIN_ENCS=["`sed -n -e '/^BUILTIN_ENCS[ 	]*=/{' \
+	-e s/// -e :l -e '/\\\\$/N' -e 's/\\\\\\n/ /' -e 't l' -e p \
+	-e '}' "${srcdir}/enc/Makefile.in"`"]
+BUILTIN_ENCOBJS=
+for e in $BUILTIN_ENCS; do BUILTIN_ENCOBJS="$BUILTIN_ENCOBJS "`echo $e | sed 's/\.c$/.$(OBJEXT)/'`; done
+AC_SUBST(BUILTIN_ENCOBJS)
+
+BUILTIN_TRANSES=["`sed -n -e '/^BUILTIN_TRANSES[ 	]*=/{' \
+	-e s/// -e :l -e '/\\\\$/N' -e 's/\\\\\\n/ /' -e 't l' -e p \
+	-e '}' "${srcdir}/enc/Makefile.in"`"]
+BUILTIN_TRANSSRCS=
+BUILTIN_TRANSOBJS=
+for e in $BUILTIN_TRANSES; do
+  BUILTIN_TRANSSRCS="$BUILTIN_TRANSSRCS "`echo $e | sed 's/\.trans$/.c/'`
+  BUILTIN_TRANSOBJS="$BUILTIN_TRANSOBJS "`echo $e | sed 's/\.trans$/.$(OBJEXT)/'`
+done
+AC_SUBST(BUILTIN_TRANSSRCS)
+AC_SUBST(BUILTIN_TRANSOBJS)
+
+PACKAGE=$RUBY_BASE_NAME
+AC_SUBST(PACKAGE)
+AS_MESSAGE([$PACKAGE library version = $ruby_version])
+
+AS_IF([test x"$CC_WRAPPER" != x], [
+    CC='$(CC_WRAPPER) '"${CC@%:@$CC_WRAPPER }"
+    CPP='$(CC_WRAPPER) '"${CPP@%:@$CC_WRAPPER }"
+    XCC_WRAPPER="$CC_WRAPPER"
+])
+AC_SUBST(CC_WRAPPER, '')
+AC_SUBST(XCC_WRAPPER)
+
+AS_CASE([" $CPP "], [*" $CC "*], [CPP=`echo " $CPP " | sed "s| $CC |"' $(CC) |;s/^ *//;s/  *$//'`])
+
+AS_IF([test ! -f "$srcdir/revision.h"], [
+    AS_IF([test "x$HAVE_BASERUBY" = xyes], [
+	${BASERUBY} -C "$srcdir" tool/file2lastrev.rb -q --revision.h > "$srcdir/revision.h"
+    ], [
+	touch "$srcdir/revision.h"
+    ])
+])
+
+AS_IF([test x"$firstmf" != x], [
+    AC_CONFIG_FILES($firstmf:$firsttmpl, [], [firstmf="$firstmf" firsttmpl="$firsttmpl"])
+])
+AC_CONFIG_FILES(Makefile:template/Makefile.in, [
+    tmpmk=confmk$$.tmp
+    {
+	AS_IF([test ${VCS+set}], [
+	    :
+	], [git_dir=`$GIT --work-tree="$srcdir" --git-dir="$srcdir/.git" rev-parse --git-dir 2>/dev/null`], [
+	    VCS='$(GIT)'
+	], [
+	    VCS='echo cannot'
+	])
+	AS_CASE("$VCS",
+		['$(GIT)'|git], [VCSUP='$(VCS) pull --rebase $(GITPULLOPTIONS)'],
+		[VCSUP='$(VCS)'])
+	for f in "$srcdir/version.h" "$srcdir/revision.h"; do
+            test -f "$f" || continue
+	    sed -n \
+	        -e '[/^@%:@define \(RUBY_RELEASE_[A-Z]*\) \([0-9][0-9]*\)/]{' \
+	        -e   's//\1 = \2/' \
+	        -e   '[s/ \([0-9]\)$/ 0\1/]' \
+	        -e   p \
+	        -e '}' "$f"
+        done
+	sed '/^MISSING/s/\$U\././g;/^VCS *=/s#@VCS@#'"$VCS"'#;/^VCSUP *=/s#@VCSUP@#'"$VCSUP"'#' Makefile
+	echo; test x"$EXEEXT" = x || echo 'miniruby: miniruby$(EXEEXT)'
+	AS_IF([test "$gnumake" != yes], [
+	    echo ['$(MKFILES): $(srcdir)/common.mk']
+	    sed ['s/{\$([^(){}]*)[^{}]*}//g'] ${srcdir}/common.mk
+            AS_IF([test "$YJIT_SUPPORT" = yes], [
+                cat ${srcdir}/yjit/not_gmake.mk
+                echo ['$(MKFILES): ${srcdir}/yjit/not_gmake.mk']
+            ])
+	], [
+	    echo 'distclean-local::; @$(RM) GNUmakefile uncommon.mk'
+	])
+    } > $tmpmk && AS_IF([! grep '^ruby:' $tmpmk > /dev/null], [
+	AS_IF([test "${gnumake}" = yes], [
+	    tmpgmk=confgmk$$.tmp
+	    {
+		echo "include $tmpmk"
+		echo "-include uncommon.mk"
+	    } > $tmpgmk
+	], [
+	    tmpgmk=$tmpmk
+	]) &&
+	test -z "`${MAKE-make} -f $tmpgmk info-program | grep '^PROGRAM=ruby$'`" &&
+	echo 'ruby: $(PROGRAM);' >> $tmpmk
+	test "$tmpmk" = "$tmpgmk" || rm -f "$tmpgmk"
+    ]) && mv -f $tmpmk Makefile],
+[EXEEXT='$EXEEXT' MAKE='${MAKE-make}' gnumake='$gnumake' GIT='$GIT' YJIT_SUPPORT='$YJIT_SUPPORT'])
+
+AC_ARG_WITH([ruby-pc],
+	    AS_HELP_STRING([--with-ruby-pc=FILENAME], [pc file basename]),
+	    [ruby_pc="$withval"],
+	    [ruby_pc="${RUBY_BASE_NAME}-${MAJOR}.${MINOR}.pc"])
+AC_SUBST(ruby_pc)
+AC_SUBST(exec, [exec])
+
+AC_ARG_WITH(destdir,
+	    AS_HELP_STRING([--with-destdir=DESTDIR], [specify default directory to install]),
+	    [DESTDIR="$withval"])
+AC_SUBST(DESTDIR)
+
+AC_OUTPUT
+}
+
+AS_IF([test "$silent" = yes], [], [
+AS_IF([${FOLD+:} false], [], [
+AS_IF([test "`echo abcdefg hijklmno | fold -s -w10 | sed 1d`" = hijklmno], [FOLD="fold"], [FOLD=])
+])
+fold_width=`expr $COLUMNS - 30 2>/dev/null` || fold_width=50
+AS_REQUIRE_SHELL_FN([config_summary],
+    [AS_FUNCTION_DESCRIBE([config_summary], [NAME, VAL], [configuration summary])],
+    [AS_IF([test -z "$2"], [], [
+	AS_ECHO_N(["   * $1:                     "]) | dd bs=1 count=26 2>/dev/null
+	AS_IF([test "$FOLD"], [
+	    echo "$2" | fold -s -w$fold_width |
+	    sed '1!s/^/                          /;$!s/$/\\/'
+	], [echo "$2"])
+    ])]
+)
+
+AS_IF([test $install_doc = yes],
+    [DOCTARGETS=`echo " $RDOCTARGET $CAPITARGET " | sed 's/ nodoc //g;s/^ *//;s/ *$//'`],
+    [DOCTARGETS=no])
+echo "---"
+echo "Configuration summary for $RUBY_BASE_NAME version $MAJOR.$MINOR.$TEENY"
+echo ""
+config_summary "Installation prefix" "$prefix"
+config_summary "exec prefix"         "$exec_prefix"
+config_summary "arch"                "$arch"
+config_summary "site arch"           "$sitearch"
+config_summary "RUBY_BASE_NAME"      "$RUBY_BASE_NAME"
+config_summary "enable shared"       "$enable_shared"
+config_summary "ruby lib prefix"     "$rubylibprefix"
+config_summary "site libraries path" "$rubysitearchprefix"
+config_summary "vendor path"         "$vendordir"
+config_summary "target OS"           "$target_os"
+config_summary "compiler"            "$CC"
+config_summary "with thread"         "$THREAD_MODEL"
+config_summary "with coroutine"      "$coroutine_type"
+config_summary "enable shared libs"  "$ENABLE_SHARED"
+config_summary "dynamic library ext" "$DLEXT"
+config_summary "CFLAGS"              "$cflags"
+config_summary "CPPFLAGS"            "$cppflags"
+config_summary "LDFLAGS"             "$LDFLAGS"
+config_summary "DLDFLAGS"            "$DLDFLAGS"
+config_summary "optflags"            "$optflags"
+config_summary "debugflags"          "$debugflags"
+config_summary "warnflags"           "$warnflags"
+config_summary "strip command"       "$STRIP"
+config_summary "install doc"         "$DOCTARGETS"
+config_summary "YJIT support"        "$YJIT_SUPPORT"
+config_summary "RJIT support"        "$RJIT_SUPPORT"
+config_summary "man page type"       "$MANTYPE"
+config_summary "search path"         "$search_path"
+config_summary "static-linked-ext"   ${EXTSTATIC:+"yes"}
+config_summary "BASERUBY -v"         "$BASERUBY_VERSION"
+echo ""
+echo "---"
+])
diff -Nuarp ruby-3.3.3.a/gc.c ruby-3.3.3.b/gc.c
--- ruby-3.3.3.a/gc.c	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/gc.c	2024-07-15 21:17:45.247237308 -0400
@@ -824,6 +824,8 @@ typedef struct rb_objspace {
         unsigned int during_minor_gc : 1;
         unsigned int during_incremental_marking : 1;
         unsigned int measure_gc : 1;
+        unsigned int collect_gc_stats : 1;
+        unsigned int verbose_gc_stats : 1;
     } flags;
 
     rb_event_flag_t hook_events;
@@ -890,11 +892,18 @@ typedef struct rb_objspace {
 
         /* temporary profiling space */
         double gc_sweep_start_time;
+        double gc_mark_start_time;
+
         size_t total_allocated_objects_at_gc_start;
         size_t heap_used_at_gc_start;
 
         /* basic statistics */
         size_t count;
+        double time;
+        size_t total_mallocs;
+        size_t total_malloced_bytes;
+        size_t live_after_last_sweep;
+
         uint64_t marking_time_ns;
         struct timespec marking_start_time;
         uint64_t sweeping_time_ns;
@@ -1153,6 +1162,7 @@ VALUE *ruby_initial_gc_stress_ptr = &rub
 #define heap_pages_deferred_final	objspace->heap_pages.deferred_final
 #define size_pools              objspace->size_pools
 #define during_gc		objspace->flags.during_gc
+#define collect_gc_stats        objspace->flags.collect_gc_stats
 #define finalizing		objspace->atomic_flags.finalizing
 #define finalizer_table 	objspace->finalizer_table
 #define global_list		objspace->global_list
@@ -9387,6 +9397,107 @@ heap_ready_to_gc(rb_objspace_t *objspace
     }
 }
 
+VALUE
+rb_gc_enable_stats(void)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    int old = collect_gc_stats;
+    collect_gc_stats = 1;
+    return old ? Qtrue : Qfalse;
+}
+
+static VALUE
+gc_enable_stats(rb_execution_context_t *ec, VALUE _)
+{
+    return rb_gc_enable_stats();
+}
+
+VALUE
+rb_gc_disable_stats(void)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    int old = collect_gc_stats;
+    collect_gc_stats = 0;
+    return old ? Qtrue : Qfalse;
+}
+
+static VALUE
+gc_disable_stats(rb_execution_context_t *ec, VALUE _)
+{
+    return rb_gc_disable_stats();
+}
+
+
+VALUE
+rb_gc_stats_enabled(void)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    return collect_gc_stats ? Qtrue : Qfalse;
+}
+
+static VALUE
+gc_stats_enabled(rb_execution_context_t *ec, VALUE _)
+{
+    return rb_gc_stats_enabled();
+}
+
+double rb_gc_total_time(void)
+{
+    return rb_objspace.profile.time;
+}
+
+static VALUE
+gc_time(rb_execution_context_t *ec, VALUE _)
+{
+    return DBL2NUM(1000000*rb_objspace.profile.time);
+}
+
+VALUE
+rb_gc_heap_slots(void)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    return SIZET2NUM(heap_allocated_pages * HEAP_PAGE_OBJ_LIMIT);
+}
+
+static
+VALUE gc_heap_slots(rb_execution_context_t *ec, VALUE _)
+{
+    return rb_gc_heap_slots();
+}
+
+VALUE
+rb_gc_heap_slots_live_after_last_gc(void)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    return SIZET2NUM(objspace->profile.live_after_last_sweep);
+}
+
+static
+VALUE gc_heap_slots_live_after_last_gc(rb_execution_context_t *ec, VALUE _)
+{
+    return rb_gc_heap_slots_live_after_last_gc();
+}
+
+size_t rb_gc_total_mallocs(void) {
+    return rb_objspace.profile.total_mallocs;
+}
+
+static VALUE
+gc_total_mallocs(rb_execution_context_t *ec, VALUE _)
+{
+    return SIZET2NUM(rb_objspace.profile.total_mallocs);
+}
+
+size_t rb_gc_total_malloced_bytes(void) {
+    return rb_objspace.profile.total_malloced_bytes;
+}
+
+static VALUE
+gc_total_malloced_bytes(rb_execution_context_t *ec, VALUE _)
+{
+    return SIZET2NUM(rb_objspace.profile.total_malloced_bytes);
+}
+
 static int
 ready_to_gc(rb_objspace_t *objspace)
 {
@@ -12433,6 +12544,10 @@ objspace_malloc_increase_body(rb_objspac
 {
     if (new_size > old_size) {
         ATOMIC_SIZE_ADD(malloc_increase, new_size - old_size);
+        if (collect_gc_stats) {
+            ATOMIC_SIZE_ADD(objspace->profile.total_mallocs, 1);
+            ATOMIC_SIZE_ADD(objspace->profile.total_malloced_bytes, new_size - old_size);
+        }
 #if RGENGC_ESTIMATE_OLDMALLOC
         ATOMIC_SIZE_ADD(objspace->rgengc.oldmalloc_increase, new_size - old_size);
 #endif
@@ -13080,6 +13195,12 @@ gc_malloc_allocated_size(VALUE self)
     return UINT2NUM(rb_objspace.malloc_params.allocated_size);
 }
 
+size_t
+rb_gc_malloc_allocated_size(void)
+{
+    return rb_objspace.malloc_params.allocated_size;
+}
+
 /*
  *  call-seq:
  *     GC.malloc_allocations -> Integer
@@ -13094,6 +13215,12 @@ gc_malloc_allocations(VALUE self)
 {
     return UINT2NUM(rb_objspace.malloc_params.allocations);
 }
+
+size_t
+rb_gc_malloc_allocations(void)
+{
+    return rb_objspace.malloc_params.allocations;
+}
 #endif
 
 void
@@ -13266,6 +13393,14 @@ gc_prof_mark_timer_start(rb_objspace_t *
 #if GC_PROFILE_MORE_DETAIL
     if (gc_prof_enabled(objspace)) {
         gc_prof_record(objspace)->gc_mark_time = getrusage_time();
+    } else {
+        if (collect_gc_stats) {
+          objspace->profile.gc_mark_start_time = getrusage_time();
+        }
+    }
+#else
+    if (collect_gc_stats) {
+        objspace->profile.gc_mark_start_time = getrusage_time();
     }
 #endif
 }
@@ -13278,6 +13413,17 @@ gc_prof_mark_timer_stop(rb_objspace_t *o
     if (gc_prof_enabled(objspace)) {
         gc_profile_record *record = gc_prof_record(objspace);
         record->gc_mark_time = elapsed_time_from(record->gc_mark_time);
+        if (collect_gc_stats) {
+            objspace->profile.time += record->gc_mark_time;
+        }
+    } else {
+        if (collect_gc_stats) {
+            objspace->profile.time += elapsed_time_from(objspace->profile.gc_mark_start_time);
+        }
+    }
+#else
+    if (collect_gc_stats) {
+        objspace->profile.time += elapsed_time_from(objspace->profile.gc_mark_start_time);
     }
 #endif
 }
@@ -13289,7 +13435,11 @@ gc_prof_sweep_timer_start(rb_objspace_t
     if (gc_prof_enabled(objspace)) {
         gc_profile_record *record = gc_prof_record(objspace);
 
-        if (record->gc_time > 0 || GC_PROFILE_MORE_DETAIL) {
+        if (record->gc_time > 0 || GC_PROFILE_MORE_DETAIL || collect_gc_stats) {
+            objspace->profile.gc_sweep_start_time = getrusage_time();
+        }
+    } else {
+        if (collect_gc_stats) {
             objspace->profile.gc_sweep_start_time = getrusage_time();
         }
     }
@@ -13308,9 +13458,19 @@ gc_prof_sweep_timer_stop(rb_objspace_t *
             sweep_time = elapsed_time_from(objspace->profile.gc_sweep_start_time);
             /* need to accumulate GC time for lazy sweep after gc() */
             record->gc_time += sweep_time;
+            if (collect_gc_stats) {
+                objspace->profile.time += sweep_time;
+            }
         }
         else if (GC_PROFILE_MORE_DETAIL) {
             sweep_time = elapsed_time_from(objspace->profile.gc_sweep_start_time);
+            if (collect_gc_stats) {
+		objspace->profile.time += sweep_time;
+	    }
+	} else {
+	    if (collect_gc_stats) {
+		objspace->profile.time += elapsed_time_from(objspace->profile.gc_sweep_start_time);
+	    }
         }
 
 #if GC_PROFILE_MORE_DETAIL
@@ -13318,6 +13478,10 @@ gc_prof_sweep_timer_stop(rb_objspace_t *
         if (heap_pages_deferred_final) record->flags |= GPR_FLAG_HAVE_FINALIZE;
 #endif
         if (heap_pages_deferred_final) objspace->profile.latest_gc_info |= GPR_FLAG_HAVE_FINALIZE;
+    } else {
+        if (collect_gc_stats) {
+            objspace->profile.time += elapsed_time_from(objspace->profile.gc_sweep_start_time);
+        }
     }
 }
 
@@ -13336,9 +13500,13 @@ gc_prof_set_malloc_info(rb_objspace_t *o
 static inline void
 gc_prof_set_heap_info(rb_objspace_t *objspace)
 {
+    if (objspace->profile.total_allocated_objects_at_gc_start > total_freed_objects(objspace))
+	objspace->profile.live_after_last_sweep =
+	    objspace->profile.total_allocated_objects_at_gc_start - total_freed_objects(objspace);
+
     if (gc_prof_enabled(objspace)) {
         gc_profile_record *record = gc_prof_record(objspace);
-        size_t live = objspace->profile.total_allocated_objects_at_gc_start - total_freed_objects(objspace);
+        size_t live = objspace->profile.live_after_last_sweep;
         size_t total = objspace->profile.heap_used_at_gc_start * HEAP_PAGE_OBJ_LIMIT;
 
 #if GC_PROFILE_MORE_DETAIL
diff -Nuarp ruby-3.3.3.a/gc.rb ruby-3.3.3.b/gc.rb
--- ruby-3.3.3.a/gc.rb	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/gc.rb	2024-07-15 21:17:45.248237272 -0400
@@ -320,6 +320,92 @@ module GC
       ULL2NUM(rb_objspace.profile.marking_time_ns + rb_objspace.profile.sweeping_time_ns)
     }
   end
+
+  # call-seq:
+  #    GC.enable_stats	  => true or false
+  #
+  # Enables garbage collection statistics, returning <code>true</code> if garbage
+  # collection statistics was already enabled.
+  #
+  #    GC.enable_stats	 #=> false or true
+  #    GC.enable_stats	 #=> true
+  def self.enable_stats
+    Primitive.gc_enable_stats
+  end
+
+  #   call-seq:
+  #    GC.disable_stats	   => true or false
+  #
+  # Disables garbage collection statistics, returning <code>true</code> if garbage
+  # collection statistics was already disabled.
+  #
+  #    GC.disable_stats	  #=> false or true
+  #    GC.disable_stats	  #=> true
+  def self.disable_stats
+    Primitive.gc_disable_stats
+  end
+
+  # call-seq:
+  #    GC.stats_enabled?    => true or false
+  #
+  # Check whether GC stats have been enabled.
+  #
+  #    GC.stats_enabled?   #=> false or true
+  def self.stats_enabled?
+    Primitive.gc_stats_enabled
+  end
+
+  #   call-seq:
+  #    GC.time	  => Integer
+  #
+  # Returns the time spent during garbage collection while GC statistics collection
+  # was enabled (in micro seconds).
+  #
+  #    GC.time	  #=> 20000
+  def self.time
+    Primitive.gc_time
+  end
+
+  #  call-seq:
+  #	GC.heap_slots	=> Integer
+  #
+  #  Returns the number of heap slots available for object allocations.
+  #
+  #	GC.heap_slots	#=> 10000
+  def self.heap_slots
+    Primitive.gc_heap_slots
+  end
+
+  # call-seq:
+  #    GC.heap_slots_live_after_last_gc	   => Integer
+  #
+  # Returns the number of heap slots which were live after the last garbage collection.
+  #
+  #    GC.heap_slots_live_after_last_gc	   #=> 231223
+  def self.heap_slots_live_after_last_gc
+    Primitive.gc_heap_slots_live_after_last_gc
+  end
+
+  #   call-seq:
+  #	 GC.total_mallocs	   => Integer
+  #
+  #   Returns the number malloc calls. Might wrap around.
+  #
+  #	 GC.total_mallocs	   #=> 324234323246
+  def self.total_mallocs
+    Primitive.gc_total_mallocs
+  end
+
+  #   call-seq:
+  #	 GC.total_malloced_bytes	   => Integer
+  #
+  #   Returns the number of bytes allocated. Might wrap around.
+  #
+  #	 GC.total_malloced_bytes	   #=> 354656256432446
+  def self.total_malloced_bytes
+    Primitive.gc_total_malloced_bytes
+  end
+
 end
 
 module ObjectSpace
diff -Nuarp ruby-3.3.3.a/gc.rbinc ruby-3.3.3.b/gc.rbinc
--- ruby-3.3.3.a/gc.rbinc	2024-06-11 19:54:26.000000000 -0400
+++ ruby-3.3.3.b/gc.rbinc	2024-07-15 21:17:53.011959878 -0400
@@ -52,6 +52,14 @@ void Init_builtin_gc(void)
     RB_BUILTIN_FUNCTION(10, _bi0, builtin_inline_class_297, 0),
     RB_BUILTIN_FUNCTION(11, _bi1, builtin_inline_class_309, 0),
     RB_BUILTIN_FUNCTION(12, _bi2, builtin_inline_class_319, 0),
+    RB_BUILTIN_FUNCTION(13, gc_enable_stats, gc_enable_stats, 0),
+    RB_BUILTIN_FUNCTION(14, gc_disable_stats, gc_disable_stats, 0),
+    RB_BUILTIN_FUNCTION(15, gc_stats_enabled, gc_stats_enabled, 0),
+    RB_BUILTIN_FUNCTION(16, gc_time, gc_time, 0),
+    RB_BUILTIN_FUNCTION(17, gc_heap_slots, gc_heap_slots, 0),
+    RB_BUILTIN_FUNCTION(18, gc_heap_slots_live_after_last_gc, gc_heap_slots_live_after_last_gc, 0),
+    RB_BUILTIN_FUNCTION(19, gc_total_mallocs, gc_total_mallocs, 0),
+    RB_BUILTIN_FUNCTION(20, gc_total_malloced_bytes, gc_total_malloced_bytes, 0),
     RB_BUILTIN_FUNCTION(-1, NULL, NULL, 0),
   };
 
@@ -73,6 +81,14 @@ COMPILER_WARNING_ERROR(-Wincompatible-po
   if (0) rb_builtin_function_check_arity0(builtin_inline_class_297);
   if (0) rb_builtin_function_check_arity0(builtin_inline_class_309);
   if (0) rb_builtin_function_check_arity0(builtin_inline_class_319);
+  if (0) rb_builtin_function_check_arity0(gc_enable_stats);
+  if (0) rb_builtin_function_check_arity0(gc_disable_stats);
+  if (0) rb_builtin_function_check_arity0(gc_stats_enabled);
+  if (0) rb_builtin_function_check_arity0(gc_time);
+  if (0) rb_builtin_function_check_arity0(gc_heap_slots);
+  if (0) rb_builtin_function_check_arity0(gc_heap_slots_live_after_last_gc);
+  if (0) rb_builtin_function_check_arity0(gc_total_mallocs);
+  if (0) rb_builtin_function_check_arity0(gc_total_malloced_bytes);
 COMPILER_WARNING_POP
 
   // load
diff -Nuarp ruby-3.3.3.a/hash.c ruby-3.3.3.b/hash.c
--- ruby-3.3.3.a/hash.c	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/hash.c	2024-07-15 21:17:37.936498516 -0400
@@ -4382,30 +4382,18 @@ rb_hash_compare_by_id(VALUE hash)
     if (hash_iterating_p(hash)) {
         rb_raise(rb_eRuntimeError, "compare_by_identity during iteration");
     }
+    ar_force_convert_table(hash, __FILE__, __LINE__);
+    HASH_ASSERT(RHASH_ST_TABLE_P(hash));
 
-    if (RHASH_TABLE_EMPTY_P(hash)) {
-        // Fast path: There's nothing to rehash, so we don't need a `tmp` table.
-        // We're most likely an AR table, so this will need an allocation.
-        ar_force_convert_table(hash, __FILE__, __LINE__);
-        HASH_ASSERT(RHASH_ST_TABLE_P(hash));
+    tmp = hash_alloc(0);
+    hash_st_table_init(tmp, &identhash, RHASH_SIZE(hash));
+    identtable = RHASH_ST_TABLE(tmp);
 
-        RHASH_ST_TABLE(hash)->type = &identhash;
-    }
-    else {
-        // Slow path: Need to rehash the members of `self` into a new
-        // `tmp` table using the new `identhash` compare/hash functions.
-        tmp = hash_alloc(0);
-        hash_st_table_init(tmp, &identhash, RHASH_SIZE(hash));
-        identtable = RHASH_ST_TABLE(tmp);
-
-        rb_hash_foreach(hash, rb_hash_rehash_i, (VALUE)tmp);
-        rb_hash_free(hash);
+    rb_hash_foreach(hash, rb_hash_rehash_i, (VALUE)tmp);
 
-        // We know for sure `identtable` is an st table,
-        // so we can skip `ar_force_convert_table` here.
-        RHASH_ST_TABLE_SET(hash, identtable);
-        RHASH_ST_CLEAR(tmp);
-    }
+    rb_hash_free(hash);
+    RHASH_ST_TABLE_SET(hash, identtable);
+    RHASH_ST_CLEAR(tmp);
 
     return hash;
 }
diff -Nuarp ruby-3.3.3.a/hash.c.orig ruby-3.3.3.b/hash.c.orig
--- ruby-3.3.3.a/hash.c.orig	1969-12-31 19:00:00.000000000 -0500
+++ ruby-3.3.3.b/hash.c.orig	2024-07-15 21:16:22.751184851 -0400
@@ -0,0 +1,7463 @@
+/**********************************************************************
+
+  hash.c -
+
+  $Author$
+  created at: Mon Nov 22 18:51:18 JST 1993
+
+  Copyright (C) 1993-2007 Yukihiro Matsumoto
+  Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
+  Copyright (C) 2000  Information-technology Promotion Agency, Japan
+
+**********************************************************************/
+
+#include "ruby/internal/config.h"
+
+#include <errno.h>
+
+#ifdef __APPLE__
+# ifdef HAVE_CRT_EXTERNS_H
+#  include <crt_externs.h>
+# else
+#  include "missing/crt_externs.h"
+# endif
+#endif
+
+#include "debug_counter.h"
+#include "id.h"
+#include "internal.h"
+#include "internal/array.h"
+#include "internal/bignum.h"
+#include "internal/basic_operators.h"
+#include "internal/class.h"
+#include "internal/cont.h"
+#include "internal/error.h"
+#include "internal/hash.h"
+#include "internal/object.h"
+#include "internal/proc.h"
+#include "internal/symbol.h"
+#include "internal/thread.h"
+#include "internal/time.h"
+#include "internal/vm.h"
+#include "probes.h"
+#include "ruby/st.h"
+#include "ruby/util.h"
+#include "ruby_assert.h"
+#include "symbol.h"
+#include "ruby/thread_native.h"
+#include "ruby/ractor.h"
+#include "vm_sync.h"
+
+/* Flags of RHash
+ *
+ * 1:     RHASH_PASS_AS_KEYWORDS
+ *            The hash is flagged as Ruby 2 keywords hash.
+ * 2:     RHASH_PROC_DEFAULT
+ *            The hash has a default proc (rather than a default value).
+ * 3:     RHASH_ST_TABLE_FLAG
+ *            The hash uses a ST table (rather than an AR table).
+ * 4-7:   RHASH_AR_TABLE_SIZE_MASK
+ *            The size of the AR table.
+ * 8-11:  RHASH_AR_TABLE_BOUND_MASK
+ *            The bounds of the AR table.
+ * 13-19: RHASH_LEV_MASK
+ *            The iterational level of the hash. Used to prevent modifications
+ *            to the hash during interation.
+ */
+
+#ifndef HASH_DEBUG
+#define HASH_DEBUG 0
+#endif
+
+#if HASH_DEBUG
+#include "internal/gc.h"
+#endif
+
+#define SET_DEFAULT(hash, ifnone) ( \
+    FL_UNSET_RAW(hash, RHASH_PROC_DEFAULT), \
+    RHASH_SET_IFNONE(hash, ifnone))
+
+#define SET_PROC_DEFAULT(hash, proc) set_proc_default(hash, proc)
+
+#define COPY_DEFAULT(hash, hash2) copy_default(RHASH(hash), RHASH(hash2))
+
+static inline void
+copy_default(struct RHash *hash, const struct RHash *hash2)
+{
+    hash->basic.flags &= ~RHASH_PROC_DEFAULT;
+    hash->basic.flags |= hash2->basic.flags & RHASH_PROC_DEFAULT;
+    RHASH_SET_IFNONE(hash, RHASH_IFNONE((VALUE)hash2));
+}
+
+static VALUE rb_hash_s_try_convert(VALUE, VALUE);
+
+/*
+ * Hash WB strategy:
+ *  1. Check mutate st_* functions
+ *     * st_insert()
+ *     * st_insert2()
+ *     * st_update()
+ *     * st_add_direct()
+ *  2. Insert WBs
+ */
+
+VALUE
+rb_hash_freeze(VALUE hash)
+{
+    return rb_obj_freeze(hash);
+}
+
+VALUE rb_cHash;
+
+static VALUE envtbl;
+static ID id_hash, id_flatten_bang;
+static ID id_hash_iter_lev;
+
+#define id_default idDefault
+
+VALUE
+rb_hash_set_ifnone(VALUE hash, VALUE ifnone)
+{
+    RB_OBJ_WRITE(hash, (&RHASH(hash)->ifnone), ifnone);
+    return hash;
+}
+
+int
+rb_any_cmp(VALUE a, VALUE b)
+{
+    if (a == b) return 0;
+    if (RB_TYPE_P(a, T_STRING) && RBASIC(a)->klass == rb_cString &&
+        RB_TYPE_P(b, T_STRING) && RBASIC(b)->klass == rb_cString) {
+        return rb_str_hash_cmp(a, b);
+    }
+    if (UNDEF_P(a) || UNDEF_P(b)) return -1;
+    if (SYMBOL_P(a) && SYMBOL_P(b)) {
+        return a != b;
+    }
+
+    return !rb_eql(a, b);
+}
+
+static VALUE
+hash_recursive(VALUE obj, VALUE arg, int recurse)
+{
+    if (recurse) return INT2FIX(0);
+    return rb_funcallv(obj, id_hash, 0, 0);
+}
+
+static long rb_objid_hash(st_index_t index);
+
+static st_index_t
+dbl_to_index(double d)
+{
+    union {double d; st_index_t i;} u;
+    u.d = d;
+    return u.i;
+}
+
+long
+rb_dbl_long_hash(double d)
+{
+    /* normalize -0.0 to 0.0 */
+    if (d == 0.0) d = 0.0;
+#if SIZEOF_INT == SIZEOF_VOIDP
+    return rb_memhash(&d, sizeof(d));
+#else
+    return rb_objid_hash(dbl_to_index(d));
+#endif
+}
+
+static inline long
+any_hash(VALUE a, st_index_t (*other_func)(VALUE))
+{
+    VALUE hval;
+    st_index_t hnum;
+
+    switch (TYPE(a)) {
+      case T_SYMBOL:
+        if (STATIC_SYM_P(a)) {
+            hnum = a >> (RUBY_SPECIAL_SHIFT + ID_SCOPE_SHIFT);
+            hnum = rb_hash_start(hnum);
+        }
+        else {
+            hnum = RSYMBOL(a)->hashval;
+        }
+        break;
+      case T_FIXNUM:
+      case T_TRUE:
+      case T_FALSE:
+      case T_NIL:
+        hnum = rb_objid_hash((st_index_t)a);
+        break;
+      case T_STRING:
+        hnum = rb_str_hash(a);
+        break;
+      case T_BIGNUM:
+        hval = rb_big_hash(a);
+        hnum = FIX2LONG(hval);
+        break;
+      case T_FLOAT: /* prevent pathological behavior: [Bug #10761] */
+        hnum = rb_dbl_long_hash(rb_float_value(a));
+        break;
+      default:
+        hnum = other_func(a);
+    }
+    if ((SIGNED_VALUE)hnum > 0)
+        hnum &= FIXNUM_MAX;
+    else
+        hnum |= FIXNUM_MIN;
+    return (long)hnum;
+}
+
+static st_index_t
+obj_any_hash(VALUE obj)
+{
+    VALUE hval = rb_check_funcall_basic_kw(obj, id_hash, rb_mKernel, 0, 0, 0);
+
+    if (UNDEF_P(hval)) {
+        hval = rb_exec_recursive_outer_mid(hash_recursive, obj, 0, id_hash);
+    }
+
+    while (!FIXNUM_P(hval)) {
+        if (RB_TYPE_P(hval, T_BIGNUM)) {
+            int sign;
+            unsigned long ul;
+            sign = rb_integer_pack(hval, &ul, 1, sizeof(ul), 0,
+                    INTEGER_PACK_NATIVE_BYTE_ORDER);
+            if (sign < 0) {
+                hval = LONG2FIX(ul | FIXNUM_MIN);
+            }
+            else {
+                hval = LONG2FIX(ul & FIXNUM_MAX);
+            }
+        }
+        hval = rb_to_int(hval);
+    }
+
+    return FIX2LONG(hval);
+}
+
+st_index_t
+rb_any_hash(VALUE a)
+{
+    return any_hash(a, obj_any_hash);
+}
+
+VALUE
+rb_hash(VALUE obj)
+{
+    return LONG2FIX(any_hash(obj, obj_any_hash));
+}
+
+
+/* Here is a hash function for 64-bit key.  It is about 5 times faster
+   (2 times faster when uint128 type is absent) on Haswell than
+   tailored Spooky or City hash function can be.  */
+
+/* Here we two primes with random bit generation.  */
+static const uint64_t prime1 = ((uint64_t)0x2e0bb864 << 32) | 0xe9ea7df5;
+static const uint32_t prime2 = 0x830fcab9;
+
+
+static inline uint64_t
+mult_and_mix(uint64_t m1, uint64_t m2)
+{
+#if defined HAVE_UINT128_T
+    uint128_t r = (uint128_t) m1 * (uint128_t) m2;
+    return (uint64_t) (r >> 64) ^ (uint64_t) r;
+#else
+    uint64_t hm1 = m1 >> 32, hm2 = m2 >> 32;
+    uint64_t lm1 = m1, lm2 = m2;
+    uint64_t v64_128 = hm1 * hm2;
+    uint64_t v32_96 = hm1 * lm2 + lm1 * hm2;
+    uint64_t v1_32 = lm1 * lm2;
+
+    return (v64_128 + (v32_96 >> 32)) ^ ((v32_96 << 32) + v1_32);
+#endif
+}
+
+static inline uint64_t
+key64_hash(uint64_t key, uint32_t seed)
+{
+    return mult_and_mix(key + seed, prime1);
+}
+
+/* Should cast down the result for each purpose */
+#define st_index_hash(index) key64_hash(rb_hash_start(index), prime2)
+
+static long
+rb_objid_hash(st_index_t index)
+{
+    return (long)st_index_hash(index);
+}
+
+static st_index_t
+objid_hash(VALUE obj)
+{
+    VALUE object_id = rb_obj_id(obj);
+    if (!FIXNUM_P(object_id))
+        object_id = rb_big_hash(object_id);
+
+#if SIZEOF_LONG == SIZEOF_VOIDP
+    return (st_index_t)st_index_hash((st_index_t)NUM2LONG(object_id));
+#elif SIZEOF_LONG_LONG == SIZEOF_VOIDP
+    return (st_index_t)st_index_hash((st_index_t)NUM2LL(object_id));
+#endif
+}
+
+/**
+ * call-seq:
+ *    obj.hash    -> integer
+ *
+ * Generates an Integer hash value for this object.  This function must have the
+ * property that <code>a.eql?(b)</code> implies <code>a.hash == b.hash</code>.
+ *
+ * The hash value is used along with #eql? by the Hash class to determine if
+ * two objects reference the same hash key.  Any hash value that exceeds the
+ * capacity of an Integer will be truncated before being used.
+ *
+ * The hash value for an object may not be identical across invocations or
+ * implementations of Ruby.  If you need a stable identifier across Ruby
+ * invocations and implementations you will need to generate one with a custom
+ * method.
+ *
+ * Certain core classes such as Integer use built-in hash calculations and
+ * do not call the #hash method when used as a hash key.
+ *
+ * When implementing your own #hash based on multiple values, the best
+ * practice is to combine the class and any values using the hash code of an
+ * array:
+ *
+ * For example:
+ *
+ *   def hash
+ *     [self.class, a, b, c].hash
+ *   end
+ *
+ * The reason for this is that the Array#hash method already has logic for
+ * safely and efficiently combining multiple hash values.
+ *--
+ * \private
+ *++
+ */
+VALUE
+rb_obj_hash(VALUE obj)
+{
+    long hnum = any_hash(obj, objid_hash);
+    return ST2FIX(hnum);
+}
+
+static const struct st_hash_type objhash = {
+    rb_any_cmp,
+    rb_any_hash,
+};
+
+#define rb_ident_cmp st_numcmp
+
+static st_index_t
+rb_ident_hash(st_data_t n)
+{
+#ifdef USE_FLONUM /* RUBY */
+    /*
+     * - flonum (on 64-bit) is pathologically bad, mix the actual
+     *   float value in, but do not use the float value as-is since
+     *   many integers get interpreted as 2.0 or -2.0 [Bug #10761]
+     */
+    if (FLONUM_P(n)) {
+        n ^= dbl_to_index(rb_float_value(n));
+    }
+#endif
+
+    return (st_index_t)st_index_hash((st_index_t)n);
+}
+
+#define identhash rb_hashtype_ident
+const struct st_hash_type rb_hashtype_ident = {
+    rb_ident_cmp,
+    rb_ident_hash,
+};
+
+#define RHASH_IDENTHASH_P(hash) (RHASH_TYPE(hash) == &identhash)
+#define RHASH_STRING_KEY_P(hash, key) (!RHASH_IDENTHASH_P(hash) && (rb_obj_class(key) == rb_cString))
+
+typedef st_index_t st_hash_t;
+
+/*
+ * RHASH_AR_TABLE_P(h):
+ *   RHASH_AR_TABLE points to ar_table.
+ *
+ * !RHASH_AR_TABLE_P(h):
+ *   RHASH_ST_TABLE points st_table.
+ */
+
+#define RHASH_AR_TABLE_MAX_BOUND     RHASH_AR_TABLE_MAX_SIZE
+
+#define RHASH_AR_TABLE_REF(hash, n) (&RHASH_AR_TABLE(hash)->pairs[n])
+#define RHASH_AR_CLEARED_HINT 0xff
+
+static inline st_hash_t
+ar_do_hash(st_data_t key)
+{
+    return (st_hash_t)rb_any_hash(key);
+}
+
+static inline ar_hint_t
+ar_do_hash_hint(st_hash_t hash_value)
+{
+    return (ar_hint_t)hash_value;
+}
+
+static inline ar_hint_t
+ar_hint(VALUE hash, unsigned int index)
+{
+    return RHASH_AR_TABLE(hash)->ar_hint.ary[index];
+}
+
+static inline void
+ar_hint_set_hint(VALUE hash, unsigned int index, ar_hint_t hint)
+{
+    RHASH_AR_TABLE(hash)->ar_hint.ary[index] = hint;
+}
+
+static inline void
+ar_hint_set(VALUE hash, unsigned int index, st_hash_t hash_value)
+{
+    ar_hint_set_hint(hash, index, ar_do_hash_hint(hash_value));
+}
+
+static inline void
+ar_clear_entry(VALUE hash, unsigned int index)
+{
+    ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, index);
+    pair->key = Qundef;
+    ar_hint_set_hint(hash, index, RHASH_AR_CLEARED_HINT);
+}
+
+static inline int
+ar_cleared_entry(VALUE hash, unsigned int index)
+{
+    if (ar_hint(hash, index) == RHASH_AR_CLEARED_HINT) {
+        /* RHASH_AR_CLEARED_HINT is only a hint, not mean cleared entry,
+         * so you need to check key == Qundef
+         */
+        ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, index);
+        return UNDEF_P(pair->key);
+    }
+    else {
+        return FALSE;
+    }
+}
+
+static inline void
+ar_set_entry(VALUE hash, unsigned int index, st_data_t key, st_data_t val, st_hash_t hash_value)
+{
+    ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, index);
+    pair->key = key;
+    pair->val = val;
+    ar_hint_set(hash, index, hash_value);
+}
+
+#define RHASH_AR_TABLE_SIZE(h) (HASH_ASSERT(RHASH_AR_TABLE_P(h)), \
+                                RHASH_AR_TABLE_SIZE_RAW(h))
+
+#define RHASH_AR_TABLE_BOUND_RAW(h) \
+  ((unsigned int)((RBASIC(h)->flags >> RHASH_AR_TABLE_BOUND_SHIFT) & \
+                  (RHASH_AR_TABLE_BOUND_MASK >> RHASH_AR_TABLE_BOUND_SHIFT)))
+
+#define RHASH_ST_TABLE_SET(h, s)  rb_hash_st_table_set(h, s)
+#define RHASH_TYPE(hash) (RHASH_AR_TABLE_P(hash) ? &objhash : RHASH_ST_TABLE(hash)->type)
+
+#define HASH_ASSERT(expr) RUBY_ASSERT_MESG_WHEN(HASH_DEBUG, expr, #expr)
+
+static inline unsigned int
+RHASH_AR_TABLE_BOUND(VALUE h)
+{
+    HASH_ASSERT(RHASH_AR_TABLE_P(h));
+    const unsigned int bound = RHASH_AR_TABLE_BOUND_RAW(h);
+    HASH_ASSERT(bound <= RHASH_AR_TABLE_MAX_SIZE);
+    return bound;
+}
+
+#if HASH_DEBUG
+#define hash_verify(hash) hash_verify_(hash, __FILE__, __LINE__)
+
+void
+rb_hash_dump(VALUE hash)
+{
+    rb_obj_info_dump(hash);
+
+    if (RHASH_AR_TABLE_P(hash)) {
+        unsigned i, bound = RHASH_AR_TABLE_BOUND(hash);
+
+        fprintf(stderr, "  size:%u bound:%u\n",
+                RHASH_AR_TABLE_SIZE(hash), bound);
+
+        for (i=0; i<bound; i++) {
+            st_data_t k, v;
+
+            if (!ar_cleared_entry(hash, i)) {
+                char b1[0x100], b2[0x100];
+                ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, i);
+                k = pair->key;
+                v = pair->val;
+                fprintf(stderr, "  %d key:%s val:%s hint:%02x\n", i,
+                        rb_raw_obj_info(b1, 0x100, k),
+                        rb_raw_obj_info(b2, 0x100, v),
+                        ar_hint(hash, i));
+            }
+            else {
+                fprintf(stderr, "  %d empty\n", i);
+            }
+        }
+    }
+}
+
+static VALUE
+hash_verify_(VALUE hash, const char *file, int line)
+{
+    HASH_ASSERT(RB_TYPE_P(hash, T_HASH));
+
+    if (RHASH_AR_TABLE_P(hash)) {
+        unsigned i, n = 0, bound = RHASH_AR_TABLE_BOUND(hash);
+
+        for (i=0; i<bound; i++) {
+            st_data_t k, v;
+            if (!ar_cleared_entry(hash, i)) {
+                ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, i);
+                k = pair->key;
+                v = pair->val;
+                HASH_ASSERT(!UNDEF_P(k));
+                HASH_ASSERT(!UNDEF_P(v));
+                n++;
+            }
+        }
+        if (n != RHASH_AR_TABLE_SIZE(hash)) {
+            rb_bug("n:%u, RHASH_AR_TABLE_SIZE:%u", n, RHASH_AR_TABLE_SIZE(hash));
+        }
+    }
+    else {
+        HASH_ASSERT(RHASH_ST_TABLE(hash) != NULL);
+        HASH_ASSERT(RHASH_AR_TABLE_SIZE_RAW(hash) == 0);
+        HASH_ASSERT(RHASH_AR_TABLE_BOUND_RAW(hash) == 0);
+    }
+
+    return hash;
+}
+
+#else
+#define hash_verify(h) ((void)0)
+#endif
+
+static inline int
+RHASH_TABLE_EMPTY_P(VALUE hash)
+{
+    return RHASH_SIZE(hash) == 0;
+}
+
+#define RHASH_SET_ST_FLAG(h)          FL_SET_RAW(h, RHASH_ST_TABLE_FLAG)
+#define RHASH_UNSET_ST_FLAG(h)        FL_UNSET_RAW(h, RHASH_ST_TABLE_FLAG)
+
+static void
+hash_st_table_init(VALUE hash, const struct st_hash_type *type, st_index_t size)
+{
+    st_init_existing_table_with_size(RHASH_ST_TABLE(hash), type, size);
+    RHASH_SET_ST_FLAG(hash);
+}
+
+void
+rb_hash_st_table_set(VALUE hash, st_table *st)
+{
+    HASH_ASSERT(st != NULL);
+    RHASH_SET_ST_FLAG(hash);
+
+    *RHASH_ST_TABLE(hash) = *st;
+}
+
+static inline void
+RHASH_AR_TABLE_BOUND_SET(VALUE h, st_index_t n)
+{
+    HASH_ASSERT(RHASH_AR_TABLE_P(h));
+    HASH_ASSERT(n <= RHASH_AR_TABLE_MAX_BOUND);
+
+    RBASIC(h)->flags &= ~RHASH_AR_TABLE_BOUND_MASK;
+    RBASIC(h)->flags |= n << RHASH_AR_TABLE_BOUND_SHIFT;
+}
+
+static inline void
+RHASH_AR_TABLE_SIZE_SET(VALUE h, st_index_t n)
+{
+    HASH_ASSERT(RHASH_AR_TABLE_P(h));
+    HASH_ASSERT(n <= RHASH_AR_TABLE_MAX_SIZE);
+
+    RBASIC(h)->flags &= ~RHASH_AR_TABLE_SIZE_MASK;
+    RBASIC(h)->flags |= n << RHASH_AR_TABLE_SIZE_SHIFT;
+}
+
+static inline void
+HASH_AR_TABLE_SIZE_ADD(VALUE h, st_index_t n)
+{
+    HASH_ASSERT(RHASH_AR_TABLE_P(h));
+
+    RHASH_AR_TABLE_SIZE_SET(h, RHASH_AR_TABLE_SIZE(h) + n);
+
+    hash_verify(h);
+}
+
+#define RHASH_AR_TABLE_SIZE_INC(h) HASH_AR_TABLE_SIZE_ADD(h, 1)
+
+static inline void
+RHASH_AR_TABLE_SIZE_DEC(VALUE h)
+{
+    HASH_ASSERT(RHASH_AR_TABLE_P(h));
+    int new_size = RHASH_AR_TABLE_SIZE(h) - 1;
+
+    if (new_size != 0) {
+        RHASH_AR_TABLE_SIZE_SET(h, new_size);
+    }
+    else {
+        RHASH_AR_TABLE_SIZE_SET(h, 0);
+        RHASH_AR_TABLE_BOUND_SET(h, 0);
+    }
+    hash_verify(h);
+}
+
+static inline void
+RHASH_AR_TABLE_CLEAR(VALUE h)
+{
+    RBASIC(h)->flags &= ~RHASH_AR_TABLE_SIZE_MASK;
+    RBASIC(h)->flags &= ~RHASH_AR_TABLE_BOUND_MASK;
+
+    memset(RHASH_AR_TABLE(h), 0, sizeof(ar_table));
+}
+
+NOINLINE(static int ar_equal(VALUE x, VALUE y));
+
+static int
+ar_equal(VALUE x, VALUE y)
+{
+    return rb_any_cmp(x, y) == 0;
+}
+
+static unsigned
+ar_find_entry_hint(VALUE hash, ar_hint_t hint, st_data_t key)
+{
+    unsigned i, bound = RHASH_AR_TABLE_BOUND(hash);
+    const ar_hint_t *hints = RHASH_AR_TABLE(hash)->ar_hint.ary;
+
+    /* if table is NULL, then bound also should be 0 */
+
+    for (i = 0; i < bound; i++) {
+        if (hints[i] == hint) {
+            ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, i);
+            if (ar_equal(key, pair->key)) {
+                RB_DEBUG_COUNTER_INC(artable_hint_hit);
+                return i;
+            }
+            else {
+#if 0
+                static int pid;
+                static char fname[256];
+                static FILE *fp;
+
+                if (pid != getpid()) {
+                    snprintf(fname, sizeof(fname), "/tmp/ruby-armiss.%d", pid = getpid());
+                    if ((fp = fopen(fname, "w")) == NULL) rb_bug("fopen");
+                }
+
+                st_hash_t h1 = ar_do_hash(key);
+                st_hash_t h2 = ar_do_hash(pair->key);
+
+                fprintf(fp, "miss: hash_eq:%d hints[%d]:%02x hint:%02x\n"
+                            "      key      :%016lx %s\n"
+                            "      pair->key:%016lx %s\n",
+                        h1 == h2, i, hints[i], hint,
+                        h1, rb_obj_info(key), h2, rb_obj_info(pair->key));
+#endif
+                RB_DEBUG_COUNTER_INC(artable_hint_miss);
+            }
+        }
+    }
+    RB_DEBUG_COUNTER_INC(artable_hint_notfound);
+    return RHASH_AR_TABLE_MAX_BOUND;
+}
+
+static unsigned
+ar_find_entry(VALUE hash, st_hash_t hash_value, st_data_t key)
+{
+    ar_hint_t hint = ar_do_hash_hint(hash_value);
+    return ar_find_entry_hint(hash, hint, key);
+}
+
+static inline void
+hash_ar_free_and_clear_table(VALUE hash)
+{
+    RHASH_AR_TABLE_CLEAR(hash);
+
+    HASH_ASSERT(RHASH_AR_TABLE_SIZE(hash) == 0);
+    HASH_ASSERT(RHASH_AR_TABLE_BOUND(hash) == 0);
+}
+
+void rb_st_add_direct_with_hash(st_table *tab, st_data_t key, st_data_t value, st_hash_t hash); // st.c
+
+enum ar_each_key_type {
+    ar_each_key_copy,
+    ar_each_key_cmp,
+    ar_each_key_insert,
+};
+
+static inline int
+ar_each_key(ar_table *ar, int max, enum ar_each_key_type type, st_data_t *dst_keys, st_table *new_tab, st_hash_t *hashes)
+{
+    for (int i = 0; i < max; i++) {
+        ar_table_pair *pair = &ar->pairs[i];
+
+        switch (type) {
+          case ar_each_key_copy:
+            dst_keys[i] = pair->key;
+            break;
+          case ar_each_key_cmp:
+            if (dst_keys[i] != pair->key) return 1;
+            break;
+          case ar_each_key_insert:
+            if (UNDEF_P(pair->key)) continue; // deleted entry
+            rb_st_add_direct_with_hash(new_tab, pair->key, pair->val, hashes[i]);
+            break;
+        }
+    }
+
+    return 0;
+}
+
+static st_table *
+ar_force_convert_table(VALUE hash, const char *file, int line)
+{
+    if (RHASH_ST_TABLE_P(hash)) {
+        return RHASH_ST_TABLE(hash);
+    }
+    else {
+        ar_table *ar = RHASH_AR_TABLE(hash);
+        st_hash_t hashes[RHASH_AR_TABLE_MAX_SIZE];
+        unsigned int bound, size;
+
+        // prepare hash values
+        do {
+            st_data_t keys[RHASH_AR_TABLE_MAX_SIZE];
+            bound = RHASH_AR_TABLE_BOUND(hash);
+            size = RHASH_AR_TABLE_SIZE(hash);
+            ar_each_key(ar, bound, ar_each_key_copy, keys, NULL, NULL);
+
+            for (unsigned int i = 0; i < bound; i++) {
+                // do_hash calls #hash method and it can modify hash object
+                hashes[i] = UNDEF_P(keys[i]) ? 0 : ar_do_hash(keys[i]);
+            }
+
+            // check if modified
+            if (UNLIKELY(!RHASH_AR_TABLE_P(hash))) return RHASH_ST_TABLE(hash);
+            if (UNLIKELY(RHASH_AR_TABLE_BOUND(hash) != bound)) continue;
+            if (UNLIKELY(ar_each_key(ar, bound, ar_each_key_cmp, keys, NULL, NULL))) continue;
+        } while (0);
+
+        // make st
+        st_table tab;
+        st_table *new_tab = &tab;
+        rb_st_init_existing_table_with_size(new_tab, &objhash, size);
+        ar_each_key(ar, bound, ar_each_key_insert, NULL, new_tab, hashes);
+        hash_ar_free_and_clear_table(hash);
+        RHASH_ST_TABLE_SET(hash, new_tab);
+        return RHASH_ST_TABLE(hash);
+    }
+}
+
+static int
+ar_compact_table(VALUE hash)
+{
+    const unsigned bound = RHASH_AR_TABLE_BOUND(hash);
+    const unsigned size = RHASH_AR_TABLE_SIZE(hash);
+
+    if (size == bound) {
+        return size;
+    }
+    else {
+        unsigned i, j=0;
+        ar_table_pair *pairs = RHASH_AR_TABLE(hash)->pairs;
+
+        for (i=0; i<bound; i++) {
+            if (ar_cleared_entry(hash, i)) {
+                if (j <= i) j = i+1;
+                for (; j<bound; j++) {
+                    if (!ar_cleared_entry(hash, j)) {
+                        pairs[i] = pairs[j];
+                        ar_hint_set_hint(hash, i, (st_hash_t)ar_hint(hash, j));
+                        ar_clear_entry(hash, j);
+                        j++;
+                        goto found;
+                    }
+                }
+                /* non-empty is not found */
+                goto done;
+              found:;
+            }
+        }
+      done:
+        HASH_ASSERT(i<=bound);
+
+        RHASH_AR_TABLE_BOUND_SET(hash, size);
+        hash_verify(hash);
+        return size;
+    }
+}
+
+static int
+ar_add_direct_with_hash(VALUE hash, st_data_t key, st_data_t val, st_hash_t hash_value)
+{
+    unsigned bin = RHASH_AR_TABLE_BOUND(hash);
+
+    if (RHASH_AR_TABLE_SIZE(hash) >= RHASH_AR_TABLE_MAX_SIZE) {
+        return 1;
+    }
+    else {
+        if (UNLIKELY(bin >= RHASH_AR_TABLE_MAX_BOUND)) {
+            bin = ar_compact_table(hash);
+        }
+        HASH_ASSERT(bin < RHASH_AR_TABLE_MAX_BOUND);
+
+        ar_set_entry(hash, bin, key, val, hash_value);
+        RHASH_AR_TABLE_BOUND_SET(hash, bin+1);
+        RHASH_AR_TABLE_SIZE_INC(hash);
+        return 0;
+    }
+}
+
+static void
+ensure_ar_table(VALUE hash)
+{
+    if (!RHASH_AR_TABLE_P(hash)) {
+        rb_raise(rb_eRuntimeError, "hash representation was changed during iteration");
+    }
+}
+
+static int
+ar_general_foreach(VALUE hash, st_foreach_check_callback_func *func, st_update_callback_func *replace, st_data_t arg)
+{
+    if (RHASH_AR_TABLE_SIZE(hash) > 0) {
+        unsigned i, bound = RHASH_AR_TABLE_BOUND(hash);
+
+        for (i = 0; i < bound; i++) {
+            if (ar_cleared_entry(hash, i)) continue;
+
+            ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, i);
+            enum st_retval retval = (*func)(pair->key, pair->val, arg, 0);
+            ensure_ar_table(hash);
+            /* pair may be not valid here because of theap */
+
+            switch (retval) {
+              case ST_CONTINUE:
+                break;
+              case ST_CHECK:
+              case ST_STOP:
+                return 0;
+              case ST_REPLACE:
+                if (replace) {
+                    VALUE key = pair->key;
+                    VALUE val = pair->val;
+                    retval = (*replace)(&key, &val, arg, TRUE);
+
+                    // TODO: pair should be same as pair before.
+                    ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, i);
+                    pair->key = key;
+                    pair->val = val;
+                }
+                break;
+              case ST_DELETE:
+                ar_clear_entry(hash, i);
+                RHASH_AR_TABLE_SIZE_DEC(hash);
+                break;
+            }
+        }
+    }
+    return 0;
+}
+
+static int
+ar_foreach_with_replace(VALUE hash, st_foreach_check_callback_func *func, st_update_callback_func *replace, st_data_t arg)
+{
+    return ar_general_foreach(hash, func, replace, arg);
+}
+
+struct functor {
+    st_foreach_callback_func *func;
+    st_data_t arg;
+};
+
+static int
+apply_functor(st_data_t k, st_data_t v, st_data_t d, int _)
+{
+    const struct functor *f = (void *)d;
+    return f->func(k, v, f->arg);
+}
+
+static int
+ar_foreach(VALUE hash, st_foreach_callback_func *func, st_data_t arg)
+{
+    const struct functor f = { func, arg };
+    return ar_general_foreach(hash, apply_functor, NULL, (st_data_t)&f);
+}
+
+static int
+ar_foreach_check(VALUE hash, st_foreach_check_callback_func *func, st_data_t arg,
+                 st_data_t never)
+{
+    if (RHASH_AR_TABLE_SIZE(hash) > 0) {
+        unsigned i, ret = 0, bound = RHASH_AR_TABLE_BOUND(hash);
+        enum st_retval retval;
+        st_data_t key;
+        ar_table_pair *pair;
+        ar_hint_t hint;
+
+        for (i = 0; i < bound; i++) {
+            if (ar_cleared_entry(hash, i)) continue;
+
+            pair = RHASH_AR_TABLE_REF(hash, i);
+            key = pair->key;
+            hint = ar_hint(hash, i);
+
+            retval = (*func)(key, pair->val, arg, 0);
+            ensure_ar_table(hash);
+            hash_verify(hash);
+
+            switch (retval) {
+              case ST_CHECK: {
+                pair = RHASH_AR_TABLE_REF(hash, i);
+                if (pair->key == never) break;
+                ret = ar_find_entry_hint(hash, hint, key);
+                if (ret == RHASH_AR_TABLE_MAX_BOUND) {
+                    retval = (*func)(0, 0, arg, 1);
+                    return 2;
+                }
+              }
+              case ST_CONTINUE:
+                break;
+              case ST_STOP:
+              case ST_REPLACE:
+                return 0;
+              case ST_DELETE: {
+                if (!ar_cleared_entry(hash, i)) {
+                    ar_clear_entry(hash, i);
+                    RHASH_AR_TABLE_SIZE_DEC(hash);
+                }
+                break;
+              }
+            }
+        }
+    }
+    return 0;
+}
+
+static int
+ar_update(VALUE hash, st_data_t key,
+              st_update_callback_func *func, st_data_t arg)
+{
+    int retval, existing;
+    unsigned bin = RHASH_AR_TABLE_MAX_BOUND;
+    st_data_t value = 0, old_key;
+    st_hash_t hash_value = ar_do_hash(key);
+
+    if (UNLIKELY(!RHASH_AR_TABLE_P(hash))) {
+        // `#hash` changes ar_table -> st_table
+        return -1;
+    }
+
+    if (RHASH_AR_TABLE_SIZE(hash) > 0) {
+        bin = ar_find_entry(hash, hash_value, key);
+        existing = (bin != RHASH_AR_TABLE_MAX_BOUND) ? TRUE : FALSE;
+    }
+    else {
+        existing = FALSE;
+    }
+
+    if (existing) {
+        ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, bin);
+        key = pair->key;
+        value = pair->val;
+    }
+    old_key = key;
+    retval = (*func)(&key, &value, arg, existing);
+    /* pair can be invalid here because of theap */
+    ensure_ar_table(hash);
+
+    switch (retval) {
+      case ST_CONTINUE:
+        if (!existing) {
+            if (ar_add_direct_with_hash(hash, key, value, hash_value)) {
+                return -1;
+            }
+        }
+        else {
+            ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, bin);
+            if (old_key != key) {
+                pair->key = key;
+            }
+            pair->val = value;
+        }
+        break;
+      case ST_DELETE:
+        if (existing) {
+            ar_clear_entry(hash, bin);
+            RHASH_AR_TABLE_SIZE_DEC(hash);
+        }
+        break;
+    }
+    return existing;
+}
+
+static int
+ar_insert(VALUE hash, st_data_t key, st_data_t value)
+{
+    unsigned bin = RHASH_AR_TABLE_BOUND(hash);
+    st_hash_t hash_value = ar_do_hash(key);
+
+    if (UNLIKELY(!RHASH_AR_TABLE_P(hash))) {
+        // `#hash` changes ar_table -> st_table
+        return -1;
+    }
+
+    bin = ar_find_entry(hash, hash_value, key);
+    if (bin == RHASH_AR_TABLE_MAX_BOUND) {
+        if (RHASH_AR_TABLE_SIZE(hash) >= RHASH_AR_TABLE_MAX_SIZE) {
+            return -1;
+        }
+        else if (bin >= RHASH_AR_TABLE_MAX_BOUND) {
+            bin = ar_compact_table(hash);
+        }
+        HASH_ASSERT(bin < RHASH_AR_TABLE_MAX_BOUND);
+
+        ar_set_entry(hash, bin, key, value, hash_value);
+        RHASH_AR_TABLE_BOUND_SET(hash, bin+1);
+        RHASH_AR_TABLE_SIZE_INC(hash);
+        return 0;
+    }
+    else {
+        RHASH_AR_TABLE_REF(hash, bin)->val = value;
+        return 1;
+    }
+}
+
+static int
+ar_lookup(VALUE hash, st_data_t key, st_data_t *value)
+{
+    if (RHASH_AR_TABLE_SIZE(hash) == 0) {
+        return 0;
+    }
+    else {
+        st_hash_t hash_value = ar_do_hash(key);
+        if (UNLIKELY(!RHASH_AR_TABLE_P(hash))) {
+            // `#hash` changes ar_table -> st_table
+            return st_lookup(RHASH_ST_TABLE(hash), key, value);
+        }
+        unsigned bin = ar_find_entry(hash, hash_value, key);
+
+        if (bin == RHASH_AR_TABLE_MAX_BOUND) {
+            return 0;
+        }
+        else {
+            HASH_ASSERT(bin < RHASH_AR_TABLE_MAX_BOUND);
+            if (value != NULL) {
+                *value = RHASH_AR_TABLE_REF(hash, bin)->val;
+            }
+            return 1;
+        }
+    }
+}
+
+static int
+ar_delete(VALUE hash, st_data_t *key, st_data_t *value)
+{
+    unsigned bin;
+    st_hash_t hash_value = ar_do_hash(*key);
+
+    if (UNLIKELY(!RHASH_AR_TABLE_P(hash))) {
+        // `#hash` changes ar_table -> st_table
+        return st_delete(RHASH_ST_TABLE(hash), key, value);
+    }
+
+    bin = ar_find_entry(hash, hash_value, *key);
+
+    if (bin == RHASH_AR_TABLE_MAX_BOUND) {
+        if (value != 0) *value = 0;
+        return 0;
+    }
+    else {
+        if (value != 0) {
+            ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, bin);
+            *value = pair->val;
+        }
+        ar_clear_entry(hash, bin);
+        RHASH_AR_TABLE_SIZE_DEC(hash);
+        return 1;
+    }
+}
+
+static int
+ar_shift(VALUE hash, st_data_t *key, st_data_t *value)
+{
+    if (RHASH_AR_TABLE_SIZE(hash) > 0) {
+        unsigned i, bound = RHASH_AR_TABLE_BOUND(hash);
+
+        for (i = 0; i < bound; i++) {
+            if (!ar_cleared_entry(hash, i)) {
+                ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, i);
+                if (value != 0) *value = pair->val;
+                *key = pair->key;
+                ar_clear_entry(hash, i);
+                RHASH_AR_TABLE_SIZE_DEC(hash);
+                return 1;
+            }
+        }
+    }
+    if (value != NULL) *value = 0;
+    return 0;
+}
+
+static long
+ar_keys(VALUE hash, st_data_t *keys, st_index_t size)
+{
+    unsigned i, bound = RHASH_AR_TABLE_BOUND(hash);
+    st_data_t *keys_start = keys, *keys_end = keys + size;
+
+    for (i = 0; i < bound; i++) {
+        if (keys == keys_end) {
+          break;
+        }
+        else {
+            if (!ar_cleared_entry(hash, i)) {
+                *keys++ = RHASH_AR_TABLE_REF(hash, i)->key;
+            }
+        }
+    }
+
+    return keys - keys_start;
+}
+
+static long
+ar_values(VALUE hash, st_data_t *values, st_index_t size)
+{
+    unsigned i, bound = RHASH_AR_TABLE_BOUND(hash);
+    st_data_t *values_start = values, *values_end = values + size;
+
+    for (i = 0; i < bound; i++) {
+        if (values == values_end) {
+          break;
+        }
+        else {
+            if (!ar_cleared_entry(hash, i)) {
+                *values++ = RHASH_AR_TABLE_REF(hash, i)->val;
+            }
+        }
+    }
+
+    return values - values_start;
+}
+
+static ar_table*
+ar_copy(VALUE hash1, VALUE hash2)
+{
+    ar_table *old_tab = RHASH_AR_TABLE(hash2);
+    ar_table *new_tab = RHASH_AR_TABLE(hash1);
+
+    *new_tab = *old_tab;
+    RHASH_AR_TABLE(hash1)->ar_hint.word = RHASH_AR_TABLE(hash2)->ar_hint.word;
+    RHASH_AR_TABLE_BOUND_SET(hash1, RHASH_AR_TABLE_BOUND(hash2));
+    RHASH_AR_TABLE_SIZE_SET(hash1, RHASH_AR_TABLE_SIZE(hash2));
+
+    rb_gc_writebarrier_remember(hash1);
+
+    return new_tab;
+}
+
+static void
+ar_clear(VALUE hash)
+{
+    if (RHASH_AR_TABLE(hash) != NULL) {
+        RHASH_AR_TABLE_SIZE_SET(hash, 0);
+        RHASH_AR_TABLE_BOUND_SET(hash, 0);
+    }
+    else {
+        HASH_ASSERT(RHASH_AR_TABLE_SIZE(hash) == 0);
+        HASH_ASSERT(RHASH_AR_TABLE_BOUND(hash) == 0);
+    }
+}
+
+static void
+hash_st_free(VALUE hash)
+{
+    HASH_ASSERT(RHASH_ST_TABLE_P(hash));
+
+    st_table *tab = RHASH_ST_TABLE(hash);
+
+    xfree(tab->bins);
+    xfree(tab->entries);
+}
+
+static void
+hash_st_free_and_clear_table(VALUE hash)
+{
+    hash_st_free(hash);
+
+    RHASH_ST_CLEAR(hash);
+}
+
+void
+rb_hash_free(VALUE hash)
+{
+    if (RHASH_ST_TABLE_P(hash)) {
+        hash_st_free(hash);
+    }
+}
+
+typedef int st_foreach_func(st_data_t, st_data_t, st_data_t);
+
+struct foreach_safe_arg {
+    st_table *tbl;
+    st_foreach_func *func;
+    st_data_t arg;
+};
+
+static int
+foreach_safe_i(st_data_t key, st_data_t value, st_data_t args, int error)
+{
+    int status;
+    struct foreach_safe_arg *arg = (void *)args;
+
+    if (error) return ST_STOP;
+    status = (*arg->func)(key, value, arg->arg);
+    if (status == ST_CONTINUE) {
+        return ST_CHECK;
+    }
+    return status;
+}
+
+void
+st_foreach_safe(st_table *table, st_foreach_func *func, st_data_t a)
+{
+    struct foreach_safe_arg arg;
+
+    arg.tbl = table;
+    arg.func = (st_foreach_func *)func;
+    arg.arg = a;
+    if (st_foreach_check(table, foreach_safe_i, (st_data_t)&arg, 0)) {
+        rb_raise(rb_eRuntimeError, "hash modified during iteration");
+    }
+}
+
+typedef int rb_foreach_func(VALUE, VALUE, VALUE);
+
+struct hash_foreach_arg {
+    VALUE hash;
+    rb_foreach_func *func;
+    VALUE arg;
+};
+
+static int
+hash_iter_status_check(int status)
+{
+    switch (status) {
+      case ST_DELETE:
+        return ST_DELETE;
+      case ST_CONTINUE:
+        break;
+      case ST_STOP:
+        return ST_STOP;
+    }
+
+    return ST_CHECK;
+}
+
+static int
+hash_ar_foreach_iter(st_data_t key, st_data_t value, st_data_t argp, int error)
+{
+    struct hash_foreach_arg *arg = (struct hash_foreach_arg *)argp;
+
+    if (error) return ST_STOP;
+
+    int status = (*arg->func)((VALUE)key, (VALUE)value, arg->arg);
+    /* TODO: rehash check? rb_raise(rb_eRuntimeError, "rehash occurred during iteration"); */
+
+    return hash_iter_status_check(status);
+}
+
+static int
+hash_foreach_iter(st_data_t key, st_data_t value, st_data_t argp, int error)
+{
+    struct hash_foreach_arg *arg = (struct hash_foreach_arg *)argp;
+
+    if (error) return ST_STOP;
+
+    st_table *tbl = RHASH_ST_TABLE(arg->hash);
+    int status = (*arg->func)((VALUE)key, (VALUE)value, arg->arg);
+
+    if (RHASH_ST_TABLE(arg->hash) != tbl) {
+        rb_raise(rb_eRuntimeError, "rehash occurred during iteration");
+    }
+
+    return hash_iter_status_check(status);
+}
+
+static unsigned long
+iter_lev_in_ivar(VALUE hash)
+{
+    VALUE levval = rb_ivar_get(hash, id_hash_iter_lev);
+    HASH_ASSERT(FIXNUM_P(levval));
+    long lev = FIX2LONG(levval);
+    HASH_ASSERT(lev >= 0);
+    return (unsigned long)lev;
+}
+
+void rb_ivar_set_internal(VALUE obj, ID id, VALUE val);
+
+static void
+iter_lev_in_ivar_set(VALUE hash, unsigned long lev)
+{
+    HASH_ASSERT(lev >= RHASH_LEV_MAX);
+    HASH_ASSERT(POSFIXABLE(lev)); /* POSFIXABLE means fitting to long */
+    rb_ivar_set_internal(hash, id_hash_iter_lev, LONG2FIX((long)lev));
+}
+
+static inline unsigned long
+iter_lev_in_flags(VALUE hash)
+{
+    return (unsigned long)((RBASIC(hash)->flags >> RHASH_LEV_SHIFT) & RHASH_LEV_MAX);
+}
+
+static inline void
+iter_lev_in_flags_set(VALUE hash, unsigned long lev)
+{
+    HASH_ASSERT(lev <= RHASH_LEV_MAX);
+    RBASIC(hash)->flags = ((RBASIC(hash)->flags & ~RHASH_LEV_MASK) | ((VALUE)lev << RHASH_LEV_SHIFT));
+}
+
+static inline bool
+hash_iterating_p(VALUE hash)
+{
+    return iter_lev_in_flags(hash) > 0;
+}
+
+static void
+hash_iter_lev_inc(VALUE hash)
+{
+    unsigned long lev = iter_lev_in_flags(hash);
+    if (lev == RHASH_LEV_MAX) {
+        lev = iter_lev_in_ivar(hash) + 1;
+        if (!POSFIXABLE(lev)) { /* paranoiac check */
+            rb_raise(rb_eRuntimeError, "too much nested iterations");
+        }
+    }
+    else {
+        lev += 1;
+        iter_lev_in_flags_set(hash, lev);
+        if (lev < RHASH_LEV_MAX) return;
+    }
+    iter_lev_in_ivar_set(hash, lev);
+}
+
+static void
+hash_iter_lev_dec(VALUE hash)
+{
+    unsigned long lev = iter_lev_in_flags(hash);
+    if (lev == RHASH_LEV_MAX) {
+        lev = iter_lev_in_ivar(hash);
+        if (lev > RHASH_LEV_MAX) {
+            iter_lev_in_ivar_set(hash, lev-1);
+            return;
+        }
+        rb_attr_delete(hash, id_hash_iter_lev);
+    }
+    else if (lev == 0) {
+        rb_raise(rb_eRuntimeError, "iteration level underflow");
+    }
+    iter_lev_in_flags_set(hash, lev - 1);
+}
+
+static VALUE
+hash_foreach_ensure_rollback(VALUE hash)
+{
+    hash_iter_lev_inc(hash);
+    return 0;
+}
+
+static VALUE
+hash_foreach_ensure(VALUE hash)
+{
+    hash_iter_lev_dec(hash);
+    return 0;
+}
+
+int
+rb_hash_stlike_foreach(VALUE hash, st_foreach_callback_func *func, st_data_t arg)
+{
+    if (RHASH_AR_TABLE_P(hash)) {
+        return ar_foreach(hash, func, arg);
+    }
+    else {
+        return st_foreach(RHASH_ST_TABLE(hash), func, arg);
+    }
+}
+
+int
+rb_hash_stlike_foreach_with_replace(VALUE hash, st_foreach_check_callback_func *func, st_update_callback_func *replace, st_data_t arg)
+{
+    if (RHASH_AR_TABLE_P(hash)) {
+        return ar_foreach_with_replace(hash, func, replace, arg);
+    }
+    else {
+        return st_foreach_with_replace(RHASH_ST_TABLE(hash), func, replace, arg);
+    }
+}
+
+static VALUE
+hash_foreach_call(VALUE arg)
+{
+    VALUE hash = ((struct hash_foreach_arg *)arg)->hash;
+    int ret = 0;
+    if (RHASH_AR_TABLE_P(hash)) {
+        ret = ar_foreach_check(hash, hash_ar_foreach_iter,
+                                   (st_data_t)arg, (st_data_t)Qundef);
+    }
+    else if (RHASH_ST_TABLE_P(hash)) {
+        ret = st_foreach_check(RHASH_ST_TABLE(hash), hash_foreach_iter,
+                               (st_data_t)arg, (st_data_t)Qundef);
+    }
+    if (ret) {
+        rb_raise(rb_eRuntimeError, "ret: %d, hash modified during iteration", ret);
+    }
+    return Qnil;
+}
+
+void
+rb_hash_foreach(VALUE hash, rb_foreach_func *func, VALUE farg)
+{
+    struct hash_foreach_arg arg;
+
+    if (RHASH_TABLE_EMPTY_P(hash))
+        return;
+    arg.hash = hash;
+    arg.func = (rb_foreach_func *)func;
+    arg.arg  = farg;
+    if (RB_OBJ_FROZEN(hash)) {
+        hash_foreach_call((VALUE)&arg);
+    }
+    else {
+        hash_iter_lev_inc(hash);
+        rb_ensure(hash_foreach_call, (VALUE)&arg, hash_foreach_ensure, hash);
+    }
+    hash_verify(hash);
+}
+
+void rb_st_compact_table(st_table *tab);
+
+static void
+compact_after_delete(VALUE hash)
+{
+    if (!hash_iterating_p(hash) && RHASH_ST_TABLE_P(hash)) {
+        rb_st_compact_table(RHASH_ST_TABLE(hash));
+    }
+}
+
+static VALUE
+hash_alloc_flags(VALUE klass, VALUE flags, VALUE ifnone, bool st)
+{
+    const VALUE wb = (RGENGC_WB_PROTECTED_HASH ? FL_WB_PROTECTED : 0);
+    const size_t size = sizeof(struct RHash) + (st ? sizeof(st_table) : sizeof(ar_table));
+
+    NEWOBJ_OF(hash, struct RHash, klass, T_HASH | wb | flags, size, 0);
+
+    RHASH_SET_IFNONE((VALUE)hash, ifnone);
+
+    return (VALUE)hash;
+}
+
+static VALUE
+hash_alloc(VALUE klass)
+{
+    /* Allocate to be able to fit both st_table and ar_table. */
+    return hash_alloc_flags(klass, 0, Qnil, sizeof(st_table) > sizeof(ar_table));
+}
+
+static VALUE
+empty_hash_alloc(VALUE klass)
+{
+    RUBY_DTRACE_CREATE_HOOK(HASH, 0);
+
+    return hash_alloc(klass);
+}
+
+VALUE
+rb_hash_new(void)
+{
+    return hash_alloc(rb_cHash);
+}
+
+static VALUE
+copy_compare_by_id(VALUE hash, VALUE basis)
+{
+    if (rb_hash_compare_by_id_p(basis)) {
+        return rb_hash_compare_by_id(hash);
+    }
+    return hash;
+}
+
+VALUE
+rb_hash_new_with_size(st_index_t size)
+{
+    bool st = size > RHASH_AR_TABLE_MAX_SIZE;
+    VALUE ret = hash_alloc_flags(rb_cHash, 0, Qnil, st);
+
+    if (st) {
+        hash_st_table_init(ret, &objhash, size);
+    }
+
+    return ret;
+}
+
+VALUE
+rb_hash_new_capa(long capa)
+{
+    return rb_hash_new_with_size((st_index_t)capa);
+}
+
+static VALUE
+hash_copy(VALUE ret, VALUE hash)
+{
+    if (RHASH_AR_TABLE_P(hash)) {
+        if (RHASH_AR_TABLE_P(ret)) {
+            ar_copy(ret, hash);
+        }
+        else {
+            st_table *tab = RHASH_ST_TABLE(ret);
+            rb_st_init_existing_table_with_size(tab, &objhash, RHASH_AR_TABLE_SIZE(hash));
+
+            int bound = RHASH_AR_TABLE_BOUND(hash);
+            for (int i = 0; i < bound; i++) {
+                if (ar_cleared_entry(hash, i)) continue;
+
+                ar_table_pair *pair = RHASH_AR_TABLE_REF(hash, i);
+                st_add_direct(tab, pair->key, pair->val);
+                RB_OBJ_WRITTEN(ret, Qundef, pair->key);
+                RB_OBJ_WRITTEN(ret, Qundef, pair->val);
+            }
+        }
+    }
+    else {
+        HASH_ASSERT(sizeof(st_table) <= sizeof(ar_table));
+
+        RHASH_SET_ST_FLAG(ret);
+        st_replace(RHASH_ST_TABLE(ret), RHASH_ST_TABLE(hash));
+
+        rb_gc_writebarrier_remember(ret);
+    }
+    return ret;
+}
+
+static VALUE
+hash_dup_with_compare_by_id(VALUE hash)
+{
+    VALUE dup = hash_alloc_flags(rb_cHash, 0, Qnil, RHASH_ST_TABLE_P(hash));
+    if (RHASH_ST_TABLE_P(hash)) {
+        RHASH_SET_ST_FLAG(dup);
+    }
+    else {
+        RHASH_UNSET_ST_FLAG(dup);
+    }
+
+    return hash_copy(dup, hash);
+}
+
+static VALUE
+hash_dup(VALUE hash, VALUE klass, VALUE flags)
+{
+    return hash_copy(hash_alloc_flags(klass, flags, RHASH_IFNONE(hash), !RHASH_EMPTY_P(hash) && RHASH_ST_TABLE_P(hash)),
+                     hash);
+}
+
+VALUE
+rb_hash_dup(VALUE hash)
+{
+    const VALUE flags = RBASIC(hash)->flags;
+    VALUE ret = hash_dup(hash, rb_obj_class(hash),
+                         flags & (FL_EXIVAR|RHASH_PROC_DEFAULT));
+    if (flags & FL_EXIVAR)
+        rb_copy_generic_ivar(ret, hash);
+    return ret;
+}
+
+VALUE
+rb_hash_resurrect(VALUE hash)
+{
+    VALUE ret = hash_dup(hash, rb_cHash, 0);
+    return ret;
+}
+
+static void
+rb_hash_modify_check(VALUE hash)
+{
+    rb_check_frozen(hash);
+}
+
+RUBY_FUNC_EXPORTED struct st_table *
+rb_hash_tbl_raw(VALUE hash, const char *file, int line)
+{
+    return ar_force_convert_table(hash, file, line);
+}
+
+struct st_table *
+rb_hash_tbl(VALUE hash, const char *file, int line)
+{
+    OBJ_WB_UNPROTECT(hash);
+    return rb_hash_tbl_raw(hash, file, line);
+}
+
+static void
+rb_hash_modify(VALUE hash)
+{
+    rb_hash_modify_check(hash);
+}
+
+NORETURN(static void no_new_key(void));
+static void
+no_new_key(void)
+{
+    rb_raise(rb_eRuntimeError, "can't add a new key into hash during iteration");
+}
+
+struct update_callback_arg {
+    VALUE hash;
+    st_data_t arg;
+};
+
+#define NOINSERT_UPDATE_CALLBACK(func)                                       \
+static int                                                                   \
+func##_noinsert(st_data_t *key, st_data_t *val, st_data_t arg, int existing) \
+{                                                                            \
+    if (!existing) no_new_key();                                             \
+    return func(key, val, (struct update_arg *)arg, existing);               \
+}                                                                            \
+                                                                             \
+static int                                                                   \
+func##_insert(st_data_t *key, st_data_t *val, st_data_t arg, int existing)   \
+{                                                                            \
+    return func(key, val, (struct update_arg *)arg, existing);               \
+}
+
+struct update_arg {
+    st_data_t arg;
+    st_update_callback_func *func;
+    VALUE hash;
+    VALUE key;
+    VALUE value;
+};
+
+typedef int (*tbl_update_func)(st_data_t *, st_data_t *, st_data_t, int);
+
+int
+rb_hash_stlike_update(VALUE hash, st_data_t key, st_update_callback_func *func, st_data_t arg)
+{
+    if (RHASH_AR_TABLE_P(hash)) {
+        int result = ar_update(hash, key, func, arg);
+        if (result == -1) {
+            ar_force_convert_table(hash, __FILE__, __LINE__);
+        }
+        else {
+            return result;
+        }
+    }
+
+    return st_update(RHASH_ST_TABLE(hash), key, func, arg);
+}
+
+static int
+tbl_update_modify(st_data_t *key, st_data_t *val, st_data_t arg, int existing)
+{
+    struct update_arg *p = (struct update_arg *)arg;
+    st_data_t old_key = *key;
+    st_data_t old_value = *val;
+    VALUE hash = p->hash;
+    int ret = (p->func)(key, val, arg, existing);
+    switch (ret) {
+      default:
+        break;
+      case ST_CONTINUE:
+        if (!existing || *key != old_key || *val != old_value) {
+            rb_hash_modify(hash);
+            p->key = *key;
+            p->value = *val;
+        }
+        break;
+      case ST_DELETE:
+        if (existing)
+            rb_hash_modify(hash);
+        break;
+    }
+
+    return ret;
+}
+
+static int
+tbl_update(VALUE hash, VALUE key, tbl_update_func func, st_data_t optional_arg)
+{
+    struct update_arg arg = {
+        .arg = optional_arg,
+        .func = func,
+        .hash = hash,
+        .key  = key,
+        .value = (VALUE)optional_arg,
+    };
+
+    int ret = rb_hash_stlike_update(hash, key, tbl_update_modify, (st_data_t)&arg);
+
+    /* write barrier */
+    RB_OBJ_WRITTEN(hash, Qundef, arg.key);
+    RB_OBJ_WRITTEN(hash, Qundef, arg.value);
+
+    return ret;
+}
+
+#define UPDATE_CALLBACK(iter_p, func) ((iter_p) ? func##_noinsert : func##_insert)
+
+#define RHASH_UPDATE_ITER(h, iter_p, key, func, a) do { \
+    tbl_update((h), (key), UPDATE_CALLBACK(iter_p, func), (st_data_t)(a)); \
+} while (0)
+
+#define RHASH_UPDATE(hash, key, func, arg) \
+    RHASH_UPDATE_ITER(hash, hash_iterating_p(hash), key, func, arg)
+
+static void
+set_proc_default(VALUE hash, VALUE proc)
+{
+    if (rb_proc_lambda_p(proc)) {
+        int n = rb_proc_arity(proc);
+
+        if (n != 2 && (n >= 0 || n < -3)) {
+            if (n < 0) n = -n-1;
+            rb_raise(rb_eTypeError, "default_proc takes two arguments (2 for %d)", n);
+        }
+    }
+
+    FL_SET_RAW(hash, RHASH_PROC_DEFAULT);
+    RHASH_SET_IFNONE(hash, proc);
+}
+
+/*
+ *  call-seq:
+ *     Hash.new(default_value = nil) -> new_hash
+ *     Hash.new {|hash, key| ... } -> new_hash
+ *
+ *  Returns a new empty \Hash object.
+ *
+ *  The initial default value and initial default proc for the new hash
+ *  depend on which form above was used. See {Default Values}[rdoc-ref:Hash@Default+Values].
+ *
+ *  If neither an argument nor a block given,
+ *  initializes both the default value and the default proc to <tt>nil</tt>:
+ *    h = Hash.new
+ *    h.default # => nil
+ *    h.default_proc # => nil
+ *
+ *  If argument <tt>default_value</tt> given but no block given,
+ *  initializes the default value to the given <tt>default_value</tt>
+ *  and the default proc to <tt>nil</tt>:
+ *    h = Hash.new(false)
+ *    h.default # => false
+ *    h.default_proc # => nil
+ *
+ *  If a block given but no argument, stores the block as the default proc
+ *  and sets the default value to <tt>nil</tt>:
+ *    h = Hash.new {|hash, key| "Default value for #{key}" }
+ *    h.default # => nil
+ *    h.default_proc.class # => Proc
+ *    h[:nosuch] # => "Default value for nosuch"
+ */
+
+static VALUE
+rb_hash_initialize(int argc, VALUE *argv, VALUE hash)
+{
+    rb_hash_modify(hash);
+
+    if (rb_block_given_p()) {
+        rb_check_arity(argc, 0, 0);
+        SET_PROC_DEFAULT(hash, rb_block_proc());
+    }
+    else {
+        rb_check_arity(argc, 0, 1);
+
+        VALUE options, ifnone;
+        rb_scan_args(argc, argv, "01:", &ifnone, &options);
+        if (NIL_P(ifnone) && !NIL_P(options)) {
+            ifnone = options;
+            rb_warn_deprecated_to_remove("3.4", "Calling Hash.new with keyword arguments", "Hash.new({ key: value })");
+        }
+        RHASH_SET_IFNONE(hash, ifnone);
+    }
+
+    return hash;
+}
+
+static VALUE rb_hash_to_a(VALUE hash);
+
+/*
+ *  call-seq:
+ *    Hash[] -> new_empty_hash
+ *    Hash[hash] -> new_hash
+ *    Hash[ [*2_element_arrays] ] -> new_hash
+ *    Hash[*objects] -> new_hash
+ *
+ *  Returns a new \Hash object populated with the given objects, if any.
+ *  See Hash::new.
+ *
+ *  With no argument, returns a new empty \Hash.
+ *
+ *  When the single given argument is a \Hash, returns a new \Hash
+ *  populated with the entries from the given \Hash, excluding the
+ *  default value or proc.
+ *
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    Hash[h] # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  When the single given argument is an Array of 2-element Arrays,
+ *  returns a new \Hash object wherein each 2-element array forms a
+ *  key-value entry:
+ *
+ *    Hash[ [ [:foo, 0], [:bar, 1] ] ] # => {:foo=>0, :bar=>1}
+ *
+ *  When the argument count is an even number;
+ *  returns a new \Hash object wherein each successive pair of arguments
+ *  has become a key-value entry:
+ *
+ *    Hash[:foo, 0, :bar, 1] # => {:foo=>0, :bar=>1}
+ *
+ *  Raises an exception if the argument list does not conform to any
+ *  of the above.
+ */
+
+static VALUE
+rb_hash_s_create(int argc, VALUE *argv, VALUE klass)
+{
+    VALUE hash, tmp;
+
+    if (argc == 1) {
+        tmp = rb_hash_s_try_convert(Qnil, argv[0]);
+        if (!NIL_P(tmp)) {
+            if (!RHASH_EMPTY_P(tmp)  && rb_hash_compare_by_id_p(tmp)) {
+                /* hash_copy for non-empty hash will copy compare_by_identity
+                   flag, but we don't want it copied. Work around by
+                   converting hash to flattened array and using that. */
+                tmp = rb_hash_to_a(tmp);
+            }
+            else {
+                hash = hash_alloc(klass);
+                if (!RHASH_EMPTY_P(tmp))
+                    hash_copy(hash, tmp);
+                return hash;
+            }
+        }
+        else {
+            tmp = rb_check_array_type(argv[0]);
+        }
+
+        if (!NIL_P(tmp)) {
+            long i;
+
+            hash = hash_alloc(klass);
+            for (i = 0; i < RARRAY_LEN(tmp); ++i) {
+                VALUE e = RARRAY_AREF(tmp, i);
+                VALUE v = rb_check_array_type(e);
+                VALUE key, val = Qnil;
+
+                if (NIL_P(v)) {
+                    rb_raise(rb_eArgError, "wrong element type %s at %ld (expected array)",
+                             rb_builtin_class_name(e), i);
+                }
+                switch (RARRAY_LEN(v)) {
+                  default:
+                    rb_raise(rb_eArgError, "invalid number of elements (%ld for 1..2)",
+                             RARRAY_LEN(v));
+                  case 2:
+                    val = RARRAY_AREF(v, 1);
+                  case 1:
+                    key = RARRAY_AREF(v, 0);
+                    rb_hash_aset(hash, key, val);
+                }
+            }
+            return hash;
+        }
+    }
+    if (argc % 2 != 0) {
+        rb_raise(rb_eArgError, "odd number of arguments for Hash");
+    }
+
+    hash = hash_alloc(klass);
+    rb_hash_bulk_insert(argc, argv, hash);
+    hash_verify(hash);
+    return hash;
+}
+
+VALUE
+rb_to_hash_type(VALUE hash)
+{
+    return rb_convert_type_with_id(hash, T_HASH, "Hash", idTo_hash);
+}
+#define to_hash rb_to_hash_type
+
+VALUE
+rb_check_hash_type(VALUE hash)
+{
+    return rb_check_convert_type_with_id(hash, T_HASH, "Hash", idTo_hash);
+}
+
+/*
+ *  call-seq:
+ *    Hash.try_convert(obj) -> obj, new_hash, or nil
+ *
+ *  If +obj+ is a \Hash object, returns +obj+.
+ *
+ *  Otherwise if +obj+ responds to <tt>:to_hash</tt>,
+ *  calls <tt>obj.to_hash</tt> and returns the result.
+ *
+ *  Returns +nil+ if +obj+ does not respond to <tt>:to_hash</tt>
+ *
+ *  Raises an exception unless <tt>obj.to_hash</tt> returns a \Hash object.
+ */
+static VALUE
+rb_hash_s_try_convert(VALUE dummy, VALUE hash)
+{
+    return rb_check_hash_type(hash);
+}
+
+/*
+ *  call-seq:
+ *     Hash.ruby2_keywords_hash?(hash) -> true or false
+ *
+ *  Checks if a given hash is flagged by Module#ruby2_keywords (or
+ *  Proc#ruby2_keywords).
+ *  This method is not for casual use; debugging, researching, and
+ *  some truly necessary cases like serialization of arguments.
+ *
+ *     ruby2_keywords def foo(*args)
+ *       Hash.ruby2_keywords_hash?(args.last)
+ *     end
+ *     foo(k: 1)   #=> true
+ *     foo({k: 1}) #=> false
+ */
+static VALUE
+rb_hash_s_ruby2_keywords_hash_p(VALUE dummy, VALUE hash)
+{
+    Check_Type(hash, T_HASH);
+    return RBOOL(RHASH(hash)->basic.flags & RHASH_PASS_AS_KEYWORDS);
+}
+
+/*
+ *  call-seq:
+ *     Hash.ruby2_keywords_hash(hash) -> hash
+ *
+ *  Duplicates a given hash and adds a ruby2_keywords flag.
+ *  This method is not for casual use; debugging, researching, and
+ *  some truly necessary cases like deserialization of arguments.
+ *
+ *     h = {k: 1}
+ *     h = Hash.ruby2_keywords_hash(h)
+ *     def foo(k: 42)
+ *       k
+ *     end
+ *     foo(*[h]) #=> 1 with neither a warning or an error
+ */
+static VALUE
+rb_hash_s_ruby2_keywords_hash(VALUE dummy, VALUE hash)
+{
+    Check_Type(hash, T_HASH);
+    VALUE tmp = rb_hash_dup(hash);
+    if (RHASH_EMPTY_P(hash) && rb_hash_compare_by_id_p(hash)) {
+        rb_hash_compare_by_id(tmp);
+    }
+    RHASH(tmp)->basic.flags |= RHASH_PASS_AS_KEYWORDS;
+    return tmp;
+}
+
+struct rehash_arg {
+    VALUE hash;
+    st_table *tbl;
+};
+
+static int
+rb_hash_rehash_i(VALUE key, VALUE value, VALUE arg)
+{
+    if (RHASH_AR_TABLE_P(arg)) {
+        ar_insert(arg, (st_data_t)key, (st_data_t)value);
+    }
+    else {
+        st_insert(RHASH_ST_TABLE(arg), (st_data_t)key, (st_data_t)value);
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *     hash.rehash -> self
+ *
+ *  Rebuilds the hash table by recomputing the hash index for each key;
+ *  returns <tt>self</tt>.
+ *
+ *  The hash table becomes invalid if the hash value of a key
+ *  has changed after the entry was created.
+ *  See {Modifying an Active Hash Key}[rdoc-ref:Hash@Modifying+an+Active+Hash+Key].
+ */
+
+VALUE
+rb_hash_rehash(VALUE hash)
+{
+    VALUE tmp;
+    st_table *tbl;
+
+    if (hash_iterating_p(hash)) {
+        rb_raise(rb_eRuntimeError, "rehash during iteration");
+    }
+    rb_hash_modify_check(hash);
+    if (RHASH_AR_TABLE_P(hash)) {
+        tmp = hash_alloc(0);
+        rb_hash_foreach(hash, rb_hash_rehash_i, (VALUE)tmp);
+
+        hash_ar_free_and_clear_table(hash);
+        ar_copy(hash, tmp);
+    }
+    else if (RHASH_ST_TABLE_P(hash)) {
+        st_table *old_tab = RHASH_ST_TABLE(hash);
+        tmp = hash_alloc(0);
+
+        hash_st_table_init(tmp, old_tab->type, old_tab->num_entries);
+        tbl = RHASH_ST_TABLE(tmp);
+
+        rb_hash_foreach(hash, rb_hash_rehash_i, (VALUE)tmp);
+
+        hash_st_free(hash);
+        RHASH_ST_TABLE_SET(hash, tbl);
+        RHASH_ST_CLEAR(tmp);
+    }
+    hash_verify(hash);
+    return hash;
+}
+
+static VALUE
+call_default_proc(VALUE proc, VALUE hash, VALUE key)
+{
+    VALUE args[2] = {hash, key};
+    return rb_proc_call_with_block(proc, 2, args, Qnil);
+}
+
+static bool
+rb_hash_default_unredefined(VALUE hash)
+{
+    VALUE klass = RBASIC_CLASS(hash);
+    if (LIKELY(klass == rb_cHash)) {
+        return !!BASIC_OP_UNREDEFINED_P(BOP_DEFAULT, HASH_REDEFINED_OP_FLAG);
+    }
+    else {
+        return LIKELY(rb_method_basic_definition_p(klass, id_default));
+    }
+}
+
+VALUE
+rb_hash_default_value(VALUE hash, VALUE key)
+{
+    RUBY_ASSERT(RB_TYPE_P(hash, T_HASH));
+
+    if (LIKELY(rb_hash_default_unredefined(hash))) {
+        VALUE ifnone = RHASH_IFNONE(hash);
+        if (LIKELY(!FL_TEST_RAW(hash, RHASH_PROC_DEFAULT))) return ifnone;
+        if (UNDEF_P(key)) return Qnil;
+        return call_default_proc(ifnone, hash, key);
+    }
+    else {
+        return rb_funcall(hash, id_default, 1, key);
+    }
+}
+
+static inline int
+hash_stlike_lookup(VALUE hash, st_data_t key, st_data_t *pval)
+{
+    hash_verify(hash);
+
+    if (RHASH_AR_TABLE_P(hash)) {
+        return ar_lookup(hash, key, pval);
+    }
+    else {
+        extern st_index_t rb_iseq_cdhash_hash(VALUE);
+        RUBY_ASSERT(RHASH_ST_TABLE(hash)->type->hash == rb_any_hash ||
+                    RHASH_ST_TABLE(hash)->type->hash == rb_ident_hash ||
+                    RHASH_ST_TABLE(hash)->type->hash == rb_iseq_cdhash_hash);
+        return st_lookup(RHASH_ST_TABLE(hash), key, pval);
+    }
+}
+
+int
+rb_hash_stlike_lookup(VALUE hash, st_data_t key, st_data_t *pval)
+{
+    return hash_stlike_lookup(hash, key, pval);
+}
+
+/*
+ *  call-seq:
+ *    hash[key] -> value
+ *
+ *  Returns the value associated with the given +key+, if found:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h[:foo] # => 0
+ *
+ *  If +key+ is not found, returns a default value
+ *  (see {Default Values}[rdoc-ref:Hash@Default+Values]):
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h[:nosuch] # => nil
+ */
+
+VALUE
+rb_hash_aref(VALUE hash, VALUE key)
+{
+    st_data_t val;
+
+    if (hash_stlike_lookup(hash, key, &val)) {
+        return (VALUE)val;
+    }
+    else {
+        return rb_hash_default_value(hash, key);
+    }
+}
+
+VALUE
+rb_hash_lookup2(VALUE hash, VALUE key, VALUE def)
+{
+    st_data_t val;
+
+    if (hash_stlike_lookup(hash, key, &val)) {
+        return (VALUE)val;
+    }
+    else {
+        return def; /* without Hash#default */
+    }
+}
+
+VALUE
+rb_hash_lookup(VALUE hash, VALUE key)
+{
+    return rb_hash_lookup2(hash, key, Qnil);
+}
+
+/*
+ *  call-seq:
+ *    hash.fetch(key) -> object
+ *    hash.fetch(key, default_value) -> object
+ *    hash.fetch(key) {|key| ... } -> object
+ *
+ *  Returns the value for the given +key+, if found.
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.fetch(:bar) # => 1
+ *
+ *  If +key+ is not found and no block was given,
+ *  returns +default_value+:
+ *    {}.fetch(:nosuch, :default) # => :default
+ *
+ *  If +key+ is not found and a block was given,
+ *  yields +key+ to the block and returns the block's return value:
+ *    {}.fetch(:nosuch) {|key| "No key #{key}"} # => "No key nosuch"
+ *
+ *  Raises KeyError if neither +default_value+ nor a block was given.
+ *
+ *  Note that this method does not use the values of either #default or #default_proc.
+ */
+
+static VALUE
+rb_hash_fetch_m(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE key;
+    st_data_t val;
+    long block_given;
+
+    rb_check_arity(argc, 1, 2);
+    key = argv[0];
+
+    block_given = rb_block_given_p();
+    if (block_given && argc == 2) {
+        rb_warn("block supersedes default value argument");
+    }
+
+    if (hash_stlike_lookup(hash, key, &val)) {
+        return (VALUE)val;
+    }
+    else {
+        if (block_given) {
+            return rb_yield(key);
+        }
+        else if (argc == 1) {
+            VALUE desc = rb_protect(rb_inspect, key, 0);
+            if (NIL_P(desc)) {
+                desc = rb_any_to_s(key);
+            }
+            desc = rb_str_ellipsize(desc, 65);
+            rb_key_err_raise(rb_sprintf("key not found: %"PRIsVALUE, desc), hash, key);
+        }
+        else {
+            return argv[1];
+        }
+    }
+}
+
+VALUE
+rb_hash_fetch(VALUE hash, VALUE key)
+{
+    return rb_hash_fetch_m(1, &key, hash);
+}
+
+/*
+ *  call-seq:
+ *    hash.default -> object
+ *    hash.default(key) -> object
+ *
+ *  Returns the default value for the given +key+.
+ *  The returned value will be determined either by the default proc or by the default value.
+ *  See {Default Values}[rdoc-ref:Hash@Default+Values].
+ *
+ *  With no argument, returns the current default value:
+ *    h = {}
+ *    h.default # => nil
+ *
+ *  If +key+ is given, returns the default value for +key+,
+ *  regardless of whether that key exists:
+ *    h = Hash.new { |hash, key| hash[key] = "No key #{key}"}
+ *    h[:foo] = "Hello"
+ *    h.default(:foo) # => "No key foo"
+ */
+
+static VALUE
+rb_hash_default(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE ifnone;
+
+    rb_check_arity(argc, 0, 1);
+    ifnone = RHASH_IFNONE(hash);
+    if (FL_TEST(hash, RHASH_PROC_DEFAULT)) {
+        if (argc == 0) return Qnil;
+        return call_default_proc(ifnone, hash, argv[0]);
+    }
+    return ifnone;
+}
+
+/*
+ *  call-seq:
+ *    hash.default = value -> object
+ *
+ *  Sets the default value to +value+; returns +value+:
+ *    h = {}
+ *    h.default # => nil
+ *    h.default = false # => false
+ *    h.default # => false
+ *
+ *  See {Default Values}[rdoc-ref:Hash@Default+Values].
+ */
+
+static VALUE
+rb_hash_set_default(VALUE hash, VALUE ifnone)
+{
+    rb_hash_modify_check(hash);
+    SET_DEFAULT(hash, ifnone);
+    return ifnone;
+}
+
+/*
+ *  call-seq:
+ *    hash.default_proc -> proc or nil
+ *
+ *  Returns the default proc for +self+
+ *  (see {Default Values}[rdoc-ref:Hash@Default+Values]):
+ *    h = {}
+ *    h.default_proc # => nil
+ *    h.default_proc = proc {|hash, key| "Default value for #{key}" }
+ *    h.default_proc.class # => Proc
+ */
+
+static VALUE
+rb_hash_default_proc(VALUE hash)
+{
+    if (FL_TEST(hash, RHASH_PROC_DEFAULT)) {
+        return RHASH_IFNONE(hash);
+    }
+    return Qnil;
+}
+
+/*
+ *  call-seq:
+ *    hash.default_proc = proc -> proc
+ *
+ *  Sets the default proc for +self+ to +proc+:
+ *  (see {Default Values}[rdoc-ref:Hash@Default+Values]):
+ *    h = {}
+ *    h.default_proc # => nil
+ *    h.default_proc = proc { |hash, key| "Default value for #{key}" }
+ *    h.default_proc.class # => Proc
+ *    h.default_proc = nil
+ *    h.default_proc # => nil
+ */
+
+VALUE
+rb_hash_set_default_proc(VALUE hash, VALUE proc)
+{
+    VALUE b;
+
+    rb_hash_modify_check(hash);
+    if (NIL_P(proc)) {
+        SET_DEFAULT(hash, proc);
+        return proc;
+    }
+    b = rb_check_convert_type_with_id(proc, T_DATA, "Proc", idTo_proc);
+    if (NIL_P(b) || !rb_obj_is_proc(b)) {
+        rb_raise(rb_eTypeError,
+                 "wrong default_proc type %s (expected Proc)",
+                 rb_obj_classname(proc));
+    }
+    proc = b;
+    SET_PROC_DEFAULT(hash, proc);
+    return proc;
+}
+
+static int
+key_i(VALUE key, VALUE value, VALUE arg)
+{
+    VALUE *args = (VALUE *)arg;
+
+    if (rb_equal(value, args[0])) {
+        args[1] = key;
+        return ST_STOP;
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.key(value) -> key or nil
+ *
+ *  Returns the key for the first-found entry with the given +value+
+ *  (see {Entry Order}[rdoc-ref:Hash@Entry+Order]):
+ *    h = {foo: 0, bar: 2, baz: 2}
+ *    h.key(0) # => :foo
+ *    h.key(2) # => :bar
+ *
+ *  Returns +nil+ if no such value is found.
+ */
+
+static VALUE
+rb_hash_key(VALUE hash, VALUE value)
+{
+    VALUE args[2];
+
+    args[0] = value;
+    args[1] = Qnil;
+
+    rb_hash_foreach(hash, key_i, (VALUE)args);
+
+    return args[1];
+}
+
+int
+rb_hash_stlike_delete(VALUE hash, st_data_t *pkey, st_data_t *pval)
+{
+    if (RHASH_AR_TABLE_P(hash)) {
+        return ar_delete(hash, pkey, pval);
+    }
+    else {
+        return st_delete(RHASH_ST_TABLE(hash), pkey, pval);
+    }
+}
+
+/*
+ * delete a specified entry by a given key.
+ * if there is the corresponding entry, return a value of the entry.
+ * if there is no corresponding entry, return Qundef.
+ */
+VALUE
+rb_hash_delete_entry(VALUE hash, VALUE key)
+{
+    st_data_t ktmp = (st_data_t)key, val;
+
+    if (rb_hash_stlike_delete(hash, &ktmp, &val)) {
+        return (VALUE)val;
+    }
+    else {
+        return Qundef;
+    }
+}
+
+/*
+ * delete a specified entry by a given key.
+ * if there is the corresponding entry, return a value of the entry.
+ * if there is no corresponding entry, return Qnil.
+ */
+VALUE
+rb_hash_delete(VALUE hash, VALUE key)
+{
+    VALUE deleted_value = rb_hash_delete_entry(hash, key);
+
+    if (!UNDEF_P(deleted_value)) { /* likely pass */
+        return deleted_value;
+    }
+    else {
+        return Qnil;
+    }
+}
+
+/*
+ *  call-seq:
+ *    hash.delete(key) -> value or nil
+ *    hash.delete(key) {|key| ... } -> object
+ *
+ *  Deletes the entry for the given +key+ and returns its associated value.
+ *
+ *  If no block is given and +key+ is found, deletes the entry and returns the associated value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.delete(:bar) # => 1
+ *    h # => {:foo=>0, :baz=>2}
+ *
+ *  If no block given and +key+ is not found, returns +nil+.
+ *
+ *  If a block is given and +key+ is found, ignores the block,
+ *  deletes the entry, and returns the associated value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.delete(:baz) { |key| raise 'Will never happen'} # => 2
+ *    h # => {:foo=>0, :bar=>1}
+ *
+ *  If a block is given and +key+ is not found,
+ *  calls the block and returns the block's return value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.delete(:nosuch) { |key| "Key #{key} not found" } # => "Key nosuch not found"
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ */
+
+static VALUE
+rb_hash_delete_m(VALUE hash, VALUE key)
+{
+    VALUE val;
+
+    rb_hash_modify_check(hash);
+    val = rb_hash_delete_entry(hash, key);
+
+    if (!UNDEF_P(val)) {
+        compact_after_delete(hash);
+        return val;
+    }
+    else {
+        if (rb_block_given_p()) {
+            return rb_yield(key);
+        }
+        else {
+            return Qnil;
+        }
+    }
+}
+
+struct shift_var {
+    VALUE key;
+    VALUE val;
+};
+
+static int
+shift_i_safe(VALUE key, VALUE value, VALUE arg)
+{
+    struct shift_var *var = (struct shift_var *)arg;
+
+    var->key = key;
+    var->val = value;
+    return ST_STOP;
+}
+
+/*
+ *  call-seq:
+ *    hash.shift -> [key, value] or nil
+ *
+ *  Removes the first hash entry
+ *  (see {Entry Order}[rdoc-ref:Hash@Entry+Order]);
+ *  returns a 2-element Array containing the removed key and value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.shift # => [:foo, 0]
+ *    h # => {:bar=>1, :baz=>2}
+ *
+ *  Returns nil if the hash is empty.
+ */
+
+static VALUE
+rb_hash_shift(VALUE hash)
+{
+    struct shift_var var;
+
+    rb_hash_modify_check(hash);
+    if (RHASH_AR_TABLE_P(hash)) {
+        var.key = Qundef;
+        if (!hash_iterating_p(hash)) {
+            if (ar_shift(hash, &var.key, &var.val)) {
+                return rb_assoc_new(var.key, var.val);
+            }
+        }
+        else {
+            rb_hash_foreach(hash, shift_i_safe, (VALUE)&var);
+            if (!UNDEF_P(var.key)) {
+                rb_hash_delete_entry(hash, var.key);
+                return rb_assoc_new(var.key, var.val);
+            }
+        }
+    }
+    if (RHASH_ST_TABLE_P(hash)) {
+        var.key = Qundef;
+        if (!hash_iterating_p(hash)) {
+            if (st_shift(RHASH_ST_TABLE(hash), &var.key, &var.val)) {
+                return rb_assoc_new(var.key, var.val);
+            }
+        }
+        else {
+            rb_hash_foreach(hash, shift_i_safe, (VALUE)&var);
+            if (!UNDEF_P(var.key)) {
+                rb_hash_delete_entry(hash, var.key);
+                return rb_assoc_new(var.key, var.val);
+            }
+        }
+    }
+    return Qnil;
+}
+
+static int
+delete_if_i(VALUE key, VALUE value, VALUE hash)
+{
+    if (RTEST(rb_yield_values(2, key, value))) {
+        rb_hash_modify(hash);
+        return ST_DELETE;
+    }
+    return ST_CONTINUE;
+}
+
+static VALUE
+hash_enum_size(VALUE hash, VALUE args, VALUE eobj)
+{
+    return rb_hash_size(hash);
+}
+
+/*
+ *  call-seq:
+ *    hash.delete_if {|key, value| ... } -> self
+ *    hash.delete_if -> new_enumerator
+ *
+ *  If a block given, calls the block with each key-value pair;
+ *  deletes each entry for which the block returns a truthy value;
+ *  returns +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.delete_if {|key, value| value > 0 } # => {:foo=>0}
+ *
+ *  If no block given, returns a new Enumerator:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.delete_if # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:delete_if>
+ *    e.each { |key, value| value > 0 } # => {:foo=>0}
+ */
+
+VALUE
+rb_hash_delete_if(VALUE hash)
+{
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    rb_hash_modify_check(hash);
+    if (!RHASH_TABLE_EMPTY_P(hash)) {
+        rb_hash_foreach(hash, delete_if_i, hash);
+        compact_after_delete(hash);
+    }
+    return hash;
+}
+
+/*
+ *  call-seq:
+ *    hash.reject! {|key, value| ... } -> self or nil
+ *    hash.reject! -> new_enumerator
+ *
+ *  Returns +self+, whose remaining entries are those
+ *  for which the block returns +false+ or +nil+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.reject! {|key, value| value < 2 } # => {:baz=>2}
+ *
+ *  Returns +nil+ if no entries are removed.
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.reject! # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:reject!>
+ *    e.each {|key, value| key.start_with?('b') } # => {:foo=>0}
+ */
+
+static VALUE
+rb_hash_reject_bang(VALUE hash)
+{
+    st_index_t n;
+
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    rb_hash_modify(hash);
+    n = RHASH_SIZE(hash);
+    if (!n) return Qnil;
+    rb_hash_foreach(hash, delete_if_i, hash);
+    if (n == RHASH_SIZE(hash)) return Qnil;
+    return hash;
+}
+
+/*
+ *  call-seq:
+ *    hash.reject {|key, value| ... } -> new_hash
+ *    hash.reject -> new_enumerator
+ *
+ *  Returns a new \Hash object whose entries are all those
+ *  from +self+ for which the block returns +false+ or +nil+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = h.reject {|key, value| key.start_with?('b') }
+ *    h1 # => {:foo=>0}
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.reject # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:reject>
+ *    h1 = e.each {|key, value| key.start_with?('b') }
+ *    h1 # => {:foo=>0}
+ */
+
+static VALUE
+rb_hash_reject(VALUE hash)
+{
+    VALUE result;
+
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    result = hash_dup_with_compare_by_id(hash);
+    if (!RHASH_EMPTY_P(hash)) {
+        rb_hash_foreach(result, delete_if_i, result);
+        compact_after_delete(result);
+    }
+    return result;
+}
+
+/*
+ *  call-seq:
+ *    hash.slice(*keys) -> new_hash
+ *
+ *  Returns a new \Hash object containing the entries for the given +keys+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.slice(:baz, :foo) # => {:baz=>2, :foo=>0}
+ *
+ *  Any given +keys+ that are not found are ignored.
+ */
+
+static VALUE
+rb_hash_slice(int argc, VALUE *argv, VALUE hash)
+{
+    int i;
+    VALUE key, value, result;
+
+    if (argc == 0 || RHASH_EMPTY_P(hash)) {
+        return copy_compare_by_id(rb_hash_new(), hash);
+    }
+    result = copy_compare_by_id(rb_hash_new_with_size(argc), hash);
+
+    for (i = 0; i < argc; i++) {
+        key = argv[i];
+        value = rb_hash_lookup2(hash, key, Qundef);
+        if (!UNDEF_P(value))
+            rb_hash_aset(result, key, value);
+    }
+
+    return result;
+}
+
+/*
+ *  call-seq:
+ *     hsh.except(*keys) -> a_hash
+ *
+ *  Returns a new \Hash excluding entries for the given +keys+:
+ *     h = { a: 100, b: 200, c: 300 }
+ *     h.except(:a)          #=> {:b=>200, :c=>300}
+ *
+ *  Any given +keys+ that are not found are ignored.
+ */
+
+static VALUE
+rb_hash_except(int argc, VALUE *argv, VALUE hash)
+{
+    int i;
+    VALUE key, result;
+
+    result = hash_dup_with_compare_by_id(hash);
+
+    for (i = 0; i < argc; i++) {
+        key = argv[i];
+        rb_hash_delete(result, key);
+    }
+    compact_after_delete(result);
+
+    return result;
+}
+
+/*
+ *  call-seq:
+ *    hash.values_at(*keys) -> new_array
+ *
+ *  Returns a new Array containing values for the given +keys+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.values_at(:baz, :foo) # => [2, 0]
+ *
+ *  The {default values}[rdoc-ref:Hash@Default+Values] are returned
+ *  for any keys that are not found:
+ *    h.values_at(:hello, :foo) # => [nil, 0]
+ */
+
+static VALUE
+rb_hash_values_at(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE result = rb_ary_new2(argc);
+    long i;
+
+    for (i=0; i<argc; i++) {
+        rb_ary_push(result, rb_hash_aref(hash, argv[i]));
+    }
+    return result;
+}
+
+/*
+ *  call-seq:
+ *    hash.fetch_values(*keys) -> new_array
+ *    hash.fetch_values(*keys) {|key| ... } -> new_array
+ *
+ *  Returns a new Array containing the values associated with the given keys *keys:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.fetch_values(:baz, :foo) # => [2, 0]
+ *
+ *  Returns a new empty Array if no arguments given.
+ *
+ *  When a block is given, calls the block with each missing key,
+ *  treating the block's return value as the value for that key:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    values = h.fetch_values(:bar, :foo, :bad, :bam) {|key| key.to_s}
+ *    values # => [1, 0, "bad", "bam"]
+ *
+ *  When no block is given, raises an exception if any given key is not found.
+ */
+
+static VALUE
+rb_hash_fetch_values(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE result = rb_ary_new2(argc);
+    long i;
+
+    for (i=0; i<argc; i++) {
+        rb_ary_push(result, rb_hash_fetch(hash, argv[i]));
+    }
+    return result;
+}
+
+static int
+keep_if_i(VALUE key, VALUE value, VALUE hash)
+{
+    if (!RTEST(rb_yield_values(2, key, value))) {
+        rb_hash_modify(hash);
+        return ST_DELETE;
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.select {|key, value| ... } -> new_hash
+ *    hash.select -> new_enumerator
+ *
+ *  Returns a new \Hash object whose entries are those for which the block returns a truthy value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.select {|key, value| value < 2 } # => {:foo=>0, :bar=>1}
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.select # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:select>
+ *    e.each {|key, value| value < 2 } # => {:foo=>0, :bar=>1}
+ */
+
+static VALUE
+rb_hash_select(VALUE hash)
+{
+    VALUE result;
+
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    result = hash_dup_with_compare_by_id(hash);
+    if (!RHASH_EMPTY_P(hash)) {
+        rb_hash_foreach(result, keep_if_i, result);
+        compact_after_delete(result);
+    }
+    return result;
+}
+
+/*
+ *  call-seq:
+ *    hash.select! {|key, value| ... } -> self or nil
+ *    hash.select! -> new_enumerator
+ *
+ *  Returns +self+, whose entries are those for which the block returns a truthy value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.select! {|key, value| value < 2 }  => {:foo=>0, :bar=>1}
+ *
+ *  Returns +nil+ if no entries were removed.
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.select!  # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:select!>
+ *    e.each { |key, value| value < 2 } # => {:foo=>0, :bar=>1}
+ */
+
+static VALUE
+rb_hash_select_bang(VALUE hash)
+{
+    st_index_t n;
+
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    rb_hash_modify_check(hash);
+    n = RHASH_SIZE(hash);
+    if (!n) return Qnil;
+    rb_hash_foreach(hash, keep_if_i, hash);
+    if (n == RHASH_SIZE(hash)) return Qnil;
+    return hash;
+}
+
+/*
+ *  call-seq:
+ *    hash.keep_if {|key, value| ... } -> self
+ *    hash.keep_if -> new_enumerator
+ *
+ *  Calls the block for each key-value pair;
+ *  retains the entry if the block returns a truthy value;
+ *  otherwise deletes the entry; returns +self+.
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.keep_if { |key, value| key.start_with?('b') } # => {:bar=>1, :baz=>2}
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.keep_if # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:keep_if>
+ *    e.each { |key, value| key.start_with?('b') } # => {:bar=>1, :baz=>2}
+ */
+
+static VALUE
+rb_hash_keep_if(VALUE hash)
+{
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    rb_hash_modify_check(hash);
+    if (!RHASH_TABLE_EMPTY_P(hash)) {
+        rb_hash_foreach(hash, keep_if_i, hash);
+    }
+    return hash;
+}
+
+static int
+clear_i(VALUE key, VALUE value, VALUE dummy)
+{
+    return ST_DELETE;
+}
+
+/*
+ *  call-seq:
+ *    hash.clear -> self
+ *
+ *  Removes all hash entries; returns +self+.
+ */
+
+VALUE
+rb_hash_clear(VALUE hash)
+{
+    rb_hash_modify_check(hash);
+
+    if (hash_iterating_p(hash)) {
+        rb_hash_foreach(hash, clear_i, 0);
+    }
+    else if (RHASH_AR_TABLE_P(hash)) {
+        ar_clear(hash);
+    }
+    else {
+        st_clear(RHASH_ST_TABLE(hash));
+        compact_after_delete(hash);
+    }
+
+    return hash;
+}
+
+static int
+hash_aset(st_data_t *key, st_data_t *val, struct update_arg *arg, int existing)
+{
+    *val = arg->arg;
+    return ST_CONTINUE;
+}
+
+VALUE
+rb_hash_key_str(VALUE key)
+{
+    if (!RB_FL_ANY_RAW(key, FL_EXIVAR) && RBASIC_CLASS(key) == rb_cString) {
+        return rb_fstring(key);
+    }
+    else {
+        return rb_str_new_frozen(key);
+    }
+}
+
+static int
+hash_aset_str(st_data_t *key, st_data_t *val, struct update_arg *arg, int existing)
+{
+    if (!existing && !RB_OBJ_FROZEN(*key)) {
+        *key = rb_hash_key_str(*key);
+    }
+    return hash_aset(key, val, arg, existing);
+}
+
+NOINSERT_UPDATE_CALLBACK(hash_aset)
+NOINSERT_UPDATE_CALLBACK(hash_aset_str)
+
+/*
+ *  call-seq:
+ *    hash[key] = value -> value
+ *    hash.store(key, value)
+ *
+ *  Associates the given +value+ with the given +key+; returns +value+.
+ *
+ *  If the given +key+ exists, replaces its value with the given +value+;
+ *  the ordering is not affected
+ *  (see {Entry Order}[rdoc-ref:Hash@Entry+Order]):
+ *    h = {foo: 0, bar: 1}
+ *    h[:foo] = 2 # => 2
+ *    h.store(:bar, 3) # => 3
+ *    h # => {:foo=>2, :bar=>3}
+ *
+ *  If +key+ does not exist, adds the +key+ and +value+;
+ *  the new entry is last in the order
+ *  (see {Entry Order}[rdoc-ref:Hash@Entry+Order]):
+ *    h = {foo: 0, bar: 1}
+ *    h[:baz] = 2 # => 2
+ *    h.store(:bat, 3) # => 3
+ *    h # => {:foo=>0, :bar=>1, :baz=>2, :bat=>3}
+ */
+
+VALUE
+rb_hash_aset(VALUE hash, VALUE key, VALUE val)
+{
+    bool iter_p = hash_iterating_p(hash);
+
+    rb_hash_modify(hash);
+
+    if (!RHASH_STRING_KEY_P(hash, key)) {
+        RHASH_UPDATE_ITER(hash, iter_p, key, hash_aset, val);
+    }
+    else {
+        RHASH_UPDATE_ITER(hash, iter_p, key, hash_aset_str, val);
+    }
+    return val;
+}
+
+/*
+ *  call-seq:
+ *    hash.replace(other_hash) -> self
+ *
+ *  Replaces the entire contents of +self+ with the contents of +other_hash+;
+ *  returns +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.replace({bat: 3, bam: 4}) # => {:bat=>3, :bam=>4}
+ */
+
+static VALUE
+rb_hash_replace(VALUE hash, VALUE hash2)
+{
+    rb_hash_modify_check(hash);
+    if (hash == hash2) return hash;
+    if (hash_iterating_p(hash)) {
+        rb_raise(rb_eRuntimeError, "can't replace hash during iteration");
+    }
+    hash2 = to_hash(hash2);
+
+    COPY_DEFAULT(hash, hash2);
+
+    if (RHASH_AR_TABLE_P(hash)) {
+        hash_ar_free_and_clear_table(hash);
+    }
+    else {
+        hash_st_free_and_clear_table(hash);
+    }
+
+    hash_copy(hash, hash2);
+
+    return hash;
+}
+
+/*
+ *  call-seq:
+ *     hash.length -> integer
+ *     hash.size -> integer
+ *
+ *  Returns the count of entries in +self+:
+ *
+ *    {foo: 0, bar: 1, baz: 2}.length # => 3
+ *
+ */
+
+VALUE
+rb_hash_size(VALUE hash)
+{
+    return INT2FIX(RHASH_SIZE(hash));
+}
+
+size_t
+rb_hash_size_num(VALUE hash)
+{
+    return (long)RHASH_SIZE(hash);
+}
+
+/*
+ *  call-seq:
+ *    hash.empty? -> true or false
+ *
+ *  Returns +true+ if there are no hash entries, +false+ otherwise:
+ *    {}.empty? # => true
+ *    {foo: 0, bar: 1, baz: 2}.empty? # => false
+ */
+
+static VALUE
+rb_hash_empty_p(VALUE hash)
+{
+    return RBOOL(RHASH_EMPTY_P(hash));
+}
+
+static int
+each_value_i(VALUE key, VALUE value, VALUE _)
+{
+    rb_yield(value);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.each_value {|value| ... } -> self
+ *    hash.each_value -> new_enumerator
+ *
+ *  Calls the given block with each value; returns +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.each_value {|value| puts value } # => {:foo=>0, :bar=>1, :baz=>2}
+ *  Output:
+ *    0
+ *    1
+ *    2
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.each_value # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:each_value>
+ *    h1 = e.each {|value| puts value }
+ *    h1 # => {:foo=>0, :bar=>1, :baz=>2}
+ *  Output:
+ *    0
+ *    1
+ *    2
+ */
+
+static VALUE
+rb_hash_each_value(VALUE hash)
+{
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    rb_hash_foreach(hash, each_value_i, 0);
+    return hash;
+}
+
+static int
+each_key_i(VALUE key, VALUE value, VALUE _)
+{
+    rb_yield(key);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.each_key {|key| ... } -> self
+ *    hash.each_key -> new_enumerator
+ *
+ *  Calls the given block with each key; returns +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.each_key {|key| puts key }  # => {:foo=>0, :bar=>1, :baz=>2}
+ *  Output:
+ *    foo
+ *    bar
+ *    baz
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.each_key # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:each_key>
+ *    h1 = e.each {|key| puts key }
+ *    h1 # => {:foo=>0, :bar=>1, :baz=>2}
+ *  Output:
+ *    foo
+ *    bar
+ *    baz
+ */
+static VALUE
+rb_hash_each_key(VALUE hash)
+{
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    rb_hash_foreach(hash, each_key_i, 0);
+    return hash;
+}
+
+static int
+each_pair_i(VALUE key, VALUE value, VALUE _)
+{
+    rb_yield(rb_assoc_new(key, value));
+    return ST_CONTINUE;
+}
+
+static int
+each_pair_i_fast(VALUE key, VALUE value, VALUE _)
+{
+    VALUE argv[2];
+    argv[0] = key;
+    argv[1] = value;
+    rb_yield_values2(2, argv);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.each {|key, value| ... } -> self
+ *    hash.each_pair {|key, value| ... } -> self
+ *    hash.each -> new_enumerator
+ *    hash.each_pair -> new_enumerator
+ *
+ *  Calls the given block with each key-value pair; returns +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.each_pair {|key, value| puts "#{key}: #{value}"} # => {:foo=>0, :bar=>1, :baz=>2}
+ *  Output:
+ *    foo: 0
+ *    bar: 1
+ *    baz: 2
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.each_pair # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:each_pair>
+ *    h1 = e.each {|key, value| puts "#{key}: #{value}"}
+ *    h1 # => {:foo=>0, :bar=>1, :baz=>2}
+ *  Output:
+ *    foo: 0
+ *    bar: 1
+ *    baz: 2
+ */
+
+static VALUE
+rb_hash_each_pair(VALUE hash)
+{
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    if (rb_block_pair_yield_optimizable())
+        rb_hash_foreach(hash, each_pair_i_fast, 0);
+    else
+        rb_hash_foreach(hash, each_pair_i, 0);
+    return hash;
+}
+
+struct transform_keys_args{
+    VALUE trans;
+    VALUE result;
+    int block_given;
+};
+
+static int
+transform_keys_hash_i(VALUE key, VALUE value, VALUE transarg)
+{
+    struct transform_keys_args *p = (void *)transarg;
+    VALUE trans = p->trans, result = p->result;
+    VALUE new_key = rb_hash_lookup2(trans, key, Qundef);
+    if (UNDEF_P(new_key)) {
+        if (p->block_given)
+            new_key = rb_yield(key);
+        else
+            new_key = key;
+    }
+    rb_hash_aset(result, new_key, value);
+    return ST_CONTINUE;
+}
+
+static int
+transform_keys_i(VALUE key, VALUE value, VALUE result)
+{
+    VALUE new_key = rb_yield(key);
+    rb_hash_aset(result, new_key, value);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.transform_keys {|key| ... } -> new_hash
+ *    hash.transform_keys(hash2) -> new_hash
+ *    hash.transform_keys(hash2) {|other_key| ...} -> new_hash
+ *    hash.transform_keys -> new_enumerator
+ *
+ *  Returns a new \Hash object; each entry has:
+ *  * A key provided by the block.
+ *  * The value from +self+.
+ *
+ *  An optional hash argument can be provided to map keys to new keys.
+ *  Any key not given will be mapped using the provided block,
+ *  or remain the same if no block is given.
+ *
+ *  Transform keys:
+ *      h = {foo: 0, bar: 1, baz: 2}
+ *      h1 = h.transform_keys {|key| key.to_s }
+ *      h1 # => {"foo"=>0, "bar"=>1, "baz"=>2}
+ *
+ *      h.transform_keys(foo: :bar, bar: :foo)
+ *      #=> {bar: 0, foo: 1, baz: 2}
+ *
+ *      h.transform_keys(foo: :hello, &:to_s)
+ *      #=> {:hello=>0, "bar"=>1, "baz"=>2}
+ *
+ *  Overwrites values for duplicate keys:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = h.transform_keys {|key| :bat }
+ *    h1 # => {:bat=>2}
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.transform_keys # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:transform_keys>
+ *    h1 = e.each { |key| key.to_s }
+ *    h1 # => {"foo"=>0, "bar"=>1, "baz"=>2}
+ */
+static VALUE
+rb_hash_transform_keys(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE result;
+    struct transform_keys_args transarg = {0};
+
+    argc = rb_check_arity(argc, 0, 1);
+    if (argc > 0) {
+        transarg.trans = to_hash(argv[0]);
+        transarg.block_given = rb_block_given_p();
+    }
+    else {
+        RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    }
+    result = rb_hash_new();
+    if (!RHASH_EMPTY_P(hash)) {
+        if (transarg.trans) {
+            transarg.result = result;
+            rb_hash_foreach(hash, transform_keys_hash_i, (VALUE)&transarg);
+        }
+        else {
+            rb_hash_foreach(hash, transform_keys_i, result);
+        }
+    }
+
+    return result;
+}
+
+static int flatten_i(VALUE key, VALUE val, VALUE ary);
+
+/*
+ *  call-seq:
+ *    hash.transform_keys! {|key| ... } -> self
+ *    hash.transform_keys!(hash2) -> self
+ *    hash.transform_keys!(hash2) {|other_key| ...} -> self
+ *    hash.transform_keys! -> new_enumerator
+ *
+ *  Same as Hash#transform_keys but modifies the receiver in place
+ *  instead of returning a new hash.
+ */
+static VALUE
+rb_hash_transform_keys_bang(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE trans = 0;
+    int block_given = 0;
+
+    argc = rb_check_arity(argc, 0, 1);
+    if (argc > 0) {
+        trans = to_hash(argv[0]);
+        block_given = rb_block_given_p();
+    }
+    else {
+        RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    }
+    rb_hash_modify_check(hash);
+    if (!RHASH_TABLE_EMPTY_P(hash)) {
+        long i;
+        VALUE new_keys = hash_alloc(0);
+        VALUE pairs = rb_ary_hidden_new(RHASH_SIZE(hash) * 2);
+        rb_hash_foreach(hash, flatten_i, pairs);
+        for (i = 0; i < RARRAY_LEN(pairs); i += 2) {
+            VALUE key = RARRAY_AREF(pairs, i), new_key, val;
+
+            if (!trans) {
+                new_key = rb_yield(key);
+            }
+            else if (!UNDEF_P(new_key = rb_hash_lookup2(trans, key, Qundef))) {
+                /* use the transformed key */
+            }
+            else if (block_given) {
+                new_key = rb_yield(key);
+            }
+            else {
+                new_key = key;
+            }
+            val = RARRAY_AREF(pairs, i+1);
+            if (!hash_stlike_lookup(new_keys, key, NULL)) {
+                rb_hash_stlike_delete(hash, &key, NULL);
+            }
+            rb_hash_aset(hash, new_key, val);
+            rb_hash_aset(new_keys, new_key, Qnil);
+        }
+        rb_ary_clear(pairs);
+        rb_hash_clear(new_keys);
+    }
+    compact_after_delete(hash);
+    return hash;
+}
+
+static int
+transform_values_foreach_func(st_data_t key, st_data_t value, st_data_t argp, int error)
+{
+    return ST_REPLACE;
+}
+
+static int
+transform_values_foreach_replace(st_data_t *key, st_data_t *value, st_data_t argp, int existing)
+{
+    VALUE new_value = rb_yield((VALUE)*value);
+    VALUE hash = (VALUE)argp;
+    rb_hash_modify(hash);
+    RB_OBJ_WRITE(hash, value, new_value);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.transform_values {|value| ... } -> new_hash
+ *    hash.transform_values -> new_enumerator
+ *
+ *  Returns a new \Hash object; each entry has:
+ *  * A key from +self+.
+ *  * A value provided by the block.
+ *
+ *  Transform values:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = h.transform_values {|value| value * 100}
+ *    h1 # => {:foo=>0, :bar=>100, :baz=>200}
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.transform_values # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:transform_values>
+ *    h1 = e.each { |value| value * 100}
+ *    h1 # => {:foo=>0, :bar=>100, :baz=>200}
+ */
+static VALUE
+rb_hash_transform_values(VALUE hash)
+{
+    VALUE result;
+
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    result = hash_dup_with_compare_by_id(hash);
+    SET_DEFAULT(result, Qnil);
+
+    if (!RHASH_EMPTY_P(hash)) {
+        rb_hash_stlike_foreach_with_replace(result, transform_values_foreach_func, transform_values_foreach_replace, result);
+        compact_after_delete(result);
+    }
+
+    return result;
+}
+
+/*
+ *  call-seq:
+ *    hash.transform_values! {|value| ... } -> self
+ *    hash.transform_values! -> new_enumerator
+ *
+ *  Returns +self+, whose keys are unchanged, and whose values are determined by the given block.
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.transform_values! {|value| value * 100} # => {:foo=>0, :bar=>100, :baz=>200}
+ *
+ *  Returns a new Enumerator if no block given:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    e = h.transform_values! # => #<Enumerator: {:foo=>0, :bar=>100, :baz=>200}:transform_values!>
+ *    h1 = e.each {|value| value * 100}
+ *    h1 # => {:foo=>0, :bar=>100, :baz=>200}
+ */
+static VALUE
+rb_hash_transform_values_bang(VALUE hash)
+{
+    RETURN_SIZED_ENUMERATOR(hash, 0, 0, hash_enum_size);
+    rb_hash_modify_check(hash);
+
+    if (!RHASH_TABLE_EMPTY_P(hash)) {
+        rb_hash_stlike_foreach_with_replace(hash, transform_values_foreach_func, transform_values_foreach_replace, hash);
+    }
+
+    return hash;
+}
+
+static int
+to_a_i(VALUE key, VALUE value, VALUE ary)
+{
+    rb_ary_push(ary, rb_assoc_new(key, value));
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.to_a -> new_array
+ *
+ *  Returns a new Array of 2-element Array objects;
+ *  each nested Array contains a key-value pair from +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.to_a # => [[:foo, 0], [:bar, 1], [:baz, 2]]
+ */
+
+static VALUE
+rb_hash_to_a(VALUE hash)
+{
+    VALUE ary;
+
+    ary = rb_ary_new_capa(RHASH_SIZE(hash));
+    rb_hash_foreach(hash, to_a_i, ary);
+
+    return ary;
+}
+
+static int
+inspect_i(VALUE key, VALUE value, VALUE str)
+{
+    VALUE str2;
+
+    str2 = rb_inspect(key);
+    if (RSTRING_LEN(str) > 1) {
+        rb_str_buf_cat_ascii(str, ", ");
+    }
+    else {
+        rb_enc_copy(str, str2);
+    }
+    rb_str_buf_append(str, str2);
+    rb_str_buf_cat_ascii(str, "=>");
+    str2 = rb_inspect(value);
+    rb_str_buf_append(str, str2);
+
+    return ST_CONTINUE;
+}
+
+static VALUE
+inspect_hash(VALUE hash, VALUE dummy, int recur)
+{
+    VALUE str;
+
+    if (recur) return rb_usascii_str_new2("{...}");
+    str = rb_str_buf_new2("{");
+    rb_hash_foreach(hash, inspect_i, str);
+    rb_str_buf_cat2(str, "}");
+
+    return str;
+}
+
+/*
+ *  call-seq:
+ *    hash.inspect -> new_string
+ *
+ *  Returns a new String containing the hash entries:
+
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.inspect # => "{:foo=>0, :bar=>1, :baz=>2}"
+ *
+ */
+
+static VALUE
+rb_hash_inspect(VALUE hash)
+{
+    if (RHASH_EMPTY_P(hash))
+        return rb_usascii_str_new2("{}");
+    return rb_exec_recursive(inspect_hash, hash, 0);
+}
+
+/*
+ *  call-seq:
+ *    hash.to_hash -> self
+ *
+ *  Returns +self+.
+ */
+static VALUE
+rb_hash_to_hash(VALUE hash)
+{
+    return hash;
+}
+
+VALUE
+rb_hash_set_pair(VALUE hash, VALUE arg)
+{
+    VALUE pair;
+
+    pair = rb_check_array_type(arg);
+    if (NIL_P(pair)) {
+        rb_raise(rb_eTypeError, "wrong element type %s (expected array)",
+                 rb_builtin_class_name(arg));
+    }
+    if (RARRAY_LEN(pair) != 2) {
+        rb_raise(rb_eArgError, "element has wrong array length (expected 2, was %ld)",
+                 RARRAY_LEN(pair));
+    }
+    rb_hash_aset(hash, RARRAY_AREF(pair, 0), RARRAY_AREF(pair, 1));
+    return hash;
+}
+
+static int
+to_h_i(VALUE key, VALUE value, VALUE hash)
+{
+    rb_hash_set_pair(hash, rb_yield_values(2, key, value));
+    return ST_CONTINUE;
+}
+
+static VALUE
+rb_hash_to_h_block(VALUE hash)
+{
+    VALUE h = rb_hash_new_with_size(RHASH_SIZE(hash));
+    rb_hash_foreach(hash, to_h_i, h);
+    return h;
+}
+
+/*
+ *  call-seq:
+ *    hash.to_h -> self or new_hash
+ *    hash.to_h {|key, value| ... } -> new_hash
+ *
+ *  For an instance of \Hash, returns +self+.
+ *
+ *  For a subclass of \Hash, returns a new \Hash
+ *  containing the content of +self+.
+ *
+ *  When a block is given, returns a new \Hash object
+ *  whose content is based on the block;
+ *  the block should return a 2-element Array object
+ *  specifying the key-value pair to be included in the returned Array:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = h.to_h {|key, value| [value, key] }
+ *    h1 # => {0=>:foo, 1=>:bar, 2=>:baz}
+ */
+
+static VALUE
+rb_hash_to_h(VALUE hash)
+{
+    if (rb_block_given_p()) {
+        return rb_hash_to_h_block(hash);
+    }
+    if (rb_obj_class(hash) != rb_cHash) {
+        const VALUE flags = RBASIC(hash)->flags;
+        hash = hash_dup(hash, rb_cHash, flags & RHASH_PROC_DEFAULT);
+    }
+    return hash;
+}
+
+static int
+keys_i(VALUE key, VALUE value, VALUE ary)
+{
+    rb_ary_push(ary, key);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.keys -> new_array
+ *
+ *  Returns a new Array containing all keys in +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.keys # => [:foo, :bar, :baz]
+ */
+
+VALUE
+rb_hash_keys(VALUE hash)
+{
+    st_index_t size = RHASH_SIZE(hash);
+    VALUE keys =  rb_ary_new_capa(size);
+
+    if (size == 0) return keys;
+
+    if (ST_DATA_COMPATIBLE_P(VALUE)) {
+        RARRAY_PTR_USE(keys, ptr, {
+            if (RHASH_AR_TABLE_P(hash)) {
+                size = ar_keys(hash, ptr, size);
+            }
+            else {
+                st_table *table = RHASH_ST_TABLE(hash);
+                size = st_keys(table, ptr, size);
+            }
+        });
+        rb_gc_writebarrier_remember(keys);
+        rb_ary_set_len(keys, size);
+    }
+    else {
+        rb_hash_foreach(hash, keys_i, keys);
+    }
+
+    return keys;
+}
+
+static int
+values_i(VALUE key, VALUE value, VALUE ary)
+{
+    rb_ary_push(ary, value);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.values -> new_array
+ *
+ *  Returns a new Array containing all values in +self+:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.values # => [0, 1, 2]
+ */
+
+VALUE
+rb_hash_values(VALUE hash)
+{
+    VALUE values;
+    st_index_t size = RHASH_SIZE(hash);
+
+    values = rb_ary_new_capa(size);
+    if (size == 0) return values;
+
+    if (ST_DATA_COMPATIBLE_P(VALUE)) {
+        if (RHASH_AR_TABLE_P(hash)) {
+            rb_gc_writebarrier_remember(values);
+            RARRAY_PTR_USE(values, ptr, {
+                size = ar_values(hash, ptr, size);
+            });
+        }
+        else if (RHASH_ST_TABLE_P(hash)) {
+            st_table *table = RHASH_ST_TABLE(hash);
+            rb_gc_writebarrier_remember(values);
+            RARRAY_PTR_USE(values, ptr, {
+                size = st_values(table, ptr, size);
+            });
+        }
+        rb_ary_set_len(values, size);
+    }
+
+    else {
+        rb_hash_foreach(hash, values_i, values);
+    }
+
+    return values;
+}
+
+/*
+ *  call-seq:
+ *    hash.include?(key) -> true or false
+ *    hash.has_key?(key) -> true or false
+ *    hash.key?(key) -> true or false
+ *    hash.member?(key) -> true or false
+ *
+ *  Returns +true+ if +key+ is a key in +self+, otherwise +false+.
+ */
+
+VALUE
+rb_hash_has_key(VALUE hash, VALUE key)
+{
+    return RBOOL(hash_stlike_lookup(hash, key, NULL));
+}
+
+static int
+rb_hash_search_value(VALUE key, VALUE value, VALUE arg)
+{
+    VALUE *data = (VALUE *)arg;
+
+    if (rb_equal(value, data[1])) {
+        data[0] = Qtrue;
+        return ST_STOP;
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.has_value?(value) -> true or false
+ *    hash.value?(value) -> true or false
+ *
+ *  Returns +true+ if +value+ is a value in +self+, otherwise +false+.
+ */
+
+static VALUE
+rb_hash_has_value(VALUE hash, VALUE val)
+{
+    VALUE data[2];
+
+    data[0] = Qfalse;
+    data[1] = val;
+    rb_hash_foreach(hash, rb_hash_search_value, (VALUE)data);
+    return data[0];
+}
+
+struct equal_data {
+    VALUE result;
+    VALUE hash;
+    int eql;
+};
+
+static int
+eql_i(VALUE key, VALUE val1, VALUE arg)
+{
+    struct equal_data *data = (struct equal_data *)arg;
+    st_data_t val2;
+
+    if (!hash_stlike_lookup(data->hash, key, &val2)) {
+        data->result = Qfalse;
+        return ST_STOP;
+    }
+    else {
+        if (!(data->eql ? rb_eql(val1, (VALUE)val2) : (int)rb_equal(val1, (VALUE)val2))) {
+            data->result = Qfalse;
+            return ST_STOP;
+        }
+        return ST_CONTINUE;
+    }
+}
+
+static VALUE
+recursive_eql(VALUE hash, VALUE dt, int recur)
+{
+    struct equal_data *data;
+
+    if (recur) return Qtrue;	/* Subtle! */
+    data = (struct equal_data*)dt;
+    data->result = Qtrue;
+    rb_hash_foreach(hash, eql_i, dt);
+
+    return data->result;
+}
+
+static VALUE
+hash_equal(VALUE hash1, VALUE hash2, int eql)
+{
+    struct equal_data data;
+
+    if (hash1 == hash2) return Qtrue;
+    if (!RB_TYPE_P(hash2, T_HASH)) {
+        if (!rb_respond_to(hash2, idTo_hash)) {
+            return Qfalse;
+        }
+        if (eql) {
+            if (rb_eql(hash2, hash1)) {
+                return Qtrue;
+            }
+            else {
+                return Qfalse;
+            }
+        }
+        else {
+            return rb_equal(hash2, hash1);
+        }
+    }
+    if (RHASH_SIZE(hash1) != RHASH_SIZE(hash2))
+        return Qfalse;
+    if (!RHASH_TABLE_EMPTY_P(hash1) && !RHASH_TABLE_EMPTY_P(hash2)) {
+        if (RHASH_TYPE(hash1) != RHASH_TYPE(hash2)) {
+            return Qfalse;
+        }
+        else {
+            data.hash = hash2;
+            data.eql = eql;
+            return rb_exec_recursive_paired(recursive_eql, hash1, hash2, (VALUE)&data);
+        }
+    }
+
+#if 0
+    if (!(rb_equal(RHASH_IFNONE(hash1), RHASH_IFNONE(hash2)) &&
+          FL_TEST(hash1, RHASH_PROC_DEFAULT) == FL_TEST(hash2, RHASH_PROC_DEFAULT)))
+        return Qfalse;
+#endif
+    return Qtrue;
+}
+
+/*
+ *  call-seq:
+ *    hash == object -> true or false
+ *
+ *  Returns +true+ if all of the following are true:
+ *  * +object+ is a \Hash object.
+ *  * +hash+ and +object+ have the same keys (regardless of order).
+ *  * For each key +key+, <tt>hash[key] == object[key]</tt>.
+ *
+ *  Otherwise, returns +false+.
+ *
+ *  Equal:
+ *    h1 = {foo: 0, bar: 1, baz: 2}
+ *    h2 = {foo: 0, bar: 1, baz: 2}
+ *    h1 == h2 # => true
+ *    h3 = {baz: 2, bar: 1, foo: 0}
+ *    h1 == h3 # => true
+ */
+
+static VALUE
+rb_hash_equal(VALUE hash1, VALUE hash2)
+{
+    return hash_equal(hash1, hash2, FALSE);
+}
+
+/*
+ *  call-seq:
+ *    hash.eql? object -> true or false
+ *
+ *  Returns +true+ if all of the following are true:
+ *  * +object+ is a \Hash object.
+ *  * +hash+ and +object+ have the same keys (regardless of order).
+ *  * For each key +key+, <tt>h[key] eql? object[key]</tt>.
+ *
+ *  Otherwise, returns +false+.
+ *
+ *  Equal:
+ *    h1 = {foo: 0, bar: 1, baz: 2}
+ *    h2 = {foo: 0, bar: 1, baz: 2}
+ *    h1.eql? h2 # => true
+ *    h3 = {baz: 2, bar: 1, foo: 0}
+ *    h1.eql? h3 # => true
+ */
+
+static VALUE
+rb_hash_eql(VALUE hash1, VALUE hash2)
+{
+    return hash_equal(hash1, hash2, TRUE);
+}
+
+static int
+hash_i(VALUE key, VALUE val, VALUE arg)
+{
+    st_index_t *hval = (st_index_t *)arg;
+    st_index_t hdata[2];
+
+    hdata[0] = rb_hash(key);
+    hdata[1] = rb_hash(val);
+    *hval ^= st_hash(hdata, sizeof(hdata), 0);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.hash -> an_integer
+ *
+ *  Returns the Integer hash-code for the hash.
+ *
+ *  Two \Hash objects have the same hash-code if their content is the same
+ *  (regardless of order):
+ *    h1 = {foo: 0, bar: 1, baz: 2}
+ *    h2 = {baz: 2, bar: 1, foo: 0}
+ *    h2.hash == h1.hash # => true
+ *    h2.eql? h1 # => true
+ */
+
+static VALUE
+rb_hash_hash(VALUE hash)
+{
+    st_index_t size = RHASH_SIZE(hash);
+    st_index_t hval = rb_hash_start(size);
+    hval = rb_hash_uint(hval, (st_index_t)rb_hash_hash);
+    if (size) {
+        rb_hash_foreach(hash, hash_i, (VALUE)&hval);
+    }
+    hval = rb_hash_end(hval);
+    return ST2FIX(hval);
+}
+
+static int
+rb_hash_invert_i(VALUE key, VALUE value, VALUE hash)
+{
+    rb_hash_aset(hash, value, key);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.invert -> new_hash
+ *
+ *  Returns a new \Hash object with the each key-value pair inverted:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = h.invert
+ *    h1 # => {0=>:foo, 1=>:bar, 2=>:baz}
+ *
+ *  Overwrites any repeated new keys:
+ *  (see {Entry Order}[rdoc-ref:Hash@Entry+Order]):
+ *    h = {foo: 0, bar: 0, baz: 0}
+ *    h.invert # => {0=>:baz}
+ */
+
+static VALUE
+rb_hash_invert(VALUE hash)
+{
+    VALUE h = rb_hash_new_with_size(RHASH_SIZE(hash));
+
+    rb_hash_foreach(hash, rb_hash_invert_i, h);
+    return h;
+}
+
+static int
+rb_hash_update_i(VALUE key, VALUE value, VALUE hash)
+{
+    rb_hash_aset(hash, key, value);
+    return ST_CONTINUE;
+}
+
+static int
+rb_hash_update_block_callback(st_data_t *key, st_data_t *value, struct update_arg *arg, int existing)
+{
+    st_data_t newvalue = arg->arg;
+
+    if (existing) {
+        newvalue = (st_data_t)rb_yield_values(3, (VALUE)*key, (VALUE)*value, (VALUE)newvalue);
+    }
+    else if (RHASH_STRING_KEY_P(arg->hash, *key) && !RB_OBJ_FROZEN(*key)) {
+        *key = rb_hash_key_str(*key);
+    }
+    *value = newvalue;
+    return ST_CONTINUE;
+}
+
+NOINSERT_UPDATE_CALLBACK(rb_hash_update_block_callback)
+
+static int
+rb_hash_update_block_i(VALUE key, VALUE value, VALUE hash)
+{
+    RHASH_UPDATE(hash, key, rb_hash_update_block_callback, value);
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.merge! -> self
+ *    hash.merge!(*other_hashes) -> self
+ *    hash.merge!(*other_hashes) { |key, old_value, new_value| ... } -> self
+ *
+ *  Merges each of +other_hashes+ into +self+; returns +self+.
+ *
+ *  Each argument in +other_hashes+ must be a \Hash.
+ *
+ *  With arguments and no block:
+ *  * Returns +self+, after the given hashes are merged into it.
+ *  * The given hashes are merged left to right.
+ *  * Each new entry is added at the end.
+ *  * Each duplicate-key entry's value overwrites the previous value.
+ *
+ *  Example:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = {bat: 3, bar: 4}
+ *    h2 = {bam: 5, bat:6}
+ *    h.merge!(h1, h2) # => {:foo=>0, :bar=>4, :baz=>2, :bat=>6, :bam=>5}
+ *
+ *  With arguments and a block:
+ *  * Returns +self+, after the given hashes are merged.
+ *  *  The given hashes are merged left to right.
+ *  *  Each new-key entry is added at the end.
+ *  *  For each duplicate key:
+ *     * Calls the block with the key and the old and new values.
+ *     * The block's return value becomes the new value for the entry.
+ *
+ *  Example:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = {bat: 3, bar: 4}
+ *    h2 = {bam: 5, bat:6}
+ *    h3 = h.merge!(h1, h2) { |key, old_value, new_value| old_value + new_value }
+ *    h3 # => {:foo=>0, :bar=>5, :baz=>2, :bat=>9, :bam=>5}
+ *
+ *  With no arguments:
+ *  * Returns +self+, unmodified.
+ *  * The block, if given, is ignored.
+ *
+ *  Example:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.merge # => {:foo=>0, :bar=>1, :baz=>2}
+ *    h1 = h.merge! { |key, old_value, new_value| raise 'Cannot happen' }
+ *    h1 # => {:foo=>0, :bar=>1, :baz=>2}
+ */
+
+static VALUE
+rb_hash_update(int argc, VALUE *argv, VALUE self)
+{
+    int i;
+    bool block_given = rb_block_given_p();
+
+    rb_hash_modify(self);
+    for (i = 0; i < argc; i++){
+        VALUE hash = to_hash(argv[i]);
+        if (block_given) {
+            rb_hash_foreach(hash, rb_hash_update_block_i, self);
+        }
+        else {
+            rb_hash_foreach(hash, rb_hash_update_i, self);
+        }
+    }
+    return self;
+}
+
+struct update_func_arg {
+    VALUE hash;
+    VALUE value;
+    rb_hash_update_func *func;
+};
+
+static int
+rb_hash_update_func_callback(st_data_t *key, st_data_t *value, struct update_arg *arg, int existing)
+{
+    struct update_func_arg *uf_arg = (struct update_func_arg *)arg->arg;
+    VALUE newvalue = uf_arg->value;
+
+    if (existing) {
+        newvalue = (*uf_arg->func)((VALUE)*key, (VALUE)*value, newvalue);
+    }
+    *value = newvalue;
+    return ST_CONTINUE;
+}
+
+NOINSERT_UPDATE_CALLBACK(rb_hash_update_func_callback)
+
+static int
+rb_hash_update_func_i(VALUE key, VALUE value, VALUE arg0)
+{
+    struct update_func_arg *arg = (struct update_func_arg *)arg0;
+    VALUE hash = arg->hash;
+
+    arg->value = value;
+    RHASH_UPDATE(hash, key, rb_hash_update_func_callback, (VALUE)arg);
+    return ST_CONTINUE;
+}
+
+VALUE
+rb_hash_update_by(VALUE hash1, VALUE hash2, rb_hash_update_func *func)
+{
+    rb_hash_modify(hash1);
+    hash2 = to_hash(hash2);
+    if (func) {
+        struct update_func_arg arg;
+        arg.hash = hash1;
+        arg.func = func;
+        rb_hash_foreach(hash2, rb_hash_update_func_i, (VALUE)&arg);
+    }
+    else {
+        rb_hash_foreach(hash2, rb_hash_update_i, hash1);
+    }
+    return hash1;
+}
+
+/*
+ *  call-seq:
+ *    hash.merge -> copy_of_self
+ *    hash.merge(*other_hashes) -> new_hash
+ *    hash.merge(*other_hashes) { |key, old_value, new_value| ... } -> new_hash
+ *
+ *  Returns the new \Hash formed by merging each of +other_hashes+
+ *  into a copy of +self+.
+ *
+ *  Each argument in +other_hashes+ must be a \Hash.
+ *
+ *  ---
+ *
+ *  With arguments and no block:
+ *  * Returns the new \Hash object formed by merging each successive
+ *    \Hash in +other_hashes+ into +self+.
+ *  * Each new-key entry is added at the end.
+ *  * Each duplicate-key entry's value overwrites the previous value.
+ *
+ *  Example:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = {bat: 3, bar: 4}
+ *    h2 = {bam: 5, bat:6}
+ *    h.merge(h1, h2) # => {:foo=>0, :bar=>4, :baz=>2, :bat=>6, :bam=>5}
+ *
+ *  With arguments and a block:
+ *  * Returns a new \Hash object that is the merge of +self+ and each given hash.
+ *  * The given hashes are merged left to right.
+ *  * Each new-key entry is added at the end.
+ *  * For each duplicate key:
+ *    * Calls the block with the key and the old and new values.
+ *    * The block's return value becomes the new value for the entry.
+ *
+ *  Example:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h1 = {bat: 3, bar: 4}
+ *    h2 = {bam: 5, bat:6}
+ *    h3 = h.merge(h1, h2) { |key, old_value, new_value| old_value + new_value }
+ *    h3 # => {:foo=>0, :bar=>5, :baz=>2, :bat=>9, :bam=>5}
+ *
+ *  With no arguments:
+ *  * Returns a copy of +self+.
+ *  * The block, if given, is ignored.
+ *
+ *  Example:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.merge # => {:foo=>0, :bar=>1, :baz=>2}
+ *    h1 = h.merge { |key, old_value, new_value| raise 'Cannot happen' }
+ *    h1 # => {:foo=>0, :bar=>1, :baz=>2}
+ */
+
+static VALUE
+rb_hash_merge(int argc, VALUE *argv, VALUE self)
+{
+    return rb_hash_update(argc, argv, copy_compare_by_id(rb_hash_dup(self), self));
+}
+
+static int
+assoc_cmp(VALUE a, VALUE b)
+{
+    return !RTEST(rb_equal(a, b));
+}
+
+struct assoc_arg {
+    st_table *tbl;
+    st_data_t key;
+};
+
+static VALUE
+assoc_lookup(VALUE arg)
+{
+    struct assoc_arg *p = (struct assoc_arg*)arg;
+    st_data_t data;
+    if (st_lookup(p->tbl, p->key, &data)) return (VALUE)data;
+    return Qundef;
+}
+
+static int
+assoc_i(VALUE key, VALUE val, VALUE arg)
+{
+    VALUE *args = (VALUE *)arg;
+
+    if (RTEST(rb_equal(args[0], key))) {
+        args[1] = rb_assoc_new(key, val);
+        return ST_STOP;
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.assoc(key) -> new_array or nil
+ *
+ *  If the given +key+ is found, returns a 2-element Array containing that key and its value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.assoc(:bar) # => [:bar, 1]
+ *
+ *  Returns +nil+ if key +key+ is not found.
+ */
+
+static VALUE
+rb_hash_assoc(VALUE hash, VALUE key)
+{
+    VALUE args[2];
+
+    if (RHASH_EMPTY_P(hash)) return Qnil;
+
+    if (RHASH_ST_TABLE_P(hash) && !RHASH_IDENTHASH_P(hash)) {
+        VALUE value = Qundef;
+        st_table assoctable = *RHASH_ST_TABLE(hash);
+        assoctable.type = &(struct st_hash_type){
+            .compare = assoc_cmp,
+            .hash = assoctable.type->hash,
+        };
+        VALUE arg = (VALUE)&(struct assoc_arg){
+            .tbl = &assoctable,
+            .key = (st_data_t)key,
+        };
+
+        if (RB_OBJ_FROZEN(hash)) {
+            value = assoc_lookup(arg);
+        }
+        else {
+            hash_iter_lev_inc(hash);
+            value = rb_ensure(assoc_lookup, arg, hash_foreach_ensure, hash);
+        }
+        hash_verify(hash);
+        if (!UNDEF_P(value)) return rb_assoc_new(key, value);
+    }
+
+    args[0] = key;
+    args[1] = Qnil;
+    rb_hash_foreach(hash, assoc_i, (VALUE)args);
+    return args[1];
+}
+
+static int
+rassoc_i(VALUE key, VALUE val, VALUE arg)
+{
+    VALUE *args = (VALUE *)arg;
+
+    if (RTEST(rb_equal(args[0], val))) {
+        args[1] = rb_assoc_new(key, val);
+        return ST_STOP;
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.rassoc(value) -> new_array or nil
+ *
+ *  Returns a new 2-element Array consisting of the key and value
+ *  of the first-found entry whose value is <tt>==</tt> to value
+ *  (see {Entry Order}[rdoc-ref:Hash@Entry+Order]):
+ *    h = {foo: 0, bar: 1, baz: 1}
+ *    h.rassoc(1) # => [:bar, 1]
+ *
+ *  Returns +nil+ if no such value found.
+ */
+
+static VALUE
+rb_hash_rassoc(VALUE hash, VALUE obj)
+{
+    VALUE args[2];
+
+    args[0] = obj;
+    args[1] = Qnil;
+    rb_hash_foreach(hash, rassoc_i, (VALUE)args);
+    return args[1];
+}
+
+static int
+flatten_i(VALUE key, VALUE val, VALUE ary)
+{
+    VALUE pair[2];
+
+    pair[0] = key;
+    pair[1] = val;
+    rb_ary_cat(ary, pair, 2);
+
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *     hash.flatten -> new_array
+ *     hash.flatten(level) -> new_array
+ *
+ *  Returns a new Array object that is a 1-dimensional flattening of +self+.
+ *
+ *  ---
+ *
+ *  By default, nested Arrays are not flattened:
+ *    h = {foo: 0, bar: [:bat, 3], baz: 2}
+ *    h.flatten # => [:foo, 0, :bar, [:bat, 3], :baz, 2]
+ *
+ *  Takes the depth of recursive flattening from Integer argument +level+:
+ *    h = {foo: 0, bar: [:bat, [:baz, [:bat, ]]]}
+ *    h.flatten(1) # => [:foo, 0, :bar, [:bat, [:baz, [:bat]]]]
+ *    h.flatten(2) # => [:foo, 0, :bar, :bat, [:baz, [:bat]]]
+ *    h.flatten(3) # => [:foo, 0, :bar, :bat, :baz, [:bat]]
+ *    h.flatten(4) # => [:foo, 0, :bar, :bat, :baz, :bat]
+ *
+ *  When +level+ is negative, flattens all nested Arrays:
+ *    h = {foo: 0, bar: [:bat, [:baz, [:bat, ]]]}
+ *    h.flatten(-1) # => [:foo, 0, :bar, :bat, :baz, :bat]
+ *    h.flatten(-2) # => [:foo, 0, :bar, :bat, :baz, :bat]
+ *
+ *  When +level+ is zero, returns the equivalent of #to_a :
+ *    h = {foo: 0, bar: [:bat, 3], baz: 2}
+ *    h.flatten(0) # => [[:foo, 0], [:bar, [:bat, 3]], [:baz, 2]]
+ *    h.flatten(0) == h.to_a # => true
+ */
+
+static VALUE
+rb_hash_flatten(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE ary;
+
+    rb_check_arity(argc, 0, 1);
+
+    if (argc) {
+        int level = NUM2INT(argv[0]);
+
+        if (level == 0) return rb_hash_to_a(hash);
+
+        ary = rb_ary_new_capa(RHASH_SIZE(hash) * 2);
+        rb_hash_foreach(hash, flatten_i, ary);
+        level--;
+
+        if (level > 0) {
+            VALUE ary_flatten_level = INT2FIX(level);
+            rb_funcallv(ary, id_flatten_bang, 1, &ary_flatten_level);
+        }
+        else if (level < 0) {
+            /* flatten recursively */
+            rb_funcallv(ary, id_flatten_bang, 0, 0);
+        }
+    }
+    else {
+        ary = rb_ary_new_capa(RHASH_SIZE(hash) * 2);
+        rb_hash_foreach(hash, flatten_i, ary);
+    }
+
+    return ary;
+}
+
+static int
+delete_if_nil(VALUE key, VALUE value, VALUE hash)
+{
+    if (NIL_P(value)) {
+        return ST_DELETE;
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.compact -> new_hash
+ *
+ *  Returns a copy of +self+ with all +nil+-valued entries removed:
+ *    h = {foo: 0, bar: nil, baz: 2, bat: nil}
+ *    h1 = h.compact
+ *    h1 # => {:foo=>0, :baz=>2}
+ */
+
+static VALUE
+rb_hash_compact(VALUE hash)
+{
+    VALUE result = rb_hash_dup(hash);
+    if (!RHASH_EMPTY_P(hash)) {
+        rb_hash_foreach(result, delete_if_nil, result);
+        compact_after_delete(result);
+    }
+    else if (rb_hash_compare_by_id_p(hash)) {
+        result = rb_hash_compare_by_id(result);
+    }
+    return result;
+}
+
+/*
+ *  call-seq:
+ *    hash.compact! -> self or nil
+ *
+ *  Returns +self+ with all its +nil+-valued entries removed (in place):
+ *    h = {foo: 0, bar: nil, baz: 2, bat: nil}
+ *    h.compact! # => {:foo=>0, :baz=>2}
+ *
+ *  Returns +nil+ if no entries were removed.
+ */
+
+static VALUE
+rb_hash_compact_bang(VALUE hash)
+{
+    st_index_t n;
+    rb_hash_modify_check(hash);
+    n = RHASH_SIZE(hash);
+    if (n) {
+        rb_hash_foreach(hash, delete_if_nil, hash);
+        if (n != RHASH_SIZE(hash))
+            return hash;
+    }
+    return Qnil;
+}
+
+/*
+ *  call-seq:
+ *    hash.compare_by_identity -> self
+ *
+ *  Sets +self+ to consider only identity in comparing keys;
+ *  two keys are considered the same only if they are the same object;
+ *  returns +self+.
+ *
+ *  By default, these two object are considered to be the same key,
+ *  so +s1+ will overwrite +s0+:
+ *    s0 = 'x'
+ *    s1 = 'x'
+ *    h = {}
+ *    h.compare_by_identity? # => false
+ *    h[s0] = 0
+ *    h[s1] = 1
+ *    h # => {"x"=>1}
+ *
+ *  After calling \#compare_by_identity, the keys are considered to be different,
+ *  and therefore do not overwrite each other:
+ *    h = {}
+ *    h.compare_by_identity # => {}
+ *    h.compare_by_identity? # => true
+ *    h[s0] = 0
+ *    h[s1] = 1
+ *    h # => {"x"=>0, "x"=>1}
+ */
+
+VALUE
+rb_hash_compare_by_id(VALUE hash)
+{
+    VALUE tmp;
+    st_table *identtable;
+
+    if (rb_hash_compare_by_id_p(hash)) return hash;
+
+    rb_hash_modify_check(hash);
+    if (hash_iterating_p(hash)) {
+        rb_raise(rb_eRuntimeError, "compare_by_identity during iteration");
+    }
+
+    if (RHASH_TABLE_EMPTY_P(hash)) {
+        // Fast path: There's nothing to rehash, so we don't need a `tmp` table.
+        // We're most likely an AR table, so this will need an allocation.
+        ar_force_convert_table(hash, __FILE__, __LINE__);
+        HASH_ASSERT(RHASH_ST_TABLE_P(hash));
+
+        RHASH_ST_TABLE(hash)->type = &identhash;
+    }
+    else {
+        // Slow path: Need to rehash the members of `self` into a new
+        // `tmp` table using the new `identhash` compare/hash functions.
+        tmp = hash_alloc(0);
+        hash_st_table_init(tmp, &identhash, RHASH_SIZE(hash));
+        identtable = RHASH_ST_TABLE(tmp);
+
+        rb_hash_foreach(hash, rb_hash_rehash_i, (VALUE)tmp);
+        rb_hash_free(hash);
+
+        // We know for sure `identtable` is an st table,
+        // so we can skip `ar_force_convert_table` here.
+        RHASH_ST_TABLE_SET(hash, identtable);
+        RHASH_ST_CLEAR(tmp);
+    }
+
+    return hash;
+}
+
+/*
+ *  call-seq:
+ *    hash.compare_by_identity? -> true or false
+ *
+ *  Returns +true+ if #compare_by_identity has been called, +false+ otherwise.
+ */
+
+VALUE
+rb_hash_compare_by_id_p(VALUE hash)
+{
+    return RBOOL(RHASH_IDENTHASH_P(hash));
+}
+
+VALUE
+rb_ident_hash_new(void)
+{
+    VALUE hash = rb_hash_new();
+    hash_st_table_init(hash, &identhash, 0);
+    return hash;
+}
+
+VALUE
+rb_ident_hash_new_with_size(st_index_t size)
+{
+    VALUE hash = rb_hash_new();
+    hash_st_table_init(hash, &identhash, size);
+    return hash;
+}
+
+st_table *
+rb_init_identtable(void)
+{
+    return st_init_table(&identhash);
+}
+
+static int
+any_p_i(VALUE key, VALUE value, VALUE arg)
+{
+    VALUE ret = rb_yield(rb_assoc_new(key, value));
+    if (RTEST(ret)) {
+        *(VALUE *)arg = Qtrue;
+        return ST_STOP;
+    }
+    return ST_CONTINUE;
+}
+
+static int
+any_p_i_fast(VALUE key, VALUE value, VALUE arg)
+{
+    VALUE ret = rb_yield_values(2, key, value);
+    if (RTEST(ret)) {
+        *(VALUE *)arg = Qtrue;
+        return ST_STOP;
+    }
+    return ST_CONTINUE;
+}
+
+static int
+any_p_i_pattern(VALUE key, VALUE value, VALUE arg)
+{
+    VALUE ret = rb_funcall(((VALUE *)arg)[1], idEqq, 1, rb_assoc_new(key, value));
+    if (RTEST(ret)) {
+        *(VALUE *)arg = Qtrue;
+        return ST_STOP;
+    }
+    return ST_CONTINUE;
+}
+
+/*
+ *  call-seq:
+ *    hash.any? -> true or false
+ *    hash.any?(object) -> true or false
+ *    hash.any? {|key, value| ... } -> true or false
+ *
+ *  Returns +true+ if any element satisfies a given criterion;
+ *  +false+ otherwise.
+ *
+ *  If +self+ has no element, returns +false+ and argument or block
+ *  are not used.
+ *
+ *  With no argument and no block,
+ *  returns +true+ if +self+ is non-empty; +false+ if empty.
+ *
+ *  With argument +object+ and no block,
+ *  returns +true+ if for any key +key+
+ *  <tt>h.assoc(key) == object</tt>:
+ *   h = {foo: 0, bar: 1, baz: 2}
+ *   h.any?([:bar, 1]) # => true
+ *   h.any?([:bar, 0]) # => false
+ *   h.any?([:baz, 1]) # => false
+ *
+ *  With no argument and a block,
+ *  calls the block with each key-value pair;
+ *  returns +true+ if the block returns any truthy value,
+ *  +false+ otherwise:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.any? {|key, value| value < 3 } # => true
+ *    h.any? {|key, value| value > 3 } # => false
+ *
+ *  Related: Enumerable#any?
+ */
+
+static VALUE
+rb_hash_any_p(int argc, VALUE *argv, VALUE hash)
+{
+    VALUE args[2];
+    args[0] = Qfalse;
+
+    rb_check_arity(argc, 0, 1);
+    if (RHASH_EMPTY_P(hash)) return Qfalse;
+    if (argc) {
+        if (rb_block_given_p()) {
+            rb_warn("given block not used");
+        }
+        args[1] = argv[0];
+
+        rb_hash_foreach(hash, any_p_i_pattern, (VALUE)args);
+    }
+    else {
+        if (!rb_block_given_p()) {
+            /* yields pairs, never false */
+            return Qtrue;
+        }
+        if (rb_block_pair_yield_optimizable())
+            rb_hash_foreach(hash, any_p_i_fast, (VALUE)args);
+        else
+            rb_hash_foreach(hash, any_p_i, (VALUE)args);
+    }
+    return args[0];
+}
+
+/*
+ *  call-seq:
+ *    hash.dig(key, *identifiers) -> object
+ *
+ *  Finds and returns the object in nested objects
+ *  that is specified by +key+ and +identifiers+.
+ *  The nested objects may be instances of various classes.
+ *  See {Dig Methods}[rdoc-ref:dig_methods.rdoc].
+ *
+ *  Nested Hashes:
+ *    h = {foo: {bar: {baz: 2}}}
+ *    h.dig(:foo) # => {:bar=>{:baz=>2}}
+ *    h.dig(:foo, :bar) # => {:baz=>2}
+ *    h.dig(:foo, :bar, :baz) # => 2
+ *    h.dig(:foo, :bar, :BAZ) # => nil
+ *
+ *  Nested Hashes and Arrays:
+ *    h = {foo: {bar: [:a, :b, :c]}}
+ *    h.dig(:foo, :bar, 2) # => :c
+ *
+ *  This method will use the {default values}[rdoc-ref:Hash@Default+Values]
+ *  for keys that are not present:
+ *    h = {foo: {bar: [:a, :b, :c]}}
+ *    h.dig(:hello) # => nil
+ *    h.default_proc = -> (hash, _key) { hash }
+ *    h.dig(:hello, :world) # => h
+ *    h.dig(:hello, :world, :foo, :bar, 2) # => :c
+ */
+
+static VALUE
+rb_hash_dig(int argc, VALUE *argv, VALUE self)
+{
+    rb_check_arity(argc, 1, UNLIMITED_ARGUMENTS);
+    self = rb_hash_aref(self, *argv);
+    if (!--argc) return self;
+    ++argv;
+    return rb_obj_dig(argc, argv, self, Qnil);
+}
+
+static int
+hash_le_i(VALUE key, VALUE value, VALUE arg)
+{
+    VALUE *args = (VALUE *)arg;
+    VALUE v = rb_hash_lookup2(args[0], key, Qundef);
+    if (!UNDEF_P(v) && rb_equal(value, v)) return ST_CONTINUE;
+    args[1] = Qfalse;
+    return ST_STOP;
+}
+
+static VALUE
+hash_le(VALUE hash1, VALUE hash2)
+{
+    VALUE args[2];
+    args[0] = hash2;
+    args[1] = Qtrue;
+    rb_hash_foreach(hash1, hash_le_i, (VALUE)args);
+    return args[1];
+}
+
+/*
+ *  call-seq:
+ *    hash <= other_hash -> true or false
+ *
+ *  Returns +true+ if +hash+ is a subset of +other_hash+, +false+ otherwise:
+ *    h1 = {foo: 0, bar: 1}
+ *    h2 = {foo: 0, bar: 1, baz: 2}
+ *    h1 <= h2 # => true
+ *    h2 <= h1 # => false
+ *    h1 <= h1 # => true
+ */
+static VALUE
+rb_hash_le(VALUE hash, VALUE other)
+{
+    other = to_hash(other);
+    if (RHASH_SIZE(hash) > RHASH_SIZE(other)) return Qfalse;
+    return hash_le(hash, other);
+}
+
+/*
+ *  call-seq:
+ *    hash < other_hash -> true or false
+ *
+ *  Returns +true+ if +hash+ is a proper subset of +other_hash+, +false+ otherwise:
+ *    h1 = {foo: 0, bar: 1}
+ *    h2 = {foo: 0, bar: 1, baz: 2}
+ *    h1 < h2 # => true
+ *    h2 < h1 # => false
+ *    h1 < h1 # => false
+ */
+static VALUE
+rb_hash_lt(VALUE hash, VALUE other)
+{
+    other = to_hash(other);
+    if (RHASH_SIZE(hash) >= RHASH_SIZE(other)) return Qfalse;
+    return hash_le(hash, other);
+}
+
+/*
+ *  call-seq:
+ *    hash >= other_hash -> true or false
+ *
+ *  Returns +true+ if +hash+ is a superset of +other_hash+, +false+ otherwise:
+ *    h1 = {foo: 0, bar: 1, baz: 2}
+ *    h2 = {foo: 0, bar: 1}
+ *    h1 >= h2 # => true
+ *    h2 >= h1 # => false
+ *    h1 >= h1 # => true
+ */
+static VALUE
+rb_hash_ge(VALUE hash, VALUE other)
+{
+    other = to_hash(other);
+    if (RHASH_SIZE(hash) < RHASH_SIZE(other)) return Qfalse;
+    return hash_le(other, hash);
+}
+
+/*
+ *  call-seq:
+ *    hash > other_hash -> true or false
+ *
+ *  Returns +true+ if +hash+ is a proper superset of +other_hash+, +false+ otherwise:
+ *    h1 = {foo: 0, bar: 1, baz: 2}
+ *    h2 = {foo: 0, bar: 1}
+ *    h1 > h2 # => true
+ *    h2 > h1 # => false
+ *    h1 > h1 # => false
+ */
+static VALUE
+rb_hash_gt(VALUE hash, VALUE other)
+{
+    other = to_hash(other);
+    if (RHASH_SIZE(hash) <= RHASH_SIZE(other)) return Qfalse;
+    return hash_le(other, hash);
+}
+
+static VALUE
+hash_proc_call(RB_BLOCK_CALL_FUNC_ARGLIST(key, hash))
+{
+    rb_check_arity(argc, 1, 1);
+    return rb_hash_aref(hash, *argv);
+}
+
+/*
+ *  call-seq:
+ *    hash.to_proc -> proc
+ *
+ *  Returns a Proc object that maps a key to its value:
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    proc = h.to_proc
+ *    proc.class # => Proc
+ *    proc.call(:foo) # => 0
+ *    proc.call(:bar) # => 1
+ *    proc.call(:nosuch) # => nil
+ */
+static VALUE
+rb_hash_to_proc(VALUE hash)
+{
+    return rb_func_lambda_new(hash_proc_call, hash, 1, 1);
+}
+
+/* :nodoc: */
+static VALUE
+rb_hash_deconstruct_keys(VALUE hash, VALUE keys)
+{
+    return hash;
+}
+
+static int
+add_new_i(st_data_t *key, st_data_t *val, st_data_t arg, int existing)
+{
+    VALUE *args = (VALUE *)arg;
+    if (existing) return ST_STOP;
+    RB_OBJ_WRITTEN(args[0], Qundef, (VALUE)*key);
+    RB_OBJ_WRITE(args[0], (VALUE *)val, args[1]);
+    return ST_CONTINUE;
+}
+
+/*
+ * add +key+ to +val+ pair if +hash+ does not contain +key+.
+ * returns non-zero if +key+ was contained.
+ */
+int
+rb_hash_add_new_element(VALUE hash, VALUE key, VALUE val)
+{
+    st_table *tbl;
+    int ret = 0;
+    VALUE args[2];
+    args[0] = hash;
+    args[1] = val;
+
+    if (RHASH_AR_TABLE_P(hash)) {
+        ret = ar_update(hash, (st_data_t)key, add_new_i, (st_data_t)args);
+        if (ret != -1) {
+            return ret;
+        }
+        ar_force_convert_table(hash, __FILE__, __LINE__);
+    }
+
+    tbl = RHASH_TBL_RAW(hash);
+    return st_update(tbl, (st_data_t)key, add_new_i, (st_data_t)args);
+
+}
+
+static st_data_t
+key_stringify(VALUE key)
+{
+    return (rb_obj_class(key) == rb_cString && !RB_OBJ_FROZEN(key)) ?
+        rb_hash_key_str(key) : key;
+}
+
+static void
+ar_bulk_insert(VALUE hash, long argc, const VALUE *argv)
+{
+    long i;
+    for (i = 0; i < argc; ) {
+        st_data_t k = key_stringify(argv[i++]);
+        st_data_t v = argv[i++];
+        ar_insert(hash, k, v);
+        RB_OBJ_WRITTEN(hash, Qundef, k);
+        RB_OBJ_WRITTEN(hash, Qundef, v);
+    }
+}
+
+void
+rb_hash_bulk_insert(long argc, const VALUE *argv, VALUE hash)
+{
+    HASH_ASSERT(argc % 2 == 0);
+    if (argc > 0) {
+        st_index_t size = argc / 2;
+
+        if (RHASH_AR_TABLE_P(hash) &&
+            (RHASH_AR_TABLE_SIZE(hash) + size <= RHASH_AR_TABLE_MAX_SIZE)) {
+            ar_bulk_insert(hash, argc, argv);
+        }
+        else {
+            rb_hash_bulk_insert_into_st_table(argc, argv, hash);
+        }
+    }
+}
+
+static char **origenviron;
+#ifdef _WIN32
+#define GET_ENVIRON(e) ((e) = rb_w32_get_environ())
+#define FREE_ENVIRON(e) rb_w32_free_environ(e)
+static char **my_environ;
+#undef environ
+#define environ my_environ
+#undef getenv
+#define getenv(n) rb_w32_ugetenv(n)
+#elif defined(__APPLE__)
+#undef environ
+#define environ (*_NSGetEnviron())
+#define GET_ENVIRON(e) (e)
+#define FREE_ENVIRON(e)
+#else
+extern char **environ;
+#define GET_ENVIRON(e) (e)
+#define FREE_ENVIRON(e)
+#endif
+#ifdef ENV_IGNORECASE
+#define ENVMATCH(s1, s2) (STRCASECMP((s1), (s2)) == 0)
+#define ENVNMATCH(s1, s2, n) (STRNCASECMP((s1), (s2), (n)) == 0)
+#else
+#define ENVMATCH(n1, n2) (strcmp((n1), (n2)) == 0)
+#define ENVNMATCH(s1, s2, n) (memcmp((s1), (s2), (n)) == 0)
+#endif
+
+#define ENV_LOCK()   RB_VM_LOCK_ENTER()
+#define ENV_UNLOCK() RB_VM_LOCK_LEAVE()
+
+static inline rb_encoding *
+env_encoding(void)
+{
+#ifdef _WIN32
+    return rb_utf8_encoding();
+#else
+    return rb_locale_encoding();
+#endif
+}
+
+static VALUE
+env_enc_str_new(const char *ptr, long len, rb_encoding *enc)
+{
+    VALUE str = rb_external_str_new_with_enc(ptr, len, enc);
+
+    rb_obj_freeze(str);
+    return str;
+}
+
+static VALUE
+env_str_new(const char *ptr, long len)
+{
+    return env_enc_str_new(ptr, len, env_encoding());
+}
+
+static VALUE
+env_str_new2(const char *ptr)
+{
+    if (!ptr) return Qnil;
+    return env_str_new(ptr, strlen(ptr));
+}
+
+static VALUE
+getenv_with_lock(const char *name)
+{
+    VALUE ret;
+    ENV_LOCK();
+    {
+        const char *val = getenv(name);
+        ret = env_str_new2(val);
+    }
+    ENV_UNLOCK();
+    return ret;
+}
+
+static bool
+has_env_with_lock(const char *name)
+{
+    const char *val;
+
+    ENV_LOCK();
+    {
+        val = getenv(name);
+    }
+    ENV_UNLOCK();
+
+    return val ? true : false;
+}
+
+static const char TZ_ENV[] = "TZ";
+
+static void *
+get_env_cstr(VALUE str, const char *name)
+{
+    char *var;
+    rb_encoding *enc = rb_enc_get(str);
+    if (!rb_enc_asciicompat(enc)) {
+        rb_raise(rb_eArgError, "bad environment variable %s: ASCII incompatible encoding: %s",
+                 name, rb_enc_name(enc));
+    }
+    var = RSTRING_PTR(str);
+    if (memchr(var, '\0', RSTRING_LEN(str))) {
+        rb_raise(rb_eArgError, "bad environment variable %s: contains null byte", name);
+    }
+    return rb_str_fill_terminator(str, 1); /* ASCII compatible */
+}
+
+#define get_env_ptr(var, val) \
+    (var = get_env_cstr(val, #var))
+
+static inline const char *
+env_name(volatile VALUE *s)
+{
+    const char *name;
+    SafeStringValue(*s);
+    get_env_ptr(name, *s);
+    return name;
+}
+
+#define env_name(s) env_name(&(s))
+
+static VALUE env_aset(VALUE nm, VALUE val);
+
+static void
+reset_by_modified_env(const char *nam)
+{
+    /*
+     * ENV['TZ'] = nil has a special meaning.
+     * TZ is no longer considered up-to-date and ruby call tzset() as needed.
+     * It could be useful if sysadmin change /etc/localtime.
+     * This hack might works only on Linux glibc.
+     */
+    if (ENVMATCH(nam, TZ_ENV)) {
+        ruby_reset_timezone();
+    }
+}
+
+static VALUE
+env_delete(VALUE name)
+{
+    const char *nam = env_name(name);
+    reset_by_modified_env(nam);
+    VALUE val = getenv_with_lock(nam);
+
+    if (!NIL_P(val)) {
+        ruby_setenv(nam, 0);
+    }
+    return val;
+}
+
+/*
+ * call-seq:
+ *   ENV.delete(name)                           -> value
+ *   ENV.delete(name) { |name| block }          -> value
+ *   ENV.delete(missing_name)                   -> nil
+ *   ENV.delete(missing_name) { |name| block }  -> block_value
+ *
+ * Deletes the environment variable with +name+ if it exists and returns its value:
+ *   ENV['foo'] = '0'
+ *   ENV.delete('foo') # => '0'
+ *
+ * If a block is not given and the named environment variable does not exist, returns +nil+.
+ *
+ * If a block given and the environment variable does not exist,
+ * yields +name+ to the block and returns the value of the block:
+ *   ENV.delete('foo') { |name| name * 2 } # => "foofoo"
+ *
+ * If a block given and the environment variable exists,
+ * deletes the environment variable and returns its value (ignoring the block):
+ *   ENV['foo'] = '0'
+ *   ENV.delete('foo') { |name| raise 'ignored' } # => "0"
+ *
+ * Raises an exception if +name+ is invalid.
+ * See {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values].
+ */
+static VALUE
+env_delete_m(VALUE obj, VALUE name)
+{
+    VALUE val;
+
+    val = env_delete(name);
+    if (NIL_P(val) && rb_block_given_p()) val = rb_yield(name);
+    return val;
+}
+
+/*
+ * call-seq:
+ *   ENV[name] -> value
+ *
+ * Returns the value for the environment variable +name+ if it exists:
+ *   ENV['foo'] = '0'
+ *   ENV['foo'] # => "0"
+ * Returns +nil+ if the named variable does not exist.
+ *
+ * Raises an exception if +name+ is invalid.
+ * See {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values].
+ */
+static VALUE
+rb_f_getenv(VALUE obj, VALUE name)
+{
+    const char *nam = env_name(name);
+    VALUE env = getenv_with_lock(nam);
+    return env;
+}
+
+/*
+ * call-seq:
+ *   ENV.fetch(name)                  -> value
+ *   ENV.fetch(name, default)         -> value
+ *   ENV.fetch(name) { |name| block } -> value
+ *
+ * If +name+ is the name of an environment variable, returns its value:
+ *   ENV['foo'] = '0'
+ *   ENV.fetch('foo') # => '0'
+ * Otherwise if a block is given (but not a default value),
+ * yields +name+ to the block and returns the block's return value:
+ *   ENV.fetch('foo') { |name| :need_not_return_a_string } # => :need_not_return_a_string
+ * Otherwise if a default value is given (but not a block), returns the default value:
+ *   ENV.delete('foo')
+ *   ENV.fetch('foo', :default_need_not_be_a_string) # => :default_need_not_be_a_string
+ * If the environment variable does not exist and both default and block are given,
+ * issues a warning ("warning: block supersedes default value argument"),
+ * yields +name+ to the block, and returns the block's return value:
+ *   ENV.fetch('foo', :default) { |name| :block_return } # => :block_return
+ * Raises KeyError if +name+ is valid, but not found,
+ * and neither default value nor block is given:
+ *   ENV.fetch('foo') # Raises KeyError (key not found: "foo")
+ * Raises an exception if +name+ is invalid.
+ * See {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values].
+ */
+static VALUE
+env_fetch(int argc, VALUE *argv, VALUE _)
+{
+    VALUE key;
+    long block_given;
+    const char *nam;
+    VALUE env;
+
+    rb_check_arity(argc, 1, 2);
+    key = argv[0];
+    block_given = rb_block_given_p();
+    if (block_given && argc == 2) {
+        rb_warn("block supersedes default value argument");
+    }
+    nam = env_name(key);
+    env = getenv_with_lock(nam);
+
+    if (NIL_P(env)) {
+        if (block_given) return rb_yield(key);
+        if (argc == 1) {
+            rb_key_err_raise(rb_sprintf("key not found: \"%"PRIsVALUE"\"", key), envtbl, key);
+        }
+        return argv[1];
+    }
+    return env;
+}
+
+#if defined(_WIN32) || (defined(HAVE_SETENV) && defined(HAVE_UNSETENV))
+#elif defined __sun
+static int
+in_origenv(const char *str)
+{
+    char **env;
+    for (env = origenviron; *env; ++env) {
+        if (*env == str) return 1;
+    }
+    return 0;
+}
+#else
+static int
+envix(const char *nam)
+{
+    // should be locked
+
+    register int i, len = strlen(nam);
+    char **env;
+
+    env = GET_ENVIRON(environ);
+    for (i = 0; env[i]; i++) {
+        if (ENVNMATCH(env[i],nam,len) && env[i][len] == '=')
+            break;			/* memcmp must come first to avoid */
+    }					/* potential SEGV's */
+    FREE_ENVIRON(environ);
+    return i;
+}
+#endif
+
+#if defined(_WIN32)
+static size_t
+getenvsize(const WCHAR* p)
+{
+    const WCHAR* porg = p;
+    while (*p++) p += lstrlenW(p) + 1;
+    return p - porg + 1;
+}
+
+static size_t
+getenvblocksize(void)
+{
+#ifdef _MAX_ENV
+    return _MAX_ENV;
+#else
+    return 32767;
+#endif
+}
+
+static int
+check_envsize(size_t n)
+{
+    if (_WIN32_WINNT < 0x0600 && rb_w32_osver() < 6) {
+        /* https://msdn.microsoft.com/en-us/library/windows/desktop/ms682653(v=vs.85).aspx */
+        /* Windows Server 2003 and Windows XP: The maximum size of the
+         * environment block for the process is 32,767 characters. */
+        WCHAR* p = GetEnvironmentStringsW();
+        if (!p) return -1; /* never happen */
+        n += getenvsize(p);
+        FreeEnvironmentStringsW(p);
+        if (n >= getenvblocksize()) {
+            return -1;
+        }
+    }
+    return 0;
+}
+#endif
+
+#if defined(_WIN32) || \
+  (defined(__sun) && !(defined(HAVE_SETENV) && defined(HAVE_UNSETENV)))
+
+NORETURN(static void invalid_envname(const char *name));
+
+static void
+invalid_envname(const char *name)
+{
+    rb_syserr_fail_str(EINVAL, rb_sprintf("ruby_setenv(%s)", name));
+}
+
+static const char *
+check_envname(const char *name)
+{
+    if (strchr(name, '=')) {
+        invalid_envname(name);
+    }
+    return name;
+}
+#endif
+
+void
+ruby_setenv(const char *name, const char *value)
+{
+#if defined(_WIN32)
+# if defined(MINGW_HAS_SECURE_API) || RUBY_MSVCRT_VERSION >= 80
+#   define HAVE__WPUTENV_S 1
+# endif
+    VALUE buf;
+    WCHAR *wname;
+    WCHAR *wvalue = 0;
+    int failed = 0;
+    int len;
+    check_envname(name);
+    len = MultiByteToWideChar(CP_UTF8, 0, name, -1, NULL, 0);
+    if (value) {
+        int len2;
+        len2 = MultiByteToWideChar(CP_UTF8, 0, value, -1, NULL, 0);
+        if (check_envsize((size_t)len + len2)) { /* len and len2 include '\0' */
+            goto fail;  /* 2 for '=' & '\0' */
+        }
+        wname = ALLOCV_N(WCHAR, buf, len + len2);
+        wvalue = wname + len;
+        MultiByteToWideChar(CP_UTF8, 0, name, -1, wname, len);
+        MultiByteToWideChar(CP_UTF8, 0, value, -1, wvalue, len2);
+#ifndef HAVE__WPUTENV_S
+        wname[len-1] = L'=';
+#endif
+    }
+    else {
+        wname = ALLOCV_N(WCHAR, buf, len + 1);
+        MultiByteToWideChar(CP_UTF8, 0, name, -1, wname, len);
+        wvalue = wname + len;
+        *wvalue = L'\0';
+#ifndef HAVE__WPUTENV_S
+        wname[len-1] = L'=';
+#endif
+    }
+
+    ENV_LOCK();
+    {
+#ifndef HAVE__WPUTENV_S
+        failed = _wputenv(wname);
+#else
+        failed = _wputenv_s(wname, wvalue);
+#endif
+    }
+    ENV_UNLOCK();
+
+    ALLOCV_END(buf);
+    /* even if putenv() failed, clean up and try to delete the
+     * variable from the system area. */
+    if (!value || !*value) {
+        /* putenv() doesn't handle empty value */
+        if (!SetEnvironmentVariable(name, value) &&
+            GetLastError() != ERROR_ENVVAR_NOT_FOUND) goto fail;
+    }
+    if (failed) {
+      fail:
+        invalid_envname(name);
+    }
+#elif defined(HAVE_SETENV) && defined(HAVE_UNSETENV)
+    if (value) {
+        int ret;
+        ENV_LOCK();
+        {
+            ret = setenv(name, value, 1);
+        }
+        ENV_UNLOCK();
+
+        if (ret) rb_sys_fail_sprintf("setenv(%s)", name);
+    }
+    else {
+#ifdef VOID_UNSETENV
+        ENV_LOCK();
+        {
+            unsetenv(name);
+        }
+        ENV_UNLOCK();
+#else
+        int ret;
+        ENV_LOCK();
+        {
+            ret = unsetenv(name);
+        }
+        ENV_UNLOCK();
+
+        if (ret) rb_sys_fail_sprintf("unsetenv(%s)", name);
+#endif
+    }
+#elif defined __sun
+    /* Solaris 9 (or earlier) does not have setenv(3C) and unsetenv(3C). */
+    /* The below code was tested on Solaris 10 by:
+         % ./configure ac_cv_func_setenv=no ac_cv_func_unsetenv=no
+    */
+    size_t len, mem_size;
+    char **env_ptr, *str, *mem_ptr;
+
+    check_envname(name);
+    len = strlen(name);
+    if (value) {
+        mem_size = len + strlen(value) + 2;
+        mem_ptr = malloc(mem_size);
+        if (mem_ptr == NULL)
+            rb_sys_fail_sprintf("malloc(%"PRIuSIZE")", mem_size);
+        snprintf(mem_ptr, mem_size, "%s=%s", name, value);
+    }
+
+    ENV_LOCK();
+    {
+        for (env_ptr = GET_ENVIRON(environ); (str = *env_ptr) != 0; ++env_ptr) {
+            if (!strncmp(str, name, len) && str[len] == '=') {
+                if (!in_origenv(str)) free(str);
+                while ((env_ptr[0] = env_ptr[1]) != 0) env_ptr++;
+                break;
+            }
+        }
+    }
+    ENV_UNLOCK();
+
+    if (value) {
+        int ret;
+        ENV_LOCK();
+        {
+            ret = putenv(mem_ptr);
+        }
+        ENV_UNLOCK();
+
+        if (ret) {
+            free(mem_ptr);
+            rb_sys_fail_sprintf("putenv(%s)", name);
+        }
+    }
+#else  /* WIN32 */
+    size_t len;
+    int i;
+
+    ENV_LOCK();
+    {
+        i = envix(name);		/* where does it go? */
+
+        if (environ == origenviron) {	/* need we copy environment? */
+            int j;
+            int max;
+            char **tmpenv;
+
+            for (max = i; environ[max]; max++) ;
+            tmpenv = ALLOC_N(char*, max+2);
+            for (j=0; j<max; j++)		/* copy environment */
+                tmpenv[j] = ruby_strdup(environ[j]);
+            tmpenv[max] = 0;
+            environ = tmpenv;		/* tell exec where it is now */
+        }
+
+        if (environ[i]) {
+            char **envp = origenviron;
+            while (*envp && *envp != environ[i]) envp++;
+            if (!*envp)
+                xfree(environ[i]);
+            if (!value) {
+                while (environ[i]) {
+                    environ[i] = environ[i+1];
+                    i++;
+                }
+                goto finish;
+            }
+        }
+        else {			/* does not exist yet */
+            if (!value) goto finish;
+            REALLOC_N(environ, char*, i+2);	/* just expand it a bit */
+            environ[i+1] = 0;	/* make sure it's null terminated */
+        }
+
+        len = strlen(name) + strlen(value) + 2;
+        environ[i] = ALLOC_N(char, len);
+        snprintf(environ[i],len,"%s=%s",name,value); /* all that work just for this */
+
+      finish:;
+    }
+    ENV_UNLOCK();
+#endif /* WIN32 */
+}
+
+void
+ruby_unsetenv(const char *name)
+{
+    ruby_setenv(name, 0);
+}
+
+/*
+ * call-seq:
+ *   ENV[name] = value      -> value
+ *   ENV.store(name, value) -> value
+ *
+ * Creates, updates, or deletes the named environment variable, returning the value.
+ * Both +name+ and +value+ may be instances of String.
+ * See {Valid Names and Values}[rdoc-ref:ENV@Valid+Names+and+Values].
+ *
+ * - If the named environment variable does not exist:
+ *   - If +value+ is +nil+, does nothing.
+ *       ENV.clear
+ *       ENV['foo'] = nil # => nil
+ *       ENV.include?('foo') # => false
+ *       ENV.store('bar', nil) # => nil
+ *       ENV.include?('bar') # => false
+ *   - If +value+ is not +nil+, creates the environment variable with +name+ and +value+:
+ *       # Create 'foo' using ENV.[]=.
+ *       ENV['foo'] = '0' # => '0'
+ *       ENV['foo'] # => '0'
+ *       # Create 'bar' using ENV.store.
+ *       ENV.store('bar', '1') # => '1'
+ *       ENV['bar'] # => '1'
+ * - If the named environment variable exists:
+ *   - If +value+ is not +nil+, updates the environment variable with value +value+:
+ *       # Update 'foo' using ENV.[]=.
+ *       ENV['foo'] = '2' # => '2'
+ *       ENV['foo'] # => '2'
+ *       # Update 'bar' using ENV.store.
+ *       ENV.store('bar', '3') # => '3'
+ *       ENV['bar'] # => '3'
+ *   - If +value+ is +nil+, deletes the environment variable:
+ *       # Delete 'foo' using ENV.[]=.
+ *       ENV['foo'] = nil # => nil
+ *       ENV.include?('foo') # => false
+ *       # Delete 'bar' using ENV.store.
+ *       ENV.store('bar', nil) # => nil
+ *       ENV.include?('bar') # => false
+ *
+ * Raises an exception if +name+ or +value+ is invalid.
+ * See {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values].
+ */
+static VALUE
+env_aset_m(VALUE obj, VALUE nm, VALUE val)
+{
+    return env_aset(nm, val);
+}
+
+static VALUE
+env_aset(VALUE nm, VALUE val)
+{
+    char *name, *value;
+
+    if (NIL_P(val)) {
+        env_delete(nm);
+        return Qnil;
+    }
+    SafeStringValue(nm);
+    SafeStringValue(val);
+    /* nm can be modified in `val.to_str`, don't get `name` before
+     * check for `val` */
+    get_env_ptr(name, nm);
+    get_env_ptr(value, val);
+
+    ruby_setenv(name, value);
+    reset_by_modified_env(name);
+    return val;
+}
+
+static VALUE
+env_keys(int raw)
+{
+    rb_encoding *enc = raw ? 0 : rb_locale_encoding();
+    VALUE ary = rb_ary_new();
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        while (*env) {
+            char *s = strchr(*env, '=');
+            if (s) {
+                const char *p = *env;
+                size_t l = s - p;
+                VALUE e = raw ? rb_utf8_str_new(p, l) : env_enc_str_new(p, l, enc);
+                rb_ary_push(ary, e);
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return ary;
+}
+
+/*
+ * call-seq:
+ *   ENV.keys -> array of names
+ *
+ * Returns all variable names in an Array:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.keys # => ['bar', 'foo']
+ * The order of the names is OS-dependent.
+ * See {About Ordering}[rdoc-ref:ENV@About+Ordering].
+ *
+ * Returns the empty Array if ENV is empty.
+ */
+
+static VALUE
+env_f_keys(VALUE _)
+{
+    return env_keys(FALSE);
+}
+
+static VALUE
+rb_env_size(VALUE ehash, VALUE args, VALUE eobj)
+{
+    char **env;
+    long cnt = 0;
+
+    ENV_LOCK();
+    {
+        env = GET_ENVIRON(environ);
+        for (; *env ; ++env) {
+            if (strchr(*env, '=')) {
+                cnt++;
+            }
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return LONG2FIX(cnt);
+}
+
+/*
+ * call-seq:
+ *   ENV.each_key { |name| block } -> ENV
+ *   ENV.each_key                  -> an_enumerator
+ *
+ * Yields each environment variable name:
+ *   ENV.replace('foo' => '0', 'bar' => '1') # => ENV
+ *   names = []
+ *   ENV.each_key { |name| names.push(name) } # => ENV
+ *   names # => ["bar", "foo"]
+ *
+ * Returns an Enumerator if no block given:
+ *   e = ENV.each_key # => #<Enumerator: {"bar"=>"1", "foo"=>"0"}:each_key>
+ *   names = []
+ *   e.each { |name| names.push(name) } # => ENV
+ *   names # => ["bar", "foo"]
+ */
+static VALUE
+env_each_key(VALUE ehash)
+{
+    VALUE keys;
+    long i;
+
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+    keys = env_keys(FALSE);
+    for (i=0; i<RARRAY_LEN(keys); i++) {
+        rb_yield(RARRAY_AREF(keys, i));
+    }
+    return ehash;
+}
+
+static VALUE
+env_values(void)
+{
+    VALUE ary = rb_ary_new();
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+
+        while (*env) {
+            char *s = strchr(*env, '=');
+            if (s) {
+                rb_ary_push(ary, env_str_new2(s+1));
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return ary;
+}
+
+/*
+ * call-seq:
+ *   ENV.values -> array of values
+ *
+ * Returns all environment variable values in an Array:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.values # => ['1', '0']
+ * The order of the values is OS-dependent.
+ * See {About Ordering}[rdoc-ref:ENV@About+Ordering].
+ *
+ * Returns the empty Array if ENV is empty.
+ */
+static VALUE
+env_f_values(VALUE _)
+{
+    return env_values();
+}
+
+/*
+ * call-seq:
+ *   ENV.each_value { |value| block } -> ENV
+ *   ENV.each_value                   -> an_enumerator
+ *
+ * Yields each environment variable value:
+ *   ENV.replace('foo' => '0', 'bar' => '1') # => ENV
+ *   values = []
+ *   ENV.each_value { |value| values.push(value) } # => ENV
+ *   values # => ["1", "0"]
+ *
+ * Returns an Enumerator if no block given:
+ *   e = ENV.each_value # => #<Enumerator: {"bar"=>"1", "foo"=>"0"}:each_value>
+ *   values = []
+ *   e.each { |value| values.push(value) } # => ENV
+ *   values # => ["1", "0"]
+ */
+static VALUE
+env_each_value(VALUE ehash)
+{
+    VALUE values;
+    long i;
+
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+    values = env_values();
+    for (i=0; i<RARRAY_LEN(values); i++) {
+        rb_yield(RARRAY_AREF(values, i));
+    }
+    return ehash;
+}
+
+/*
+ * call-seq:
+ *   ENV.each      { |name, value| block } -> ENV
+ *   ENV.each                              -> an_enumerator
+ *   ENV.each_pair { |name, value| block } -> ENV
+ *   ENV.each_pair                         -> an_enumerator
+ *
+ * Yields each environment variable name and its value as a 2-element Array:
+ *   h = {}
+ *   ENV.each_pair { |name, value| h[name] = value } # => ENV
+ *   h # => {"bar"=>"1", "foo"=>"0"}
+ *
+ * Returns an Enumerator if no block given:
+ *   h = {}
+ *   e = ENV.each_pair # => #<Enumerator: {"bar"=>"1", "foo"=>"0"}:each_pair>
+ *   e.each { |name, value| h[name] = value } # => ENV
+ *   h # => {"bar"=>"1", "foo"=>"0"}
+ */
+static VALUE
+env_each_pair(VALUE ehash)
+{
+    long i;
+
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+
+    VALUE ary = rb_ary_new();
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+
+        while (*env) {
+            char *s = strchr(*env, '=');
+            if (s) {
+                rb_ary_push(ary, env_str_new(*env, s-*env));
+                rb_ary_push(ary, env_str_new2(s+1));
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    if (rb_block_pair_yield_optimizable()) {
+        for (i=0; i<RARRAY_LEN(ary); i+=2) {
+            rb_yield_values(2, RARRAY_AREF(ary, i), RARRAY_AREF(ary, i+1));
+        }
+    }
+    else {
+        for (i=0; i<RARRAY_LEN(ary); i+=2) {
+            rb_yield(rb_assoc_new(RARRAY_AREF(ary, i), RARRAY_AREF(ary, i+1)));
+        }
+    }
+
+    return ehash;
+}
+
+/*
+ * call-seq:
+ *   ENV.reject! { |name, value| block } -> ENV or nil
+ *   ENV.reject!                         -> an_enumerator
+ *
+ * Similar to ENV.delete_if, but returns +nil+ if no changes were made.
+ *
+ * Yields each environment variable name and its value as a 2-element Array,
+ * deleting each environment variable for which the block returns a truthy value,
+ * and returning ENV (if any deletions) or +nil+ (if not):
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.reject! { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"foo"=>"0"}
+ *   ENV.reject! { |name, value| name.start_with?('b') } # => nil
+ *
+ * Returns an Enumerator if no block given:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   e = ENV.reject! # => #<Enumerator: {"bar"=>"1", "baz"=>"2", "foo"=>"0"}:reject!>
+ *   e.each { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"foo"=>"0"}
+ *   e.each { |name, value| name.start_with?('b') } # => nil
+ */
+static VALUE
+env_reject_bang(VALUE ehash)
+{
+    VALUE keys;
+    long i;
+    int del = 0;
+
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+    keys = env_keys(FALSE);
+    RBASIC_CLEAR_CLASS(keys);
+    for (i=0; i<RARRAY_LEN(keys); i++) {
+        VALUE val = rb_f_getenv(Qnil, RARRAY_AREF(keys, i));
+        if (!NIL_P(val)) {
+            if (RTEST(rb_yield_values(2, RARRAY_AREF(keys, i), val))) {
+                env_delete(RARRAY_AREF(keys, i));
+                del++;
+            }
+        }
+    }
+    RB_GC_GUARD(keys);
+    if (del == 0) return Qnil;
+    return envtbl;
+}
+
+/*
+ * call-seq:
+ *   ENV.delete_if { |name, value| block } -> ENV
+ *   ENV.delete_if                         -> an_enumerator
+ *
+ * Yields each environment variable name and its value as a 2-element Array,
+ * deleting each environment variable for which the block returns a truthy value,
+ * and returning ENV (regardless of whether any deletions):
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.delete_if { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"foo"=>"0"}
+ *   ENV.delete_if { |name, value| name.start_with?('b') } # => ENV
+ *
+ * Returns an Enumerator if no block given:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   e = ENV.delete_if # => #<Enumerator: {"bar"=>"1", "baz"=>"2", "foo"=>"0"}:delete_if!>
+ *   e.each { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"foo"=>"0"}
+ *   e.each { |name, value| name.start_with?('b') } # => ENV
+ */
+static VALUE
+env_delete_if(VALUE ehash)
+{
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+    env_reject_bang(ehash);
+    return envtbl;
+}
+
+/*
+ * call-seq:
+ *   ENV.values_at(*names) -> array of values
+ *
+ * Returns an Array containing the environment variable values associated with
+ * the given names:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.values_at('foo', 'baz') # => ["0", "2"]
+ *
+ * Returns +nil+ in the Array for each name that is not an ENV name:
+ *   ENV.values_at('foo', 'bat', 'bar', 'bam') # => ["0", nil, "1", nil]
+ *
+ * Returns an empty Array if no names given.
+ *
+ * Raises an exception if any name is invalid.
+ * See {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values].
+ */
+static VALUE
+env_values_at(int argc, VALUE *argv, VALUE _)
+{
+    VALUE result;
+    long i;
+
+    result = rb_ary_new();
+    for (i=0; i<argc; i++) {
+        rb_ary_push(result, rb_f_getenv(Qnil, argv[i]));
+    }
+    return result;
+}
+
+/*
+ * call-seq:
+ *   ENV.select { |name, value| block } -> hash of name/value pairs
+ *   ENV.select                         -> an_enumerator
+ *   ENV.filter { |name, value| block } -> hash of name/value pairs
+ *   ENV.filter                         -> an_enumerator
+ *
+ * Yields each environment variable name and its value as a 2-element Array,
+ * returning a Hash of the names and values for which the block returns a truthy value:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.select { |name, value| name.start_with?('b') } # => {"bar"=>"1", "baz"=>"2"}
+ *   ENV.filter { |name, value| name.start_with?('b') } # => {"bar"=>"1", "baz"=>"2"}
+ *
+ * Returns an Enumerator if no block given:
+ *   e = ENV.select # => #<Enumerator: {"bar"=>"1", "baz"=>"2", "foo"=>"0"}:select>
+ *   e.each { |name, value | name.start_with?('b') } # => {"bar"=>"1", "baz"=>"2"}
+ *   e = ENV.filter # => #<Enumerator: {"bar"=>"1", "baz"=>"2", "foo"=>"0"}:filter>
+ *   e.each { |name, value | name.start_with?('b') } # => {"bar"=>"1", "baz"=>"2"}
+ */
+static VALUE
+env_select(VALUE ehash)
+{
+    VALUE result;
+    VALUE keys;
+    long i;
+
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+    result = rb_hash_new();
+    keys = env_keys(FALSE);
+    for (i = 0; i < RARRAY_LEN(keys); ++i) {
+        VALUE key = RARRAY_AREF(keys, i);
+        VALUE val = rb_f_getenv(Qnil, key);
+        if (!NIL_P(val)) {
+            if (RTEST(rb_yield_values(2, key, val))) {
+                rb_hash_aset(result, key, val);
+            }
+        }
+    }
+    RB_GC_GUARD(keys);
+
+    return result;
+}
+
+/*
+ * call-seq:
+ *   ENV.select! { |name, value| block } -> ENV or nil
+ *   ENV.select!                         -> an_enumerator
+ *   ENV.filter! { |name, value| block } -> ENV or nil
+ *   ENV.filter!                         -> an_enumerator
+ *
+ * Yields each environment variable name and its value as a 2-element Array,
+ * deleting each entry for which the block returns +false+ or +nil+,
+ * and returning ENV if any deletions made, or +nil+ otherwise:
+ *
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.select! { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"bar"=>"1", "baz"=>"2"}
+ *   ENV.select! { |name, value| true } # => nil
+ *
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.filter! { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"bar"=>"1", "baz"=>"2"}
+ *   ENV.filter! { |name, value| true } # => nil
+ *
+ * Returns an Enumerator if no block given:
+ *
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   e = ENV.select! # => #<Enumerator: {"bar"=>"1", "baz"=>"2"}:select!>
+ *   e.each { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"bar"=>"1", "baz"=>"2"}
+ *   e.each { |name, value| true } # => nil
+ *
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   e = ENV.filter! # => #<Enumerator: {"bar"=>"1", "baz"=>"2"}:filter!>
+ *   e.each { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"bar"=>"1", "baz"=>"2"}
+ *   e.each { |name, value| true } # => nil
+ */
+static VALUE
+env_select_bang(VALUE ehash)
+{
+    VALUE keys;
+    long i;
+    int del = 0;
+
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+    keys = env_keys(FALSE);
+    RBASIC_CLEAR_CLASS(keys);
+    for (i=0; i<RARRAY_LEN(keys); i++) {
+        VALUE val = rb_f_getenv(Qnil, RARRAY_AREF(keys, i));
+        if (!NIL_P(val)) {
+            if (!RTEST(rb_yield_values(2, RARRAY_AREF(keys, i), val))) {
+                env_delete(RARRAY_AREF(keys, i));
+                del++;
+            }
+        }
+    }
+    RB_GC_GUARD(keys);
+    if (del == 0) return Qnil;
+    return envtbl;
+}
+
+/*
+ * call-seq:
+ *   ENV.keep_if { |name, value| block } -> ENV
+ *   ENV.keep_if                         -> an_enumerator
+ *
+ * Yields each environment variable name and its value as a 2-element Array,
+ * deleting each environment variable for which the block returns +false+ or +nil+,
+ * and returning ENV:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.keep_if { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"bar"=>"1", "baz"=>"2"}
+ *
+ * Returns an Enumerator if no block given:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   e = ENV.keep_if # => #<Enumerator: {"bar"=>"1", "baz"=>"2", "foo"=>"0"}:keep_if>
+ *   e.each { |name, value| name.start_with?('b') } # => ENV
+ *   ENV # => {"bar"=>"1", "baz"=>"2"}
+ */
+static VALUE
+env_keep_if(VALUE ehash)
+{
+    RETURN_SIZED_ENUMERATOR(ehash, 0, 0, rb_env_size);
+    env_select_bang(ehash);
+    return envtbl;
+}
+
+/*
+ * call-seq:
+ *   ENV.slice(*names) -> hash of name/value pairs
+ *
+ * Returns a Hash of the given ENV names and their corresponding values:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2', 'bat' => '3')
+ *   ENV.slice('foo', 'baz') # => {"foo"=>"0", "baz"=>"2"}
+ *   ENV.slice('baz', 'foo') # => {"baz"=>"2", "foo"=>"0"}
+ * Raises an exception if any of the +names+ is invalid
+ * (see {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values]):
+ *   ENV.slice('foo', 'bar', :bat) # Raises TypeError (no implicit conversion of Symbol into String)
+ */
+static VALUE
+env_slice(int argc, VALUE *argv, VALUE _)
+{
+    int i;
+    VALUE key, value, result;
+
+    if (argc == 0) {
+        return rb_hash_new();
+    }
+    result = rb_hash_new_with_size(argc);
+
+    for (i = 0; i < argc; i++) {
+        key = argv[i];
+        value = rb_f_getenv(Qnil, key);
+        if (value != Qnil)
+            rb_hash_aset(result, key, value);
+    }
+
+    return result;
+}
+
+VALUE
+rb_env_clear(void)
+{
+    VALUE keys;
+    long i;
+
+    keys = env_keys(TRUE);
+    for (i=0; i<RARRAY_LEN(keys); i++) {
+        VALUE key = RARRAY_AREF(keys, i);
+        const char *nam = RSTRING_PTR(key);
+        ruby_setenv(nam, 0);
+    }
+    RB_GC_GUARD(keys);
+    return envtbl;
+}
+
+/*
+ * call-seq:
+ *   ENV.clear -> ENV
+ *
+ * Removes every environment variable; returns ENV:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.size # => 2
+ *   ENV.clear # => ENV
+ *   ENV.size # => 0
+ */
+static VALUE
+env_clear(VALUE _)
+{
+    return rb_env_clear();
+}
+
+/*
+ * call-seq:
+ *   ENV.to_s -> "ENV"
+ *
+ * Returns String 'ENV':
+ *   ENV.to_s # => "ENV"
+ */
+static VALUE
+env_to_s(VALUE _)
+{
+    return rb_usascii_str_new2("ENV");
+}
+
+/*
+ * call-seq:
+ *   ENV.inspect -> a_string
+ *
+ * Returns the contents of the environment as a String:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.inspect # => "{\"bar\"=>\"1\", \"foo\"=>\"0\"}"
+ */
+static VALUE
+env_inspect(VALUE _)
+{
+    VALUE i;
+    VALUE str = rb_str_buf_new2("{");
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        while (*env) {
+            char *s = strchr(*env, '=');
+
+            if (env != environ) {
+                rb_str_buf_cat2(str, ", ");
+            }
+            if (s) {
+                rb_str_buf_cat2(str, "\"");
+                rb_str_buf_cat(str, *env, s-*env);
+                rb_str_buf_cat2(str, "\"=>");
+                i = rb_inspect(rb_str_new2(s+1));
+                rb_str_buf_append(str, i);
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    rb_str_buf_cat2(str, "}");
+
+    return str;
+}
+
+/*
+ * call-seq:
+ *   ENV.to_a -> array of 2-element arrays
+ *
+ * Returns the contents of ENV as an Array of 2-element Arrays,
+ * each of which is a name/value pair:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.to_a # => [["bar", "1"], ["foo", "0"]]
+ */
+static VALUE
+env_to_a(VALUE _)
+{
+    VALUE ary = rb_ary_new();
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        while (*env) {
+            char *s = strchr(*env, '=');
+            if (s) {
+                rb_ary_push(ary, rb_assoc_new(env_str_new(*env, s-*env),
+                                              env_str_new2(s+1)));
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return ary;
+}
+
+/*
+ * call-seq:
+ *   ENV.rehash -> nil
+ *
+ * (Provided for compatibility with Hash.)
+ *
+ * Does not modify ENV; returns +nil+.
+ */
+static VALUE
+env_none(VALUE _)
+{
+    return Qnil;
+}
+
+static int
+env_size_with_lock(void)
+{
+    int i = 0;
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        while (env[i]) i++;
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return i;
+}
+
+/*
+ * call-seq:
+ *   ENV.length -> an_integer
+ *   ENV.size   -> an_integer
+ *
+ * Returns the count of environment variables:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.length # => 2
+ *   ENV.size # => 2
+ */
+static VALUE
+env_size(VALUE _)
+{
+    return INT2FIX(env_size_with_lock());
+}
+
+/*
+ * call-seq:
+ *   ENV.empty? -> true or false
+ *
+ * Returns +true+ when there are no environment variables, +false+ otherwise:
+ *   ENV.clear
+ *   ENV.empty? # => true
+ *   ENV['foo'] = '0'
+ *   ENV.empty? # => false
+ */
+static VALUE
+env_empty_p(VALUE _)
+{
+    bool empty = true;
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        if (env[0] != 0) {
+            empty = false;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return RBOOL(empty);
+}
+
+/*
+ * call-seq:
+ *   ENV.include?(name) -> true or false
+ *   ENV.has_key?(name) -> true or false
+ *   ENV.member?(name)  -> true or false
+ *   ENV.key?(name)     -> true or false
+ *
+ * Returns +true+ if there is an environment variable with the given +name+:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.include?('foo') # => true
+ * Returns +false+ if +name+ is a valid String and there is no such environment variable:
+ *   ENV.include?('baz') # => false
+ * Returns +false+ if +name+ is the empty String or is a String containing character <code>'='</code>:
+ *   ENV.include?('') # => false
+ *   ENV.include?('=') # => false
+ * Raises an exception if +name+ is a String containing the NUL character <code>"\0"</code>:
+ *   ENV.include?("\0") # Raises ArgumentError (bad environment variable name: contains null byte)
+ * Raises an exception if +name+ has an encoding that is not ASCII-compatible:
+ *   ENV.include?("\xa1\xa1".force_encoding(Encoding::UTF_16LE))
+ *   # Raises ArgumentError (bad environment variable name: ASCII incompatible encoding: UTF-16LE)
+ * Raises an exception if +name+ is not a String:
+ *   ENV.include?(Object.new) # TypeError (no implicit conversion of Object into String)
+ */
+static VALUE
+env_has_key(VALUE env, VALUE key)
+{
+    const char *s = env_name(key);
+    return RBOOL(has_env_with_lock(s));
+}
+
+/*
+ * call-seq:
+ *   ENV.assoc(name) -> [name, value] or nil
+ *
+ * Returns a 2-element Array containing the name and value of the environment variable
+ * for +name+ if it exists:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.assoc('foo') # => ['foo', '0']
+ * Returns +nil+ if +name+ is a valid String and there is no such environment variable.
+ *
+ * Returns +nil+ if +name+ is the empty String or is a String containing character <code>'='</code>.
+ *
+ * Raises an exception if +name+ is a String containing the NUL character <code>"\0"</code>:
+ *   ENV.assoc("\0") # Raises ArgumentError (bad environment variable name: contains null byte)
+ * Raises an exception if +name+ has an encoding that is not ASCII-compatible:
+ *   ENV.assoc("\xa1\xa1".force_encoding(Encoding::UTF_16LE))
+ *   # Raises ArgumentError (bad environment variable name: ASCII incompatible encoding: UTF-16LE)
+ * Raises an exception if +name+ is not a String:
+ *   ENV.assoc(Object.new) # TypeError (no implicit conversion of Object into String)
+ */
+static VALUE
+env_assoc(VALUE env, VALUE key)
+{
+    const char *s = env_name(key);
+    VALUE e = getenv_with_lock(s);
+
+    if (!NIL_P(e)) {
+        return rb_assoc_new(key, e);
+    }
+    else {
+        return Qnil;
+    }
+}
+
+/*
+ * call-seq:
+ *   ENV.value?(value)     -> true or false
+ *   ENV.has_value?(value) -> true or false
+ *
+ * Returns +true+ if +value+ is the value for some environment variable name, +false+ otherwise:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.value?('0') # => true
+ *   ENV.has_value?('0') # => true
+ *   ENV.value?('2') # => false
+ *   ENV.has_value?('2') # => false
+ */
+static VALUE
+env_has_value(VALUE dmy, VALUE obj)
+{
+    obj = rb_check_string_type(obj);
+    if (NIL_P(obj)) return Qnil;
+
+    VALUE ret = Qfalse;
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        while (*env) {
+            char *s = strchr(*env, '=');
+            if (s++) {
+                long len = strlen(s);
+                if (RSTRING_LEN(obj) == len && strncmp(s, RSTRING_PTR(obj), len) == 0) {
+                    ret = Qtrue;
+                    break;
+                }
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return ret;
+}
+
+/*
+ * call-seq:
+ *   ENV.rassoc(value) -> [name, value] or nil
+ *
+ * Returns a 2-element Array containing the name and value of the
+ * *first* *found* environment variable that has value +value+, if one
+ * exists:
+ *   ENV.replace('foo' => '0', 'bar' => '0')
+ *   ENV.rassoc('0') # => ["bar", "0"]
+ * The order in which environment variables are examined is OS-dependent.
+ * See {About Ordering}[rdoc-ref:ENV@About+Ordering].
+ *
+ * Returns +nil+ if there is no such environment variable.
+ */
+static VALUE
+env_rassoc(VALUE dmy, VALUE obj)
+{
+    obj = rb_check_string_type(obj);
+    if (NIL_P(obj)) return Qnil;
+
+    VALUE result = Qnil;
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+
+        while (*env) {
+            const char *p = *env;
+            char *s = strchr(p, '=');
+            if (s++) {
+                long len = strlen(s);
+                if (RSTRING_LEN(obj) == len && strncmp(s, RSTRING_PTR(obj), len) == 0) {
+                    result = rb_assoc_new(rb_str_new(p, s-p-1), obj);
+                    break;
+                }
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return result;
+}
+
+/*
+ * call-seq:
+ *   ENV.key(value) -> name or nil
+ *
+ * Returns the name of the first environment variable with +value+, if it exists:
+ *   ENV.replace('foo' => '0', 'bar' => '0')
+ *   ENV.key('0') # => "foo"
+ * The order in which environment variables are examined is OS-dependent.
+ * See {About Ordering}[rdoc-ref:ENV@About+Ordering].
+ *
+ * Returns +nil+ if there is no such value.
+ *
+ * Raises an exception if +value+ is invalid:
+ *   ENV.key(Object.new) # raises TypeError (no implicit conversion of Object into String)
+ * See {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values].
+ */
+static VALUE
+env_key(VALUE dmy, VALUE value)
+{
+    SafeStringValue(value);
+    VALUE str = Qnil;
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        while (*env) {
+            char *s = strchr(*env, '=');
+            if (s++) {
+                long len = strlen(s);
+                if (RSTRING_LEN(value) == len && strncmp(s, RSTRING_PTR(value), len) == 0) {
+                    str = env_str_new(*env, s-*env-1);
+                    break;
+                }
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return str;
+}
+
+static VALUE
+env_to_hash(void)
+{
+    VALUE hash = rb_hash_new();
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        while (*env) {
+            char *s = strchr(*env, '=');
+            if (s) {
+                rb_hash_aset(hash, env_str_new(*env, s-*env),
+                             env_str_new2(s+1));
+            }
+            env++;
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    return hash;
+}
+
+VALUE
+rb_envtbl(void)
+{
+    return envtbl;
+}
+
+VALUE
+rb_env_to_hash(void)
+{
+    return env_to_hash();
+}
+
+/*
+ * call-seq:
+ *   ENV.to_hash -> hash of name/value pairs
+ *
+ * Returns a Hash containing all name/value pairs from ENV:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.to_hash # => {"bar"=>"1", "foo"=>"0"}
+ */
+
+static VALUE
+env_f_to_hash(VALUE _)
+{
+    return env_to_hash();
+}
+
+/*
+ * call-seq:
+ *   ENV.to_h                        -> hash of name/value pairs
+ *   ENV.to_h {|name, value| block } -> hash of name/value pairs
+ *
+ * With no block, returns a Hash containing all name/value pairs from ENV:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.to_h # => {"bar"=>"1", "foo"=>"0"}
+ * With a block, returns a Hash whose items are determined by the block.
+ * Each name/value pair in ENV is yielded to the block.
+ * The block must return a 2-element Array (name/value pair)
+ * that is added to the return Hash as a key and value:
+ *   ENV.to_h { |name, value| [name.to_sym, value.to_i] } # => {:bar=>1, :foo=>0}
+ * Raises an exception if the block does not return an Array:
+ *   ENV.to_h { |name, value| name } # Raises TypeError (wrong element type String (expected array))
+ * Raises an exception if the block returns an Array of the wrong size:
+ *   ENV.to_h { |name, value| [name] } # Raises ArgumentError (element has wrong array length (expected 2, was 1))
+ */
+static VALUE
+env_to_h(VALUE _)
+{
+    VALUE hash = env_to_hash();
+    if (rb_block_given_p()) {
+        hash = rb_hash_to_h_block(hash);
+    }
+    return hash;
+}
+
+/*
+ *  call-seq:
+ *     ENV.except(*keys) -> a_hash
+ *
+ *  Returns a hash except the given keys from ENV and their values.
+ *
+ *     ENV                       #=> {"LANG"=>"en_US.UTF-8", "TERM"=>"xterm-256color", "HOME"=>"/Users/rhc"}
+ *     ENV.except("TERM","HOME") #=> {"LANG"=>"en_US.UTF-8"}
+ */
+static VALUE
+env_except(int argc, VALUE *argv, VALUE _)
+{
+    int i;
+    VALUE key, hash = env_to_hash();
+
+    for (i = 0; i < argc; i++) {
+        key = argv[i];
+        rb_hash_delete(hash, key);
+    }
+
+    return hash;
+}
+
+/*
+ * call-seq:
+ *   ENV.reject { |name, value| block } -> hash of name/value pairs
+ *   ENV.reject                         -> an_enumerator
+ *
+ * Yields each environment variable name and its value as a 2-element Array.
+ * Returns a Hash whose items are determined by the block.
+ * When the block returns a truthy value, the name/value pair is added to the return Hash;
+ * otherwise the pair is ignored:
+ *   ENV.replace('foo' => '0', 'bar' => '1', 'baz' => '2')
+ *   ENV.reject { |name, value| name.start_with?('b') } # => {"foo"=>"0"}
+ * Returns an Enumerator if no block given:
+ *   e = ENV.reject
+ *   e.each { |name, value| name.start_with?('b') } # => {"foo"=>"0"}
+ */
+static VALUE
+env_reject(VALUE _)
+{
+    return rb_hash_delete_if(env_to_hash());
+}
+
+NORETURN(static VALUE env_freeze(VALUE self));
+/*
+ * call-seq:
+ *   ENV.freeze
+ *
+ * Raises an exception:
+ *   ENV.freeze # Raises TypeError (cannot freeze ENV)
+ */
+static VALUE
+env_freeze(VALUE self)
+{
+    rb_raise(rb_eTypeError, "cannot freeze ENV");
+    UNREACHABLE_RETURN(self);
+}
+
+/*
+ * call-seq:
+ *   ENV.shift -> [name, value] or nil
+ *
+ * Removes the first environment variable from ENV and returns
+ * a 2-element Array containing its name and value:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.to_hash # => {'bar' => '1', 'foo' => '0'}
+ *   ENV.shift # => ['bar', '1']
+ *   ENV.to_hash # => {'foo' => '0'}
+ * Exactly which environment variable is "first" is OS-dependent.
+ * See {About Ordering}[rdoc-ref:ENV@About+Ordering].
+ *
+ * Returns +nil+ if the environment is empty.
+ */
+static VALUE
+env_shift(VALUE _)
+{
+    VALUE result = Qnil;
+    VALUE key = Qnil;
+
+    ENV_LOCK();
+    {
+        char **env = GET_ENVIRON(environ);
+        if (*env) {
+            const char *p = *env;
+            char *s = strchr(p, '=');
+            if (s) {
+                key = env_str_new(p, s-p);
+                VALUE val = env_str_new2(getenv(RSTRING_PTR(key)));
+                result = rb_assoc_new(key, val);
+            }
+        }
+        FREE_ENVIRON(environ);
+    }
+    ENV_UNLOCK();
+
+    if (!NIL_P(key)) {
+        env_delete(key);
+    }
+
+    return result;
+}
+
+/*
+ * call-seq:
+ *   ENV.invert -> hash of value/name pairs
+ *
+ * Returns a Hash whose keys are the ENV values,
+ * and whose values are the corresponding ENV names:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.invert # => {"1"=>"bar", "0"=>"foo"}
+ * For a duplicate ENV value, overwrites the hash entry:
+ *   ENV.replace('foo' => '0', 'bar' => '0')
+ *   ENV.invert # => {"0"=>"foo"}
+ * Note that the order of the ENV processing is OS-dependent,
+ * which means that the order of overwriting is also OS-dependent.
+ * See {About Ordering}[rdoc-ref:ENV@About+Ordering].
+ */
+static VALUE
+env_invert(VALUE _)
+{
+    return rb_hash_invert(env_to_hash());
+}
+
+static void
+keylist_delete(VALUE keys, VALUE key)
+{
+    long keylen, elen;
+    const char *keyptr, *eptr;
+    RSTRING_GETMEM(key, keyptr, keylen);
+    /* Don't stop at first key, as it is possible to have
+       multiple environment values with the same key.
+    */
+    for (long i=0; i<RARRAY_LEN(keys); i++) {
+        VALUE e = RARRAY_AREF(keys, i);
+        RSTRING_GETMEM(e, eptr, elen);
+        if (elen != keylen) continue;
+        if (!ENVNMATCH(keyptr, eptr, elen)) continue;
+        rb_ary_delete_at(keys, i);
+        i--;
+    }
+}
+
+static int
+env_replace_i(VALUE key, VALUE val, VALUE keys)
+{
+    env_name(key);
+    env_aset(key, val);
+
+    keylist_delete(keys, key);
+    return ST_CONTINUE;
+}
+
+/*
+ * call-seq:
+ *   ENV.replace(hash) -> ENV
+ *
+ * Replaces the entire content of the environment variables
+ * with the name/value pairs in the given +hash+;
+ * returns ENV.
+ *
+ * Replaces the content of ENV with the given pairs:
+ *   ENV.replace('foo' => '0', 'bar' => '1') # => ENV
+ *   ENV.to_hash # => {"bar"=>"1", "foo"=>"0"}
+ *
+ * Raises an exception if a name or value is invalid
+ * (see {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values]):
+ *   ENV.replace('foo' => '0', :bar => '1') # Raises TypeError (no implicit conversion of Symbol into String)
+ *   ENV.replace('foo' => '0', 'bar' => 1) # Raises TypeError (no implicit conversion of Integer into String)
+ *   ENV.to_hash # => {"bar"=>"1", "foo"=>"0"}
+ */
+static VALUE
+env_replace(VALUE env, VALUE hash)
+{
+    VALUE keys;
+    long i;
+
+    keys = env_keys(TRUE);
+    if (env == hash) return env;
+    hash = to_hash(hash);
+    rb_hash_foreach(hash, env_replace_i, keys);
+
+    for (i=0; i<RARRAY_LEN(keys); i++) {
+        env_delete(RARRAY_AREF(keys, i));
+    }
+    RB_GC_GUARD(keys);
+    return env;
+}
+
+static int
+env_update_i(VALUE key, VALUE val, VALUE _)
+{
+    env_aset(key, val);
+    return ST_CONTINUE;
+}
+
+static int
+env_update_block_i(VALUE key, VALUE val, VALUE _)
+{
+    VALUE oldval = rb_f_getenv(Qnil, key);
+    if (!NIL_P(oldval)) {
+        val = rb_yield_values(3, key, oldval, val);
+    }
+    env_aset(key, val);
+    return ST_CONTINUE;
+}
+
+/*
+ * call-seq:
+ *   ENV.update                                              -> ENV
+ *   ENV.update(*hashes)                                     -> ENV
+ *   ENV.update(*hashes) { |name, env_val, hash_val| block } -> ENV
+ *   ENV.merge!                                              -> ENV
+ *   ENV.merge!(*hashes)                                     -> ENV
+ *   ENV.merge!(*hashes) { |name, env_val, hash_val| block } -> ENV
+ *
+ * Adds to ENV each key/value pair in the given +hash+; returns ENV:
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.merge!('baz' => '2', 'bat' => '3') # => {"bar"=>"1", "bat"=>"3", "baz"=>"2", "foo"=>"0"}
+ * Deletes the ENV entry for a hash value that is +nil+:
+ *   ENV.merge!('baz' => nil, 'bat' => nil) # => {"bar"=>"1", "foo"=>"0"}
+ * For an already-existing name, if no block given, overwrites the ENV value:
+ *   ENV.merge!('foo' => '4') # => {"bar"=>"1", "foo"=>"4"}
+ * For an already-existing name, if block given,
+ * yields the name, its ENV value, and its hash value;
+ * the block's return value becomes the new name:
+ *   ENV.merge!('foo' => '5') { |name, env_val, hash_val | env_val + hash_val } # => {"bar"=>"1", "foo"=>"45"}
+ * Raises an exception if a name or value is invalid
+ * (see {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values]);
+ *   ENV.replace('foo' => '0', 'bar' => '1')
+ *   ENV.merge!('foo' => '6', :bar => '7', 'baz' => '9') # Raises TypeError (no implicit conversion of Symbol into String)
+ *   ENV # => {"bar"=>"1", "foo"=>"6"}
+ *   ENV.merge!('foo' => '7', 'bar' => 8, 'baz' => '9') # Raises TypeError (no implicit conversion of Integer into String)
+ *   ENV # => {"bar"=>"1", "foo"=>"7"}
+ * Raises an exception if the block returns an invalid name:
+ * (see {Invalid Names and Values}[rdoc-ref:ENV@Invalid+Names+and+Values]):
+ *   ENV.merge!('bat' => '8', 'foo' => '9') { |name, env_val, hash_val | 10 } # Raises TypeError (no implicit conversion of Integer into String)
+ *   ENV # => {"bar"=>"1", "bat"=>"8", "foo"=>"7"}
+ *
+ * Note that for the exceptions above,
+ * hash pairs preceding an invalid name or value are processed normally;
+ * those following are ignored.
+ */
+static VALUE
+env_update(int argc, VALUE *argv, VALUE env)
+{
+    rb_foreach_func *func = rb_block_given_p() ?
+        env_update_block_i : env_update_i;
+    for (int i = 0; i < argc; ++i) {
+        VALUE hash = argv[i];
+        if (env == hash) continue;
+        hash = to_hash(hash);
+        rb_hash_foreach(hash, func, 0);
+    }
+    return env;
+}
+
+NORETURN(static VALUE env_clone(int, VALUE *, VALUE));
+/*
+ * call-seq:
+ *   ENV.clone(freeze: nil) # raises TypeError
+ *
+ * Raises TypeError, because ENV is a wrapper for the process-wide
+ * environment variables and a clone is useless.
+ * Use #to_h to get a copy of ENV data as a hash.
+ */
+static VALUE
+env_clone(int argc, VALUE *argv, VALUE obj)
+{
+    if (argc) {
+        VALUE opt;
+        if (rb_scan_args(argc, argv, "0:", &opt) < argc) {
+            rb_get_freeze_opt(1, &opt);
+        }
+    }
+
+    rb_raise(rb_eTypeError, "Cannot clone ENV, use ENV.to_h to get a copy of ENV as a hash");
+}
+
+NORETURN(static VALUE env_dup(VALUE));
+/*
+ * call-seq:
+ *   ENV.dup # raises TypeError
+ *
+ * Raises TypeError, because ENV is a singleton object.
+ * Use #to_h to get a copy of ENV data as a hash.
+ */
+static VALUE
+env_dup(VALUE obj)
+{
+    rb_raise(rb_eTypeError, "Cannot dup ENV, use ENV.to_h to get a copy of ENV as a hash");
+}
+
+static const rb_data_type_t env_data_type = {
+    "ENV",
+    {
+        NULL,
+        NULL,
+        NULL,
+        NULL,
+    },
+    0, 0, RUBY_TYPED_FREE_IMMEDIATELY | RUBY_TYPED_WB_PROTECTED,
+};
+
+/*
+ *  A \Hash maps each of its unique keys to a specific value.
+ *
+ *  A \Hash has certain similarities to an Array, but:
+ *  - An Array index is always an Integer.
+ *  - A \Hash key can be (almost) any object.
+ *
+ *  === \Hash \Data Syntax
+ *
+ *  The older syntax for \Hash data uses the "hash rocket," <tt>=></tt>:
+ *
+ *    h = {:foo => 0, :bar => 1, :baz => 2}
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  Alternatively, but only for a \Hash key that's a Symbol,
+ *  you can use a newer JSON-style syntax,
+ *  where each bareword becomes a Symbol:
+ *
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  You can also use a String in place of a bareword:
+ *
+ *    h = {'foo': 0, 'bar': 1, 'baz': 2}
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  And you can mix the styles:
+ *
+ *    h = {foo: 0, :bar => 1, 'baz': 2}
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  But it's an error to try the JSON-style syntax
+ *  for a key that's not a bareword or a String:
+ *
+ *    # Raises SyntaxError (syntax error, unexpected ':', expecting =>):
+ *    h = {0: 'zero'}
+ *
+ *  Hash value can be omitted, meaning that value will be fetched from the context
+ *  by the name of the key:
+ *
+ *    x = 0
+ *    y = 100
+ *    h = {x:, y:}
+ *    h # => {:x=>0, :y=>100}
+ *
+ *  === Common Uses
+ *
+ *  You can use a \Hash to give names to objects:
+ *
+ *    person = {name: 'Matz', language: 'Ruby'}
+ *    person # => {:name=>"Matz", :language=>"Ruby"}
+ *
+ *  You can use a \Hash to give names to method arguments:
+ *
+ *    def some_method(hash)
+ *      p hash
+ *    end
+ *    some_method({foo: 0, bar: 1, baz: 2}) # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  Note: when the last argument in a method call is a \Hash,
+ *  the curly braces may be omitted:
+ *
+ *    some_method(foo: 0, bar: 1, baz: 2) # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  You can use a \Hash to initialize an object:
+ *
+ *    class Dev
+ *      attr_accessor :name, :language
+ *      def initialize(hash)
+ *        self.name = hash[:name]
+ *        self.language = hash[:language]
+ *      end
+ *    end
+ *    matz = Dev.new(name: 'Matz', language: 'Ruby')
+ *    matz # => #<Dev: @name="Matz", @language="Ruby">
+ *
+ *  === Creating a \Hash
+ *
+ *  You can create a \Hash object explicitly with:
+ *
+ *  - A {hash literal}[rdoc-ref:syntax/literals.rdoc@Hash+Literals].
+ *
+ *  You can convert certain objects to Hashes with:
+ *
+ *  - \Method #Hash.
+ *
+ *  You can create a \Hash by calling method Hash.new.
+ *
+ *  Create an empty Hash:
+ *
+ *    h = Hash.new
+ *    h # => {}
+ *    h.class # => Hash
+ *
+ *  You can create a \Hash by calling method Hash.[].
+ *
+ *  Create an empty Hash:
+ *
+ *    h = Hash[]
+ *    h # => {}
+ *
+ *  Create a \Hash with initial entries:
+ *
+ *    h = Hash[foo: 0, bar: 1, baz: 2]
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  You can create a \Hash by using its literal form (curly braces).
+ *
+ *  Create an empty \Hash:
+ *
+ *    h = {}
+ *    h # => {}
+ *
+ *  Create a \Hash with initial entries:
+ *
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *
+ *  === \Hash Value Basics
+ *
+ *  The simplest way to retrieve a \Hash value (instance method #[]):
+ *
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h[:foo] # => 0
+ *
+ *  The simplest way to create or update a \Hash value (instance method #[]=):
+ *
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h[:bat] = 3 # => 3
+ *    h # => {:foo=>0, :bar=>1, :baz=>2, :bat=>3}
+ *    h[:foo] = 4 # => 4
+ *    h # => {:foo=>4, :bar=>1, :baz=>2, :bat=>3}
+ *
+ *  The simplest way to delete a \Hash entry (instance method #delete):
+ *
+ *    h = {foo: 0, bar: 1, baz: 2}
+ *    h.delete(:bar) # => 1
+ *    h # => {:foo=>0, :baz=>2}
+ *
+ *  === Entry Order
+ *
+ *  A \Hash object presents its entries in the order of their creation. This is seen in:
+ *
+ *  - Iterative methods such as <tt>each</tt>, <tt>each_key</tt>, <tt>each_pair</tt>, <tt>each_value</tt>.
+ *  - Other order-sensitive methods such as <tt>shift</tt>, <tt>keys</tt>, <tt>values</tt>.
+ *  - The String returned by method <tt>inspect</tt>.
+ *
+ *  A new \Hash has its initial ordering per the given entries:
+ *
+ *    h = Hash[foo: 0, bar: 1]
+ *    h # => {:foo=>0, :bar=>1}
+ *
+ *  New entries are added at the end:
+ *
+ *    h[:baz] = 2
+ *    h # => {:foo=>0, :bar=>1, :baz=>2}
+ *
+ *  Updating a value does not affect the order:
+ *
+ *    h[:baz] = 3
+ *    h # => {:foo=>0, :bar=>1, :baz=>3}
+ *
+ *  But re-creating a deleted entry can affect the order:
+ *
+ *    h.delete(:foo)
+ *    h[:foo] = 5
+ *    h # => {:bar=>1, :baz=>3, :foo=>5}
+ *
+ *  === \Hash Keys
+ *
+ *  ==== \Hash Key Equivalence
+ *
+ *  Two objects are treated as the same \hash key when their <code>hash</code> value
+ *  is identical and the two objects are <code>eql?</code> to each other.
+ *
+ *  ==== Modifying an Active \Hash Key
+ *
+ *  Modifying a \Hash key while it is in use damages the hash's index.
+ *
+ *  This \Hash has keys that are Arrays:
+ *
+ *    a0 = [ :foo, :bar ]
+ *    a1 = [ :baz, :bat ]
+ *    h = {a0 => 0, a1 => 1}
+ *    h.include?(a0) # => true
+ *    h[a0] # => 0
+ *    a0.hash # => 110002110
+ *
+ *  Modifying array element <tt>a0[0]</tt> changes its hash value:
+ *
+ *    a0[0] = :bam
+ *    a0.hash # => 1069447059
+ *
+ *  And damages the \Hash index:
+ *
+ *    h.include?(a0) # => false
+ *    h[a0] # => nil
+ *
+ *  You can repair the hash index using method +rehash+:
+ *
+ *    h.rehash # => {[:bam, :bar]=>0, [:baz, :bat]=>1}
+ *    h.include?(a0) # => true
+ *    h[a0] # => 0
+ *
+ *  A String key is always safe.
+ *  That's because an unfrozen String
+ *  passed as a key will be replaced by a duplicated and frozen String:
+ *
+ *    s = 'foo'
+ *    s.frozen? # => false
+ *    h = {s => 0}
+ *    first_key = h.keys.first
+ *    first_key.frozen? # => true
+ *
+ *  ==== User-Defined \Hash Keys
+ *
+ *  To be useable as a \Hash key, objects must implement the methods <code>hash</code> and <code>eql?</code>.
+ *  Note: this requirement does not apply if the \Hash uses #compare_by_identity since comparison will then
+ *  rely on the keys' object id instead of <code>hash</code> and <code>eql?</code>.
+ *
+ *  Object defines basic implementation for <code>hash</code> and <code>eq?</code> that makes each object
+ *  a distinct key. Typically, user-defined classes will want to override these methods to provide meaningful
+ *  behavior, or for example inherit Struct that has useful definitions for these.
+ *
+ *  A typical implementation of <code>hash</code> is based on the
+ *  object's data while <code>eql?</code> is usually aliased to the overridden
+ *  <code>==</code> method:
+ *
+ *    class Book
+ *      attr_reader :author, :title
+ *
+ *      def initialize(author, title)
+ *        @author = author
+ *        @title = title
+ *      end
+ *
+ *      def ==(other)
+ *        self.class === other &&
+ *          other.author == @author &&
+ *          other.title == @title
+ *      end
+ *
+ *      alias eql? ==
+ *
+ *      def hash
+ *        [self.class, @author, @title].hash
+ *      end
+ *    end
+ *
+ *    book1 = Book.new 'matz', 'Ruby in a Nutshell'
+ *    book2 = Book.new 'matz', 'Ruby in a Nutshell'
+ *
+ *    reviews = {}
+ *
+ *    reviews[book1] = 'Great reference!'
+ *    reviews[book2] = 'Nice and compact!'
+ *
+ *    reviews.length #=> 1
+ *
+ *  === Default Values
+ *
+ *  The methods #[], #values_at and #dig need to return the value associated to a certain key.
+ *  When that key is not found, that value will be determined by its default proc (if any)
+ *  or else its default (initially `nil`).
+ *
+ *  You can retrieve the default value with method #default:
+ *
+ *    h = Hash.new
+ *    h.default # => nil
+ *
+ *  You can set the default value by passing an argument to method Hash.new or
+ *  with method #default=
+ *
+ *    h = Hash.new(-1)
+ *    h.default # => -1
+ *    h.default = 0
+ *    h.default # => 0
+ *
+ *  This default value is returned for #[], #values_at and #dig when a key is
+ *  not found:
+ *
+ *    counts = {foo: 42}
+ *    counts.default # => nil (default)
+ *    counts[:foo] = 42
+ *    counts[:bar] # => nil
+ *    counts.default = 0
+ *    counts[:bar] # => 0
+ *    counts.values_at(:foo, :bar, :baz) # => [42, 0, 0]
+ *    counts.dig(:bar) # => 0
+ *
+ *  Note that the default value is used without being duplicated. It is not advised to set
+ *  the default value to a mutable object:
+ *
+ *    synonyms = Hash.new([])
+ *    synonyms[:hello] # => []
+ *    synonyms[:hello] << :hi # => [:hi], but this mutates the default!
+ *    synonyms.default # => [:hi]
+ *    synonyms[:world] << :universe
+ *    synonyms[:world] # => [:hi, :universe], oops
+ *    synonyms.keys # => [], oops
+ *
+ *  To use a mutable object as default, it is recommended to use a default proc
+ *
+ *  ==== Default Proc
+ *
+ *  When the default proc for a \Hash is set (i.e., not +nil+),
+ *  the default value returned by method #[] is determined by the default proc alone.
+ *
+ *  You can retrieve the default proc with method #default_proc:
+ *
+ *    h = Hash.new
+ *    h.default_proc # => nil
+ *
+ *  You can set the default proc by calling Hash.new with a block or
+ *  calling the method #default_proc=
+ *
+ *    h = Hash.new { |hash, key| "Default value for #{key}" }
+ *    h.default_proc.class # => Proc
+ *    h.default_proc = proc { |hash, key| "Default value for #{key.inspect}" }
+ *    h.default_proc.class # => Proc
+ *
+ *  When the default proc is set (i.e., not +nil+)
+ *  and method #[] is called with with a non-existent key,
+ *  #[] calls the default proc with both the \Hash object itself and the missing key,
+ *  then returns the proc's return value:
+ *
+ *    h = Hash.new { |hash, key| "Default value for #{key}" }
+ *    h[:nosuch] # => "Default value for nosuch"
+ *
+ *  Note that in the example above no entry for key +:nosuch+ is created:
+ *
+ *    h.include?(:nosuch) # => false
+ *
+ *  However, the proc itself can add a new entry:
+ *
+ *    synonyms = Hash.new { |hash, key| hash[key] = [] }
+ *    synonyms.include?(:hello) # => false
+ *    synonyms[:hello] << :hi # => [:hi]
+ *    synonyms[:world] << :universe # => [:universe]
+ *    synonyms.keys # => [:hello, :world]
+ *
+ *  Note that setting the default proc will clear the default value and vice versa.
+ *
+ *  Be aware that a default proc that modifies the hash is not thread-safe in the
+ *  sense that multiple threads can call into the default proc concurrently for the
+ *  same key.
+ *
+ *  === What's Here
+ *
+ *  First, what's elsewhere. \Class \Hash:
+ *
+ *  - Inherits from {class Object}[rdoc-ref:Object@What-27s+Here].
+ *  - Includes {module Enumerable}[rdoc-ref:Enumerable@What-27s+Here],
+ *    which provides dozens of additional methods.
+ *
+ *  Here, class \Hash provides methods that are useful for:
+ *
+ *  - {Creating a Hash}[rdoc-ref:Hash@Methods+for+Creating+a+Hash]
+ *  - {Setting Hash State}[rdoc-ref:Hash@Methods+for+Setting+Hash+State]
+ *  - {Querying}[rdoc-ref:Hash@Methods+for+Querying]
+ *  - {Comparing}[rdoc-ref:Hash@Methods+for+Comparing]
+ *  - {Fetching}[rdoc-ref:Hash@Methods+for+Fetching]
+ *  - {Assigning}[rdoc-ref:Hash@Methods+for+Assigning]
+ *  - {Deleting}[rdoc-ref:Hash@Methods+for+Deleting]
+ *  - {Iterating}[rdoc-ref:Hash@Methods+for+Iterating]
+ *  - {Converting}[rdoc-ref:Hash@Methods+for+Converting]
+ *  - {Transforming Keys and Values}[rdoc-ref:Hash@Methods+for+Transforming+Keys+and+Values]
+ *  - {And more....}[rdoc-ref:Hash@Other+Methods]
+ *
+ *  \Class \Hash also includes methods from module Enumerable.
+ *
+ *  ==== Methods for Creating a \Hash
+ *
+ *  - ::[]: Returns a new hash populated with given objects.
+ *  - ::new: Returns a new empty hash.
+ *  - ::try_convert: Returns a new hash created from a given object.
+ *
+ *  ==== Methods for Setting \Hash State
+ *
+ *  - #compare_by_identity: Sets +self+ to consider only identity in comparing keys.
+ *  - #default=: Sets the default to a given value.
+ *  - #default_proc=: Sets the default proc to a given proc.
+ *  - #rehash: Rebuilds the hash table by recomputing the hash index for each key.
+ *
+ *  ==== Methods for Querying
+ *
+ *  - #any?: Returns whether any element satisfies a given criterion.
+ *  - #compare_by_identity?: Returns whether the hash considers only identity when comparing keys.
+ *  - #default: Returns the default value, or the default value for a given key.
+ *  - #default_proc: Returns the default proc.
+ *  - #empty?: Returns whether there are no entries.
+ *  - #eql?: Returns whether a given object is equal to +self+.
+ *  - #hash: Returns the integer hash code.
+ *  - #has_value?: Returns whether a given object is a value in +self+.
+ *  - #include?, #has_key?, #member?, #key?: Returns whether a given object is a key in +self+.
+ *  - #length, #size: Returns the count of entries.
+ *  - #value?: Returns whether a given object is a value in +self+.
+ *
+ *  ==== Methods for Comparing
+ *
+ *  - #<: Returns whether +self+ is a proper subset of a given object.
+ *  - #<=: Returns whether +self+ is a subset of a given object.
+ *  - #==: Returns whether a given object is equal to +self+.
+ *  - #>: Returns whether +self+ is a proper superset of a given object
+ *  - #>=: Returns whether +self+ is a superset of a given object.
+ *
+ *  ==== Methods for Fetching
+ *
+ *  - #[]: Returns the value associated with a given key.
+ *  - #assoc: Returns a 2-element array containing a given key and its value.
+ *  - #dig: Returns the object in nested objects that is specified
+ *    by a given key and additional arguments.
+ *  - #fetch: Returns the value for a given key.
+ *  - #fetch_values: Returns array containing the values associated with given keys.
+ *  - #key: Returns the key for the first-found entry with a given value.
+ *  - #keys: Returns an array containing all keys in +self+.
+ *  - #rassoc: Returns a 2-element array consisting of the key and value
+ *    of the first-found entry having a given value.
+ *  - #values: Returns an array containing all values in +self+/
+ *  - #values_at: Returns an array containing values for given keys.
+ *
+ *  ==== Methods for Assigning
+ *
+ *  - #[]=, #store: Associates a given key with a given value.
+ *  - #merge: Returns the hash formed by merging each given hash into a copy of +self+.
+ *  - #merge!, #update: Merges each given hash into +self+.
+ *  - #replace: Replaces the entire contents of +self+ with the contents of a given hash.
+ *
+ *  ==== Methods for Deleting
+ *
+ *  These methods remove entries from +self+:
+ *
+ *  - #clear: Removes all entries from +self+.
+ *  - #compact!: Removes all +nil+-valued entries from +self+.
+ *  - #delete: Removes the entry for a given key.
+ *  - #delete_if: Removes entries selected by a given block.
+ *  - #filter!, #select!: Keep only those entries selected by a given block.
+ *  - #keep_if: Keep only those entries selected by a given block.
+ *  - #reject!: Removes entries selected by a given block.
+ *  - #shift: Removes and returns the first entry.
+ *
+ *  These methods return a copy of +self+ with some entries removed:
+ *
+ *  - #compact: Returns a copy of +self+ with all +nil+-valued entries removed.
+ *  - #except: Returns a copy of +self+ with entries removed for specified keys.
+ *  - #filter, #select: Returns a copy of +self+ with only those entries selected by a given block.
+ *  - #reject: Returns a copy of +self+ with entries removed as specified by a given block.
+ *  - #slice: Returns a hash containing the entries for given keys.
+ *
+ *  ==== Methods for Iterating
+ *  - #each, #each_pair: Calls a given block with each key-value pair.
+ *  - #each_key: Calls a given block with each key.
+ *  - #each_value: Calls a given block with each value.
+ *
+ *  ==== Methods for Converting
+ *
+ *  - #inspect, #to_s: Returns a new String containing the hash entries.
+ *  - #to_a: Returns a new array of 2-element arrays;
+ *    each nested array contains a key-value pair from +self+.
+ *  - #to_h: Returns +self+ if a \Hash;
+ *    if a subclass of \Hash, returns a \Hash containing the entries from +self+.
+ *  - #to_hash: Returns +self+.
+ *  - #to_proc: Returns a proc that maps a given key to its value.
+ *
+ *  ==== Methods for Transforming Keys and Values
+ *
+ *  - #transform_keys: Returns a copy of +self+ with modified keys.
+ *  - #transform_keys!: Modifies keys in +self+
+ *  - #transform_values: Returns a copy of +self+ with modified values.
+ *  - #transform_values!: Modifies values in +self+.
+ *
+ *  ==== Other Methods
+ *  - #flatten: Returns an array that is a 1-dimensional flattening of +self+.
+ *  - #invert: Returns a hash with the each key-value pair inverted.
+ *
+ */
+
+void
+Init_Hash(void)
+{
+    id_hash = rb_intern_const("hash");
+    id_flatten_bang = rb_intern_const("flatten!");
+    id_hash_iter_lev = rb_make_internal_id();
+
+    rb_cHash = rb_define_class("Hash", rb_cObject);
+
+    rb_include_module(rb_cHash, rb_mEnumerable);
+
+    rb_define_alloc_func(rb_cHash, empty_hash_alloc);
+    rb_define_singleton_method(rb_cHash, "[]", rb_hash_s_create, -1);
+    rb_define_singleton_method(rb_cHash, "try_convert", rb_hash_s_try_convert, 1);
+    rb_define_method(rb_cHash, "initialize", rb_hash_initialize, -1);
+    rb_define_method(rb_cHash, "initialize_copy", rb_hash_replace, 1);
+    rb_define_method(rb_cHash, "rehash", rb_hash_rehash, 0);
+
+    rb_define_method(rb_cHash, "to_hash", rb_hash_to_hash, 0);
+    rb_define_method(rb_cHash, "to_h", rb_hash_to_h, 0);
+    rb_define_method(rb_cHash, "to_a", rb_hash_to_a, 0);
+    rb_define_method(rb_cHash, "inspect", rb_hash_inspect, 0);
+    rb_define_alias(rb_cHash, "to_s", "inspect");
+    rb_define_method(rb_cHash, "to_proc", rb_hash_to_proc, 0);
+
+    rb_define_method(rb_cHash, "==", rb_hash_equal, 1);
+    rb_define_method(rb_cHash, "[]", rb_hash_aref, 1);
+    rb_define_method(rb_cHash, "hash", rb_hash_hash, 0);
+    rb_define_method(rb_cHash, "eql?", rb_hash_eql, 1);
+    rb_define_method(rb_cHash, "fetch", rb_hash_fetch_m, -1);
+    rb_define_method(rb_cHash, "[]=", rb_hash_aset, 2);
+    rb_define_method(rb_cHash, "store", rb_hash_aset, 2);
+    rb_define_method(rb_cHash, "default", rb_hash_default, -1);
+    rb_define_method(rb_cHash, "default=", rb_hash_set_default, 1);
+    rb_define_method(rb_cHash, "default_proc", rb_hash_default_proc, 0);
+    rb_define_method(rb_cHash, "default_proc=", rb_hash_set_default_proc, 1);
+    rb_define_method(rb_cHash, "key", rb_hash_key, 1);
+    rb_define_method(rb_cHash, "size", rb_hash_size, 0);
+    rb_define_method(rb_cHash, "length", rb_hash_size, 0);
+    rb_define_method(rb_cHash, "empty?", rb_hash_empty_p, 0);
+
+    rb_define_method(rb_cHash, "each_value", rb_hash_each_value, 0);
+    rb_define_method(rb_cHash, "each_key", rb_hash_each_key, 0);
+    rb_define_method(rb_cHash, "each_pair", rb_hash_each_pair, 0);
+    rb_define_method(rb_cHash, "each", rb_hash_each_pair, 0);
+
+    rb_define_method(rb_cHash, "transform_keys", rb_hash_transform_keys, -1);
+    rb_define_method(rb_cHash, "transform_keys!", rb_hash_transform_keys_bang, -1);
+    rb_define_method(rb_cHash, "transform_values", rb_hash_transform_values, 0);
+    rb_define_method(rb_cHash, "transform_values!", rb_hash_transform_values_bang, 0);
+
+    rb_define_method(rb_cHash, "keys", rb_hash_keys, 0);
+    rb_define_method(rb_cHash, "values", rb_hash_values, 0);
+    rb_define_method(rb_cHash, "values_at", rb_hash_values_at, -1);
+    rb_define_method(rb_cHash, "fetch_values", rb_hash_fetch_values, -1);
+
+    rb_define_method(rb_cHash, "shift", rb_hash_shift, 0);
+    rb_define_method(rb_cHash, "delete", rb_hash_delete_m, 1);
+    rb_define_method(rb_cHash, "delete_if", rb_hash_delete_if, 0);
+    rb_define_method(rb_cHash, "keep_if", rb_hash_keep_if, 0);
+    rb_define_method(rb_cHash, "select", rb_hash_select, 0);
+    rb_define_method(rb_cHash, "select!", rb_hash_select_bang, 0);
+    rb_define_method(rb_cHash, "filter", rb_hash_select, 0);
+    rb_define_method(rb_cHash, "filter!", rb_hash_select_bang, 0);
+    rb_define_method(rb_cHash, "reject", rb_hash_reject, 0);
+    rb_define_method(rb_cHash, "reject!", rb_hash_reject_bang, 0);
+    rb_define_method(rb_cHash, "slice", rb_hash_slice, -1);
+    rb_define_method(rb_cHash, "except", rb_hash_except, -1);
+    rb_define_method(rb_cHash, "clear", rb_hash_clear, 0);
+    rb_define_method(rb_cHash, "invert", rb_hash_invert, 0);
+    rb_define_method(rb_cHash, "update", rb_hash_update, -1);
+    rb_define_method(rb_cHash, "replace", rb_hash_replace, 1);
+    rb_define_method(rb_cHash, "merge!", rb_hash_update, -1);
+    rb_define_method(rb_cHash, "merge", rb_hash_merge, -1);
+    rb_define_method(rb_cHash, "assoc", rb_hash_assoc, 1);
+    rb_define_method(rb_cHash, "rassoc", rb_hash_rassoc, 1);
+    rb_define_method(rb_cHash, "flatten", rb_hash_flatten, -1);
+    rb_define_method(rb_cHash, "compact", rb_hash_compact, 0);
+    rb_define_method(rb_cHash, "compact!", rb_hash_compact_bang, 0);
+
+    rb_define_method(rb_cHash, "include?", rb_hash_has_key, 1);
+    rb_define_method(rb_cHash, "member?", rb_hash_has_key, 1);
+    rb_define_method(rb_cHash, "has_key?", rb_hash_has_key, 1);
+    rb_define_method(rb_cHash, "has_value?", rb_hash_has_value, 1);
+    rb_define_method(rb_cHash, "key?", rb_hash_has_key, 1);
+    rb_define_method(rb_cHash, "value?", rb_hash_has_value, 1);
+
+    rb_define_method(rb_cHash, "compare_by_identity", rb_hash_compare_by_id, 0);
+    rb_define_method(rb_cHash, "compare_by_identity?", rb_hash_compare_by_id_p, 0);
+
+    rb_define_method(rb_cHash, "any?", rb_hash_any_p, -1);
+    rb_define_method(rb_cHash, "dig", rb_hash_dig, -1);
+
+    rb_define_method(rb_cHash, "<=", rb_hash_le, 1);
+    rb_define_method(rb_cHash, "<", rb_hash_lt, 1);
+    rb_define_method(rb_cHash, ">=", rb_hash_ge, 1);
+    rb_define_method(rb_cHash, ">", rb_hash_gt, 1);
+
+    rb_define_method(rb_cHash, "deconstruct_keys", rb_hash_deconstruct_keys, 1);
+
+    rb_define_singleton_method(rb_cHash, "ruby2_keywords_hash?", rb_hash_s_ruby2_keywords_hash_p, 1);
+    rb_define_singleton_method(rb_cHash, "ruby2_keywords_hash", rb_hash_s_ruby2_keywords_hash, 1);
+
+    /* Document-class: ENV
+     *
+     * \ENV is a hash-like accessor for environment variables.
+     *
+     * === Interaction with the Operating System
+     *
+     * The \ENV object interacts with the operating system's environment variables:
+     *
+     * - When you get the value for a name in \ENV, the value is retrieved from among the current environment variables.
+     * - When you create or set a name-value pair in \ENV, the name and value are immediately set in the environment variables.
+     * - When you delete a name-value pair in \ENV, it is immediately deleted from the environment variables.
+     *
+     * === Names and Values
+     *
+     * Generally, a name or value is a String.
+     *
+     * ==== Valid Names and Values
+     *
+     * Each name or value must be one of the following:
+     *
+     * - A String.
+     * - An object that responds to \#to_str by returning a String, in which case that String will be used as the name or value.
+     *
+     * ==== Invalid Names and Values
+     *
+     * A new name:
+     *
+     * - May not be the empty string:
+     *     ENV[''] = '0'
+     *     # Raises Errno::EINVAL (Invalid argument - ruby_setenv())
+     *
+     * - May not contain character <code>"="</code>:
+     *     ENV['='] = '0'
+     *     # Raises Errno::EINVAL (Invalid argument - ruby_setenv(=))
+     *
+     * A new name or value:
+     *
+     * - May not be a non-String that does not respond to \#to_str:
+     *
+     *     ENV['foo'] = Object.new
+     *     # Raises TypeError (no implicit conversion of Object into String)
+     *     ENV[Object.new] = '0'
+     *     # Raises TypeError (no implicit conversion of Object into String)
+     *
+     * - May not contain the NUL character <code>"\0"</code>:
+     *
+     *     ENV['foo'] = "\0"
+     *     # Raises ArgumentError (bad environment variable value: contains null byte)
+     *     ENV["\0"] == '0'
+     *     # Raises ArgumentError (bad environment variable name: contains null byte)
+     *
+     * - May not have an ASCII-incompatible encoding such as UTF-16LE or ISO-2022-JP:
+     *
+     *     ENV['foo'] = '0'.force_encoding(Encoding::ISO_2022_JP)
+     *     # Raises ArgumentError (bad environment variable name: ASCII incompatible encoding: ISO-2022-JP)
+     *     ENV["foo".force_encoding(Encoding::ISO_2022_JP)] = '0'
+     *     # Raises ArgumentError (bad environment variable name: ASCII incompatible encoding: ISO-2022-JP)
+     *
+     * === About Ordering
+     *
+     * \ENV enumerates its name/value pairs in the order found
+     * in the operating system's environment variables.
+     * Therefore the ordering of \ENV content is OS-dependent, and may be indeterminate.
+     *
+     * This will be seen in:
+     * - A Hash returned by an \ENV method.
+     * - An Enumerator returned by an \ENV method.
+     * - An Array returned by ENV.keys, ENV.values, or ENV.to_a.
+     * - The String returned by ENV.inspect.
+     * - The Array returned by ENV.shift.
+     * - The name returned by ENV.key.
+     *
+     * === About the Examples
+     * Some methods in \ENV return \ENV itself. Typically, there are many environment variables.
+     * It's not useful to display a large \ENV in the examples here,
+     * so most example snippets begin by resetting the contents of \ENV:
+     * - ENV.replace replaces \ENV with a new collection of entries.
+     * - ENV.clear empties \ENV.
+     *
+     * == What's Here
+     *
+     * First, what's elsewhere. \Class \ENV:
+     *
+     * - Inherits from {class Object}[rdoc-ref:Object@What-27s+Here].
+     * - Extends {module Enumerable}[rdoc-ref:Enumerable@What-27s+Here],
+     *
+     * Here, class \ENV provides methods that are useful for:
+     *
+     * - {Querying}[rdoc-ref:ENV@Methods+for+Querying]
+     * - {Assigning}[rdoc-ref:ENV@Methods+for+Assigning]
+     * - {Deleting}[rdoc-ref:ENV@Methods+for+Deleting]
+     * - {Iterating}[rdoc-ref:ENV@Methods+for+Iterating]
+     * - {Converting}[rdoc-ref:ENV@Methods+for+Converting]
+     * - {And more ....}[rdoc-ref:ENV@More+Methods]
+     *
+     * === Methods for Querying
+     *
+     * - ::[]: Returns the value for the given environment variable name if it exists:
+     * - ::empty?: Returns whether \ENV is empty.
+     * - ::has_value?, ::value?: Returns whether the given value is in \ENV.
+     * - ::include?, ::has_key?, ::key?, ::member?: Returns whether the given name
+         is in \ENV.
+     * - ::key: Returns the name of the first entry with the given value.
+     * - ::size, ::length: Returns the number of entries.
+     * - ::value?: Returns whether any entry has the given value.
+     *
+     * === Methods for Assigning
+     *
+     * - ::[]=, ::store: Creates, updates, or deletes the named environment variable.
+     * - ::clear: Removes every environment variable; returns \ENV:
+     * - ::update, ::merge!: Adds to \ENV each key/value pair in the given hash.
+     * - ::replace: Replaces the entire content of the \ENV
+     *   with the name/value pairs in the given hash.
+     *
+     * === Methods for Deleting
+     *
+     * - ::delete: Deletes the named environment variable name if it exists.
+     * - ::delete_if: Deletes entries selected by the block.
+     * - ::keep_if: Deletes entries not selected by the block.
+     * - ::reject!: Similar to #delete_if, but returns +nil+ if no change was made.
+     * - ::select!, ::filter!: Deletes entries selected by the block.
+     * - ::shift: Removes and returns the first entry.
+     *
+     * === Methods for Iterating
+     *
+     * - ::each, ::each_pair: Calls the block with each name/value pair.
+     * - ::each_key: Calls the block with each name.
+     * - ::each_value: Calls the block with each value.
+     *
+     * === Methods for Converting
+     *
+     * - ::assoc: Returns a 2-element array containing the name and value
+     *   of the named environment variable if it exists:
+     * - ::clone: Returns \ENV (and issues a warning).
+     * - ::except: Returns a hash of all name/value pairs except those given.
+     * - ::fetch: Returns the value for the given name.
+     * - ::inspect: Returns the contents of \ENV as a string.
+     * - ::invert: Returns a hash whose keys are the \ENV values,
+         and whose values are the corresponding \ENV names.
+     * - ::keys: Returns an array of all names.
+     * - ::rassoc: Returns the name and value of the first found entry
+     *   that has the given value.
+     * - ::reject: Returns a hash of those entries not rejected by the block.
+     * - ::select, ::filter: Returns a hash of name/value pairs selected by the block.
+     * - ::slice: Returns a hash of the given names and their corresponding values.
+     * - ::to_a: Returns the entries as an array of 2-element Arrays.
+     * - ::to_h: Returns a hash of entries selected by the block.
+     * - ::to_hash: Returns a hash of all entries.
+     * - ::to_s: Returns the string <tt>'ENV'</tt>.
+     * - ::values: Returns all values as an array.
+     * - ::values_at: Returns an array of the values for the given name.
+     *
+     * === More Methods
+     *
+     * - ::dup: Raises an exception.
+     * - ::freeze: Raises an exception.
+     * - ::rehash: Returns +nil+, without modifying \ENV.
+     *
+     */
+
+    /*
+     * Hack to get RDoc to regard ENV as a class:
+     * envtbl = rb_define_class("ENV", rb_cObject);
+     */
+    origenviron = environ;
+    envtbl = TypedData_Wrap_Struct(rb_cObject, &env_data_type, NULL);
+    rb_extend_object(envtbl, rb_mEnumerable);
+    FL_SET_RAW(envtbl, RUBY_FL_SHAREABLE);
+
+
+    rb_define_singleton_method(envtbl, "[]", rb_f_getenv, 1);
+    rb_define_singleton_method(envtbl, "fetch", env_fetch, -1);
+    rb_define_singleton_method(envtbl, "[]=", env_aset_m, 2);
+    rb_define_singleton_method(envtbl, "store", env_aset_m, 2);
+    rb_define_singleton_method(envtbl, "each", env_each_pair, 0);
+    rb_define_singleton_method(envtbl, "each_pair", env_each_pair, 0);
+    rb_define_singleton_method(envtbl, "each_key", env_each_key, 0);
+    rb_define_singleton_method(envtbl, "each_value", env_each_value, 0);
+    rb_define_singleton_method(envtbl, "delete", env_delete_m, 1);
+    rb_define_singleton_method(envtbl, "delete_if", env_delete_if, 0);
+    rb_define_singleton_method(envtbl, "keep_if", env_keep_if, 0);
+    rb_define_singleton_method(envtbl, "slice", env_slice, -1);
+    rb_define_singleton_method(envtbl, "except", env_except, -1);
+    rb_define_singleton_method(envtbl, "clear", env_clear, 0);
+    rb_define_singleton_method(envtbl, "reject", env_reject, 0);
+    rb_define_singleton_method(envtbl, "reject!", env_reject_bang, 0);
+    rb_define_singleton_method(envtbl, "select", env_select, 0);
+    rb_define_singleton_method(envtbl, "select!", env_select_bang, 0);
+    rb_define_singleton_method(envtbl, "filter", env_select, 0);
+    rb_define_singleton_method(envtbl, "filter!", env_select_bang, 0);
+    rb_define_singleton_method(envtbl, "shift", env_shift, 0);
+    rb_define_singleton_method(envtbl, "freeze", env_freeze, 0);
+    rb_define_singleton_method(envtbl, "invert", env_invert, 0);
+    rb_define_singleton_method(envtbl, "replace", env_replace, 1);
+    rb_define_singleton_method(envtbl, "update", env_update, -1);
+    rb_define_singleton_method(envtbl, "merge!", env_update, -1);
+    rb_define_singleton_method(envtbl, "inspect", env_inspect, 0);
+    rb_define_singleton_method(envtbl, "rehash", env_none, 0);
+    rb_define_singleton_method(envtbl, "to_a", env_to_a, 0);
+    rb_define_singleton_method(envtbl, "to_s", env_to_s, 0);
+    rb_define_singleton_method(envtbl, "key", env_key, 1);
+    rb_define_singleton_method(envtbl, "size", env_size, 0);
+    rb_define_singleton_method(envtbl, "length", env_size, 0);
+    rb_define_singleton_method(envtbl, "empty?", env_empty_p, 0);
+    rb_define_singleton_method(envtbl, "keys", env_f_keys, 0);
+    rb_define_singleton_method(envtbl, "values", env_f_values, 0);
+    rb_define_singleton_method(envtbl, "values_at", env_values_at, -1);
+    rb_define_singleton_method(envtbl, "include?", env_has_key, 1);
+    rb_define_singleton_method(envtbl, "member?", env_has_key, 1);
+    rb_define_singleton_method(envtbl, "has_key?", env_has_key, 1);
+    rb_define_singleton_method(envtbl, "has_value?", env_has_value, 1);
+    rb_define_singleton_method(envtbl, "key?", env_has_key, 1);
+    rb_define_singleton_method(envtbl, "value?", env_has_value, 1);
+    rb_define_singleton_method(envtbl, "to_hash", env_f_to_hash, 0);
+    rb_define_singleton_method(envtbl, "to_h", env_to_h, 0);
+    rb_define_singleton_method(envtbl, "assoc", env_assoc, 1);
+    rb_define_singleton_method(envtbl, "rassoc", env_rassoc, 1);
+    rb_define_singleton_method(envtbl, "clone", env_clone, -1);
+    rb_define_singleton_method(envtbl, "dup", env_dup, 0);
+
+    VALUE envtbl_class = rb_singleton_class(envtbl);
+    rb_undef_method(envtbl_class, "initialize");
+    rb_undef_method(envtbl_class, "initialize_clone");
+    rb_undef_method(envtbl_class, "initialize_copy");
+    rb_undef_method(envtbl_class, "initialize_dup");
+
+    /*
+     * \ENV is a Hash-like accessor for environment variables.
+     *
+     * See ENV (the class) for more details.
+     */
+    rb_define_global_const("ENV", envtbl);
+
+    /* for callcc */
+    ruby_register_rollback_func_for_ensure(hash_foreach_ensure, hash_foreach_ensure_rollback);
+
+    HASH_ASSERT(sizeof(ar_hint_t) * RHASH_AR_TABLE_MAX_SIZE == sizeof(VALUE));
+}
diff -Nuarp ruby-3.3.3.a/include/ruby/internal/gc.h ruby-3.3.3.b/include/ruby/internal/gc.h
--- ruby-3.3.3.a/include/ruby/internal/gc.h	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/include/ruby/internal/gc.h	2024-07-15 21:17:45.248237272 -0400
@@ -431,6 +431,15 @@ void rb_gc_unregister_address(VALUE *val
  */
 void rb_gc_register_mark_object(VALUE object);
 
+VALUE rb_gc_enable_stats(void);
+VALUE rb_gc_disable_stats(void);
+VALUE rb_gc_stats_enabled(void);
+double rb_gc_total_time(void);
+VALUE rb_gc_heap_slots(void);
+VALUE rb_gc_heap_slots_live_after_last_gc(void);
+size_t rb_gc_total_mallocs(void);
+size_t rb_gc_total_malloced_bytes(void);
+
 RBIMPL_SYMBOL_EXPORT_END()
 
 /**
diff -Nuarp ruby-3.3.3.a/lib/rdoc/ri/paths.rb ruby-3.3.3.b/lib/rdoc/ri/paths.rb
--- ruby-3.3.3.a/lib/rdoc/ri/paths.rb	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/lib/rdoc/ri/paths.rb	2024-07-15 21:17:10.687472111 -0400
@@ -10,7 +10,7 @@ module RDoc::RI::Paths
   #:stopdoc:
   require 'rbconfig'
 
-  version = RbConfig::CONFIG['ruby_version']
+  version = RbConfig::CONFIG['ruby_version_dir_name'] || RbConfig::CONFIG['ruby_version']
 
   BASE    = File.join RbConfig::CONFIG['ridir'], version
 
diff -Nuarp ruby-3.3.3.a/lib/rubygems/defaults.rb ruby-3.3.3.b/lib/rubygems/defaults.rb
--- ruby-3.3.3.a/lib/rubygems/defaults.rb	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/lib/rubygems/defaults.rb	2024-07-15 21:17:10.688472075 -0400
@@ -35,7 +35,7 @@ module Gem
   # specified in the environment
 
   def self.default_dir
-    @default_dir ||= File.join(RbConfig::CONFIG["rubylibprefix"], "gems", RbConfig::CONFIG["ruby_version"])
+    @default_dir ||= File.join(RbConfig::CONFIG["rubylibprefix"], "gems", RbConfig::CONFIG["ruby_version_dir_name"] || RbConfig::CONFIG["ruby_version"])
   end
 
   ##
@@ -104,7 +104,8 @@ module Gem
     gem_dir = File.join(Gem.user_home, ".gem")
     gem_dir = File.join(Gem.data_home, "gem") unless File.exist?(gem_dir)
     parts = [gem_dir, ruby_engine]
-    parts << RbConfig::CONFIG["ruby_version"] unless RbConfig::CONFIG["ruby_version"].empty?
+    ruby_version_dir_name = RbConfig::CONFIG["ruby_version_dir_name"] || RbConfig::CONFIG["ruby_version"]
+    parts << ruby_version_dir_name unless ruby_version_dir_name.empty?
     File.join parts
   end
 
@@ -265,7 +266,7 @@ module Gem
     return nil unless RbConfig::CONFIG.key? "vendordir"
 
     File.join RbConfig::CONFIG["vendordir"], "gems",
-              RbConfig::CONFIG["ruby_version"]
+              RbConfig::CONFIG["ruby_version_dir_name"] || RbConfig::CONFIG["ruby_version"]
   end
 
   ##
diff -Nuarp ruby-3.3.3.a/loadpath.c ruby-3.3.3.b/loadpath.c
--- ruby-3.3.3.a/loadpath.c	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/loadpath.c	2024-07-15 21:17:26.153919501 -0400
@@ -65,22 +65,38 @@ const char ruby_initial_load_paths[] =
     RUBY_SEARCH_PATH "\0"
 #endif
 #ifndef NO_RUBY_SITE_LIB
+#ifdef RUBY_LIB_VERSION_BLANK
+    RUBY_SITE_LIB "\0"
+#else
     RUBY_SITE_LIB2 "\0"
+#endif
 #ifdef RUBY_THINARCH
     RUBY_SITE_ARCH_LIB_FOR(RUBY_THINARCH) "\0"
 #endif
     RUBY_SITE_ARCH_LIB_FOR(RUBY_SITEARCH) "\0"
+#ifndef RUBY_LIB_VERSION_BLANK
     RUBY_SITE_LIB "\0"
 #endif
+#endif
 
 #ifndef NO_RUBY_VENDOR_LIB
+#ifdef RUBY_LIB_VERSION_BLANK
+    RUBY_VENDOR_LIB "\0"
+#else
     RUBY_VENDOR_LIB2 "\0"
+#endif
 #ifdef RUBY_THINARCH
     RUBY_VENDOR_ARCH_LIB_FOR(RUBY_THINARCH) "\0"
 #endif
     RUBY_VENDOR_ARCH_LIB_FOR(RUBY_SITEARCH) "\0"
+#ifndef RUBY_LIB_VERSION_BLANK
     RUBY_VENDOR_LIB "\0"
 #endif
+#endif
+
+#ifdef RUBYGEMS_DIR
+    RUBYGEMS_DIR "\0"
+#endif
 
     RUBY_LIB "\0"
 #ifdef RUBY_THINARCH
diff -Nuarp ruby-3.3.3.a/miniprelude.c ruby-3.3.3.b/miniprelude.c
--- ruby-3.3.3.a/miniprelude.c	2024-06-11 19:54:26.000000000 -0400
+++ ruby-3.3.3.b/miniprelude.c	2024-07-15 21:17:49.187096538 -0400
@@ -335,12 +335,12 @@ static const struct {
 ""/* Some examples on this page use this simple file tree: */
 ""/*  */
 ""/*   example/ */
-""/*   \xE2\x94\x9C\xE2\x94\x80\xE2\x94\x80 config.h */
-""/*   \xE2\x94\x9C\xE2\x94\x80\xE2\x94\x80 lib/ */
-""/*   \xE2\x94\x82   \xE2\x94\x9C\xE2\x94\x80\xE2\x94\x80 song/ */
-""/*   \xE2\x94\x82   \xE2\x94\x82   \xE2\x94\x94\xE2\x94\x80\xE2\x94\x80 karaoke.rb */
-""/*   \xE2\x94\x82   \xE2\x94\x94\xE2\x94\x80\xE2\x94\x80 song.rb */
-""/*   \xE2\x94\x94\xE2\x94\x80\xE2\x94\x80 main.rb */
+""/*   \u251C\u2500\u2500 config.h */
+""/*   \u251C\u2500\u2500 lib/ */
+""/*   \u2502   \u251C\u2500\u2500 song/ */
+""/*   \u2502   \u2502   \u2514\u2500\u2500 karaoke.rb */
+""/*   \u2502   \u2514\u2500\u2500 song.rb */
+""/*   \u2514\u2500\u2500 main.rb */
 ""/*  */
 ""/* Others use the file tree for the */
 ""/* {Ruby project itself}[https://github.com/ruby/ruby]. */
@@ -832,8 +832,9 @@ static const struct {
     char L0[498]; /* 1..76 */
     char L76[507]; /* 77..253 */
     char L253[506]; /* 254..299 */
-    char L299[476]; /* 300..330 */
-    char L330[39]; /* 331..333 */
+    char L299[497]; /* 300..364 */
+    char L364[469]; /* 365..413 */
+    char L413[128]; /* 414..419 */
 } prelude_code2 = {
 #line 1 "gc.rb"
 ""/* for gc.c */
@@ -1164,19 +1165,107 @@ static const struct {
 "      ULL2NUM(rb_objspace.profile.marking_time_ns + rb_objspace.profile.sweeping_time_ns)\n"
 "    }\n"
 "  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.enable_stats\t  => true or false */
+"\n"/*  */
+"\n"/* Enables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already enabled. */
+"\n"/*  */
+"\n"/*    GC.enable_stats\t #=> false or true */
+"\n"/*    GC.enable_stats\t #=> true */
+"  def self.enable_stats\n"
+"    Primitive.gc_enable_stats\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.disable_stats\t   => true or false */
+"\n"/*  */
+"\n"/* Disables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already disabled. */
+"\n"/*  */
+"\n"/*    GC.disable_stats\t  #=> false or true */
+"\n"/*    GC.disable_stats\t  #=> true */
+"  def self.disable_stats\n"
+"    Primitive.gc_disable_stats\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.stats_enabled?    => true or false */
+"\n"/*  */
+"\n"/* Check whether GC stats have been enabled. */
+"\n"/*  */
+"\n"/*    GC.stats_enabled?   #=> false or true */
+"  def self.stats_enabled?\n"
+"    Primitive.gc_stats_enabled\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.time\t  => Integer */
+"\n"/*  */
+"\n"/* Returns the time spent during garbage collection while GC statistics collection */
+"\n"/* was enabled (in micro seconds). */
+"\n"/*  */
+"\n"/*    GC.time\t  #=> 20000 */
+,
+#line 365 "gc.rb"
+"  def self.time\n"
+"    Primitive.gc_time\n"
+"  end\n"
+"\n"
+"\n"/*  call-seq: */
+"\n"/* GC.heap_slots\t=> Integer */
+"\n"/*  */
+"\n"/*  Returns the number of heap slots available for object allocations. */
+"\n"/*  */
+"\n"/* GC.heap_slots\t#=> 10000 */
+"  def self.heap_slots\n"
+"    Primitive.gc_heap_slots\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.heap_slots_live_after_last_gc\t   => Integer */
+"\n"/*  */
+"\n"/* Returns the number of heap slots which were live after the last garbage collection. */
+"\n"/*  */
+"\n"/*    GC.heap_slots_live_after_last_gc\t   #=> 231223 */
+"  def self.heap_slots_live_after_last_gc\n"
+"    Primitive.gc_heap_slots_live_after_last_gc\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_mallocs\t   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number malloc calls. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_mallocs\t   #=> 324234323246 */
+"  def self.total_mallocs\n"
+"    Primitive.gc_total_mallocs\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_malloced_bytes\t   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number of bytes allocated. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_malloced_bytes\t   #=> 354656256432446 */
+"  def self.total_malloced_bytes\n"
+"    Primitive.gc_total_malloced_bytes\n"
+"  end\n"
+"\n"
 "end\n"
 "\n"
 "module ObjectSpace\n"
 "\n"/* Alias of GC.start */
 "  def garbage_collect full_mark: true, immediate_mark: true, immediate_sweep: true\n"
+,
+#line 414 "gc.rb"
 "    Primitive.gc_start_internal full_mark, immediate_mark, immediate_sweep, false\n"
 "  end\n"
 "\n"
-,
-#line 331 "gc.rb"
 "  module_function :garbage_collect\n"
 "end\n"
-#line 1180 "miniprelude.c"
+#line 1269 "miniprelude.c"
 };
 
 static const char prelude_name3[] = "<internal:numeric>";
@@ -1568,7 +1657,7 @@ static const struct {
 "  end\n"
 "\n"
 "end\n"
-#line 1572 "miniprelude.c"
+#line 1661 "miniprelude.c"
 };
 
 static const char prelude_name4[] = "<internal:io>";
@@ -1712,7 +1801,7 @@ static const struct {
 "    Primitive.io_readline(sep, limit, chomp)\n"
 "  end\n"
 "end\n"
-#line 1716 "miniprelude.c"
+#line 1805 "miniprelude.c"
 };
 
 static const char prelude_name5[] = "<internal:marshal>";
@@ -1760,7 +1849,7 @@ static const struct {
 "    alias restore load\n"
 "  end\n"
 "end\n"
-#line 1764 "miniprelude.c"
+#line 1853 "miniprelude.c"
 };
 
 static const char prelude_name6[] = "<internal:rjit>";
@@ -1812,7 +1901,7 @@ static const struct {
 "  require 'ruby_vm/rjit/hooks'\n"
 "  require 'ruby_vm/rjit/stats'\n"
 "end\n"
-#line 1816 "miniprelude.c"
+#line 1905 "miniprelude.c"
 };
 
 static const char prelude_name7[] = "<internal:rjit_c>";
@@ -4118,7 +4207,7 @@ static const struct {
 "\n"
 "\n"/* # RJIT bindgen end ### */
 "end if Primitive.rjit_enabled_p\n"
-#line 4122 "miniprelude.c"
+#line 4211 "miniprelude.c"
 };
 
 static const char prelude_name8[] = "<internal:pack>";
@@ -4157,7 +4246,7 @@ static const struct {
 "    Primitive.pack_unpack1(fmt, offset)\n"
 "  end\n"
 "end\n"
-#line 4161 "miniprelude.c"
+#line 4250 "miniprelude.c"
 };
 
 static const char prelude_name9[] = "<internal:trace_point>";
@@ -4592,7 +4681,7 @@ static const struct {
 "    Primitive.tracepoint_attr_instruction_sequence\n"
 "  end\n"
 "end\n"
-#line 4596 "miniprelude.c"
+#line 4685 "miniprelude.c"
 };
 
 static const char prelude_name10[] = "<internal:warning>";
@@ -4653,7 +4742,7 @@ static const struct {
 "    Primitive.rb_warn_m(msgs, uplevel, category)\n"
 "  end\n"
 "end\n"
-#line 4657 "miniprelude.c"
+#line 4746 "miniprelude.c"
 };
 
 static const char prelude_name11[] = "<internal:array>";
@@ -4824,7 +4913,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 4828 "miniprelude.c"
+#line 4917 "miniprelude.c"
 };
 
 static const char prelude_name12[] = "<internal:kernel>";
@@ -5150,7 +5239,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 5154 "miniprelude.c"
+#line 5243 "miniprelude.c"
 };
 
 static const char prelude_name13[] = "<internal:ractor>";
@@ -6032,7 +6121,7 @@ static const struct {
 "    }\n"
 "  end\n"
 "end\n"
-#line 6036 "miniprelude.c"
+#line 6125 "miniprelude.c"
 };
 
 static const char prelude_name14[] = "<internal:symbol>";
@@ -6053,7 +6142,7 @@ static const struct {
 "\n"
 "  alias intern to_sym\n"
 "end\n"
-#line 6057 "miniprelude.c"
+#line 6146 "miniprelude.c"
 };
 
 static const char prelude_name15[] = "<internal:timev>";
@@ -6482,7 +6571,7 @@ static const struct {
 "    Primitive.time_init_args(year, mon, mday, hour, min, sec, zone)\n"
 "  end\n"
 "end\n"
-#line 6486 "miniprelude.c"
+#line 6575 "miniprelude.c"
 };
 
 static const char prelude_name16[] = "<internal:thread_sync>";
@@ -6561,7 +6650,7 @@ static const struct {
 "    alias_method :<<, :push\n"
 "  end\n"
 "end\n"
-#line 6565 "miniprelude.c"
+#line 6654 "miniprelude.c"
 };
 
 static const char prelude_name17[] = "<internal:nilclass>";
@@ -6594,7 +6683,7 @@ static const struct {
 "    return 0.0\n"
 "  end\n"
 "end\n"
-#line 6598 "miniprelude.c"
+#line 6687 "miniprelude.c"
 };
 
 static const char prelude_name18[] = "<internal:prelude>";
@@ -6633,7 +6722,7 @@ static const struct {
 "    klass.new(self, *args, &block)\n"
 "  end unless instance_methods.include?(:to_set)\n"/* RJIT could already load this from builtin prelude */
 "end\n"
-#line 6637 "miniprelude.c"
+#line 6726 "miniprelude.c"
 };
 
 static const char prelude_name19[] = "<internal:gem_prelude>";
@@ -6672,7 +6761,7 @@ static const struct {
 "  warn \"`syntax_suggest' was not loaded.\"\n"
 "end if defined?(SyntaxSuggest)\n"
 "\n"
-#line 6676 "miniprelude.c"
+#line 6765 "miniprelude.c"
 };
 
 static const char prelude_name20[] = "<internal:yjit>";
@@ -7277,7 +7366,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 7281 "miniprelude.c"
+#line 7370 "miniprelude.c"
 };
 
 COMPILER_WARNING_POP
diff -Nuarp ruby-3.3.3.a/ruby.c ruby-3.3.3.b/ruby.c
--- ruby-3.3.3.a/ruby.c	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/ruby.c	2024-07-15 21:17:29.937784306 -0400
@@ -1722,10 +1722,14 @@ proc_options(long argc, char **argv, rub
 
 void Init_builtin_features(void);
 
+/* abrt.c */
+void Init_abrt(void);
+
 static void
 ruby_init_prelude(void)
 {
     Init_builtin_features();
+    Init_abrt();
     rb_const_remove(rb_cObject, rb_intern_const("TMP_RUBY_PREFIX"));
 }
 
diff -Nuarp ruby-3.3.3.a/ruby.c.orig ruby-3.3.3.b/ruby.c.orig
--- ruby-3.3.3.a/ruby.c.orig	1969-12-31 19:00:00.000000000 -0500
+++ ruby-3.3.3.b/ruby.c.orig	2024-07-15 21:16:22.611189853 -0400
@@ -0,0 +1,3067 @@
+/**********************************************************************
+
+  ruby.c -
+
+  $Author$
+  created at: Tue Aug 10 12:47:31 JST 1993
+
+  Copyright (C) 1993-2007 Yukihiro Matsumoto
+  Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
+  Copyright (C) 2000  Information-technology Promotion Agency, Japan
+
+**********************************************************************/
+
+#include "ruby/internal/config.h"
+
+#include <ctype.h>
+#include <stdio.h>
+#include <sys/types.h>
+
+#ifdef __CYGWIN__
+# include <windows.h>
+# include <sys/cygwin.h>
+#endif
+
+#if defined(LOAD_RELATIVE) && defined(HAVE_DLADDR)
+# include <dlfcn.h>
+#endif
+
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+
+#if defined(HAVE_FCNTL_H)
+# include <fcntl.h>
+#elif defined(HAVE_SYS_FCNTL_H)
+# include <sys/fcntl.h>
+#endif
+
+#ifdef HAVE_SYS_PARAM_H
+# include <sys/param.h>
+#endif
+
+#include "dln.h"
+#include "eval_intern.h"
+#include "internal.h"
+#include "internal/cmdlineopt.h"
+#include "internal/cont.h"
+#include "internal/error.h"
+#include "internal/file.h"
+#include "internal/inits.h"
+#include "internal/io.h"
+#include "internal/load.h"
+#include "internal/loadpath.h"
+#include "internal/missing.h"
+#include "internal/object.h"
+#include "internal/thread.h"
+#include "internal/ruby_parser.h"
+#include "internal/variable.h"
+#include "ruby/encoding.h"
+#include "ruby/thread.h"
+#include "ruby/util.h"
+#include "ruby/version.h"
+#include "ruby/internal/error.h"
+
+#define singlebit_only_p(x) !((x) & ((x)-1))
+STATIC_ASSERT(Qnil_1bit_from_Qfalse, singlebit_only_p(Qnil^Qfalse));
+STATIC_ASSERT(Qundef_1bit_from_Qnil, singlebit_only_p(Qundef^Qnil));
+
+#ifndef MAXPATHLEN
+# define MAXPATHLEN 1024
+#endif
+#ifndef O_ACCMODE
+# define O_ACCMODE (O_RDONLY | O_WRONLY | O_RDWR)
+#endif
+
+void Init_ruby_description(ruby_cmdline_options_t *opt);
+
+#ifndef HAVE_STDLIB_H
+char *getenv();
+#endif
+
+#ifndef DISABLE_RUBYGEMS
+# define DISABLE_RUBYGEMS 0
+#endif
+#if DISABLE_RUBYGEMS
+#define DEFAULT_RUBYGEMS_ENABLED "disabled"
+#else
+#define DEFAULT_RUBYGEMS_ENABLED "enabled"
+#endif
+
+void rb_warning_category_update(unsigned int mask, unsigned int bits);
+
+#define COMMA ,
+#define FEATURE_BIT(bit) (1U << feature_##bit)
+#define EACH_FEATURES(X, SEP) \
+    X(gems) \
+    SEP \
+    X(error_highlight) \
+    SEP \
+    X(did_you_mean) \
+    SEP \
+    X(syntax_suggest) \
+    SEP \
+    X(rubyopt) \
+    SEP \
+    X(frozen_string_literal) \
+    SEP \
+    X(rjit) \
+    SEP \
+    X(yjit) \
+    /* END OF FEATURES */
+#define EACH_DEBUG_FEATURES(X, SEP) \
+    X(frozen_string_literal) \
+    /* END OF DEBUG FEATURES */
+#define AMBIGUOUS_FEATURE_NAMES 0 /* no ambiguous feature names now */
+#define DEFINE_FEATURE(bit) feature_##bit
+#define DEFINE_DEBUG_FEATURE(bit) feature_debug_##bit
+enum feature_flag_bits {
+    EACH_FEATURES(DEFINE_FEATURE, COMMA),
+    feature_debug_flag_first,
+#if defined(RJIT_FORCE_ENABLE) || !USE_YJIT
+    DEFINE_FEATURE(jit) = feature_rjit,
+#else
+    DEFINE_FEATURE(jit) = feature_yjit,
+#endif
+    feature_jit_mask = FEATURE_BIT(rjit) | FEATURE_BIT(yjit),
+
+    feature_debug_flag_begin = feature_debug_flag_first - 1,
+    EACH_DEBUG_FEATURES(DEFINE_DEBUG_FEATURE, COMMA),
+    feature_flag_count
+};
+
+#define MULTI_BITS_P(bits) ((bits) & ((bits) - 1))
+
+#define DEBUG_BIT(bit) (1U << feature_debug_##bit)
+
+#define DUMP_BIT(bit) (1U << dump_##bit)
+#define DEFINE_DUMP(bit) dump_##bit
+#define EACH_DUMPS(X, SEP) \
+    X(version) \
+    SEP \
+    X(copyright) \
+    SEP \
+    X(usage) \
+    SEP \
+    X(help) \
+    SEP \
+    X(yydebug) \
+    SEP \
+    X(syntax) \
+    SEP \
+    X(parsetree) \
+    SEP \
+    X(parsetree_with_comment) \
+    SEP \
+    X(insns) \
+    SEP \
+    X(insns_without_opt) \
+    /* END OF DUMPS */
+enum dump_flag_bits {
+    dump_version_v,
+    dump_error_tolerant,
+    EACH_DUMPS(DEFINE_DUMP, COMMA),
+    dump_error_tolerant_bits = (DUMP_BIT(yydebug) |
+                                DUMP_BIT(parsetree) |
+                                DUMP_BIT(parsetree_with_comment)),
+    dump_exit_bits = (DUMP_BIT(yydebug) | DUMP_BIT(syntax) |
+                      DUMP_BIT(parsetree) | DUMP_BIT(parsetree_with_comment) |
+                      DUMP_BIT(insns) | DUMP_BIT(insns_without_opt))
+};
+
+static inline void
+rb_feature_set_to(ruby_features_t *feat, unsigned int bit_mask, unsigned int bit_set)
+{
+    feat->mask |= bit_mask;
+    feat->set = (feat->set & ~bit_mask) | bit_set;
+}
+
+#define FEATURE_SET_TO(feat, bit_mask, bit_set) \
+    rb_feature_set_to(&(feat), bit_mask, bit_set)
+#define FEATURE_SET(feat, bits) FEATURE_SET_TO(feat, bits, bits)
+#define FEATURE_SET_RESTORE(feat, save) FEATURE_SET_TO(feat, (save).mask, (save).set & (save).mask)
+#define FEATURE_SET_P(feat, bits) ((feat).set & FEATURE_BIT(bits))
+#define FEATURE_USED_P(feat, bits) ((feat).mask & FEATURE_BIT(bits))
+#define FEATURE_SET_BITS(feat) ((feat).set & (feat).mask)
+
+static void init_ids(ruby_cmdline_options_t *);
+
+#define src_encoding_index GET_VM()->src_encoding_index
+
+enum {
+    COMPILATION_FEATURES = (
+        0
+        | FEATURE_BIT(frozen_string_literal)
+        | FEATURE_BIT(debug_frozen_string_literal)
+        ),
+    DEFAULT_FEATURES = (
+        (FEATURE_BIT(debug_flag_first)-1)
+#if DISABLE_RUBYGEMS
+        & ~FEATURE_BIT(gems)
+#endif
+        & ~FEATURE_BIT(frozen_string_literal)
+        & ~feature_jit_mask
+        )
+};
+
+#define BACKTRACE_LENGTH_LIMIT_VALID_P(n) ((n) >= -1)
+#define OPT_BACKTRACE_LENGTH_LIMIT_VALID_P(opt) \
+    BACKTRACE_LENGTH_LIMIT_VALID_P((opt)->backtrace_length_limit)
+
+static ruby_cmdline_options_t *
+cmdline_options_init(ruby_cmdline_options_t *opt)
+{
+    MEMZERO(opt, *opt, 1);
+    init_ids(opt);
+    opt->src.enc.index = src_encoding_index;
+    opt->ext.enc.index = -1;
+    opt->intern.enc.index = -1;
+    opt->features.set = DEFAULT_FEATURES;
+#ifdef RJIT_FORCE_ENABLE /* to use with: ./configure cppflags="-DRJIT_FORCE_ENABLE" */
+    opt->features.set |= FEATURE_BIT(rjit);
+#elif defined(YJIT_FORCE_ENABLE)
+    opt->features.set |= FEATURE_BIT(yjit);
+#endif
+    opt->backtrace_length_limit = LONG_MIN;
+
+    return opt;
+}
+
+static rb_ast_t *load_file(VALUE parser, VALUE fname, VALUE f, int script,
+                       ruby_cmdline_options_t *opt);
+static VALUE open_load_file(VALUE fname_v, int *xflag);
+static void forbid_setid(const char *, const ruby_cmdline_options_t *);
+#define forbid_setid(s) forbid_setid((s), opt)
+
+static struct {
+    int argc;
+    char **argv;
+} origarg;
+
+static const char esc_standout[] = "\n\033[1;7m";
+static const char esc_bold[] = "\033[1m";
+static const char esc_reset[] = "\033[0m";
+static const char esc_none[] = "";
+#define USAGE_INDENT "  "       /* macro for concatenation */
+
+static void
+show_usage_part(const char *str, const unsigned int namelen,
+                const char *str2, const unsigned int secondlen,
+                const char *desc,
+                int help, int highlight, unsigned int w, int columns)
+{
+    static const int indent_width = (int)rb_strlen_lit(USAGE_INDENT);
+    const char *sb = highlight ? esc_bold : esc_none;
+    const char *se = highlight ? esc_reset : esc_none;
+    unsigned int desclen = (unsigned int)strcspn(desc, "\n");
+    if (help && (namelen + 1 > w) && /* a padding space */
+        (int)(namelen + secondlen + indent_width) >= columns) {
+        printf(USAGE_INDENT "%s" "%.*s" "%s\n", sb, namelen, str, se);
+        if (secondlen > 0) {
+            const int second_end = secondlen;
+            int n = 0;
+            if (str2[n] == ',') n++;
+            if (str2[n] == ' ') n++;
+            printf(USAGE_INDENT "%s" "%.*s" "%s\n", sb, second_end-n, str2+n, se);
+        }
+        printf("%-*s%.*s\n", w + indent_width, USAGE_INDENT, desclen, desc);
+    }
+    else {
+        const int wrap = help && namelen + secondlen >= w;
+        printf(USAGE_INDENT "%s%.*s%-*.*s%s%-*s%.*s\n", sb, namelen, str,
+               (wrap ? 0 : w - namelen),
+               (help ? secondlen : 0), str2, se,
+               (wrap ? (int)(w + rb_strlen_lit("\n" USAGE_INDENT)) : 0),
+               (wrap ? "\n" USAGE_INDENT : ""),
+               desclen, desc);
+    }
+    if (help) {
+        while (desc[desclen]) {
+            desc += desclen + rb_strlen_lit("\n");
+            desclen = (unsigned int)strcspn(desc, "\n");
+            printf("%-*s%.*s\n", w + indent_width, USAGE_INDENT, desclen, desc);
+        }
+    }
+}
+
+static void
+show_usage_line(const struct ruby_opt_message *m,
+                int help, int highlight, unsigned int w, int columns)
+{
+    const char *str = m->str;
+    const unsigned int namelen = m->namelen, secondlen = m->secondlen;
+    const char *desc = str + namelen + secondlen;
+    show_usage_part(str, namelen - 1, str + namelen, secondlen - 1, desc,
+                    help, highlight, w, columns);
+}
+
+void
+ruby_show_usage_line(const char *name, const char *secondary, const char *description,
+                     int help, int highlight, unsigned int width, int columns)
+{
+    unsigned int namelen = (unsigned int)strlen(name);
+    unsigned int secondlen = (secondary ? (unsigned int)strlen(secondary) : 0);
+    show_usage_part(name, namelen, secondary, secondlen,
+                    description, help, highlight, width, columns);
+}
+
+static void
+usage(const char *name, int help, int highlight, int columns)
+{
+#define M(shortopt, longopt, desc) RUBY_OPT_MESSAGE(shortopt, longopt, desc)
+
+#if USE_YJIT
+# define PLATFORM_JIT_OPTION "--yjit"
+#else
+# define PLATFORM_JIT_OPTION "--rjit (experimental)"
+#endif
+
+    /* This message really ought to be max 23 lines.
+     * Removed -h because the user already knows that option. Others? */
+    static const struct ruby_opt_message usage_msg[] = {
+        M("-0[octal]",	   "",			   "specify record separator (\\0, if no argument)\n"
+            "(-00 for paragraph mode, -0777 for slurp mode)"),
+        M("-a",		   "",			   "autosplit mode with -n or -p (splits $_ into $F)"),
+        M("-c",		   "",			   "check syntax only"),
+        M("-Cdirectory",   "",			   "cd to directory before executing your script"),
+        M("-d",		   ", --debug",		   "set debugging flags (set $DEBUG to true)"),
+        M("-e 'command'",  "",			   "one line of script. Several -e's allowed. Omit [programfile]"),
+        M("-Eex[:in]",     ", --encoding=ex[:in]", "specify the default external and internal character encodings"),
+        M("-Fpattern",	   "",			   "split() pattern for autosplit (-a)"),
+        M("-i[extension]", "",			   "edit ARGV files in place (make backup if extension supplied)"),
+        M("-Idirectory",   "",			   "specify $LOAD_PATH directory (may be used more than once)"),
+        M("-l",		   "",			   "enable line ending processing"),
+        M("-n",		   "",			   "assume 'while gets(); ... end' loop around your script"),
+        M("-p",		   "",			   "assume loop like -n but print line also like sed"),
+        M("-rlibrary",	   "",			   "require the library before executing your script"),
+        M("-s",		   "",			   "enable some switch parsing for switches after script name"),
+        M("-S",		   "",			   "look for the script using PATH environment variable"),
+        M("-v",		   "",			   "print the version number, then turn on verbose mode"),
+        M("-w",		   "",			   "turn warnings on for your script"),
+        M("-W[level=2|:category]",   "",	   "set warning level; 0=silence, 1=medium, 2=verbose"),
+        M("-x[directory]", "",			   "strip off text before #!ruby line and perhaps cd to directory"),
+        M("--jit",         "",                     "enable JIT for the platform, same as " PLATFORM_JIT_OPTION),
+#if USE_YJIT
+        M("--yjit",        "",                     "enable in-process JIT compiler"),
+#endif
+#if USE_RJIT
+        M("--rjit",        "",                     "enable pure-Ruby JIT compiler (experimental)"),
+#endif
+        M("-h",		   "",			   "show this message, --help for more info"),
+    };
+    STATIC_ASSERT(usage_msg_size, numberof(usage_msg) < 25);
+
+    static const struct ruby_opt_message help_msg[] = {
+        M("--copyright",                            "", "print the copyright"),
+        M("--dump={insns|parsetree|...}[,...]",     "",
+          "dump debug information. see below for available dump list"),
+        M("--enable={jit|rubyopt|...}[,...]", ", --disable={jit|rubyopt|...}[,...]",
+          "enable or disable features. see below for available features"),
+        M("--external-encoding=encoding",           ", --internal-encoding=encoding",
+          "specify the default external or internal character encoding"),
+        M("--parser={parse.y|prism}",           ", --parser=prism",
+          "the parser used to parse Ruby code (experimental)"),
+        M("--backtrace-limit=num",                  "", "limit the maximum length of backtrace"),
+        M("--verbose",                              "", "turn on verbose mode and disable script from stdin"),
+        M("--version",                              "", "print the version number, then exit"),
+        M("--crash-report=TEMPLATE",                "", "template of crash report files"),
+        M("-y",                          ", --yydebug", "print log of parser. Backward compatibility is not guaranteed"),
+        M("--help",			            "", "show this message, -h for short message"),
+    };
+    static const struct ruby_opt_message dumps[] = {
+        M("insns",                  "", "instruction sequences"),
+        M("insns_without_opt",      "", "instruction sequences compiled with no optimization"),
+        M("yydebug(+error-tolerant)", "", "yydebug of yacc parser generator"),
+        M("parsetree(+error-tolerant)","", "AST"),
+        M("parsetree_with_comment(+error-tolerant)", "", "AST with comments"),
+        M("prism_parsetree", "", "Prism AST with comments"),
+    };
+    static const struct ruby_opt_message features[] = {
+        M("gems",    "",        "rubygems (only for debugging, default: "DEFAULT_RUBYGEMS_ENABLED")"),
+        M("error_highlight", "", "error_highlight (default: "DEFAULT_RUBYGEMS_ENABLED")"),
+        M("did_you_mean", "",   "did_you_mean (default: "DEFAULT_RUBYGEMS_ENABLED")"),
+        M("syntax_suggest", "", "syntax_suggest (default: "DEFAULT_RUBYGEMS_ENABLED")"),
+        M("rubyopt", "",        "RUBYOPT environment variable (default: enabled)"),
+        M("frozen-string-literal", "", "freeze all string literals (default: disabled)"),
+#if USE_YJIT
+        M("yjit", "",           "in-process JIT compiler (default: disabled)"),
+#endif
+#if USE_RJIT
+        M("rjit", "",           "pure-Ruby JIT compiler (experimental, default: disabled)"),
+#endif
+    };
+    static const struct ruby_opt_message warn_categories[] = {
+        M("deprecated", "",       "deprecated features"),
+        M("experimental", "",     "experimental features"),
+        M("performance", "",      "performance issues"),
+    };
+#if USE_RJIT
+    extern const struct ruby_opt_message rb_rjit_option_messages[];
+#endif
+    int i;
+    const char *sb = highlight ? esc_standout+1 : esc_none;
+    const char *se = highlight ? esc_reset : esc_none;
+    const int num = numberof(usage_msg) - (help ? 1 : 0);
+    unsigned int w = (columns > 80 ? (columns - 79) / 2 : 0) + 16;
+#define SHOW(m) show_usage_line(&(m), help, highlight, w, columns)
+
+    printf("%sUsage:%s %s [switches] [--] [programfile] [arguments]\n", sb, se, name);
+    for (i = 0; i < num; ++i)
+        SHOW(usage_msg[i]);
+
+    if (!help) return;
+
+    if (highlight) sb = esc_standout;
+
+    for (i = 0; i < numberof(help_msg); ++i)
+        SHOW(help_msg[i]);
+    printf("%s""Dump List:%s\n", sb, se);
+    for (i = 0; i < numberof(dumps); ++i)
+        SHOW(dumps[i]);
+    printf("%s""Features:%s\n", sb, se);
+    for (i = 0; i < numberof(features); ++i)
+        SHOW(features[i]);
+    printf("%s""Warning categories:%s\n", sb, se);
+    for (i = 0; i < numberof(warn_categories); ++i)
+        SHOW(warn_categories[i]);
+#if USE_YJIT
+    printf("%s""YJIT options:%s\n", sb, se);
+    rb_yjit_show_usage(help, highlight, w, columns);
+#endif
+#if USE_RJIT
+    printf("%s""RJIT options (experimental):%s\n", sb, se);
+    for (i = 0; rb_rjit_option_messages[i].str; ++i)
+        SHOW(rb_rjit_option_messages[i]);
+#endif
+}
+
+#define rubylib_path_new rb_str_new
+
+static void
+push_include(const char *path, VALUE (*filter)(VALUE))
+{
+    const char sep = PATH_SEP_CHAR;
+    const char *p, *s;
+    VALUE load_path = GET_VM()->load_path;
+
+    p = path;
+    while (*p) {
+        while (*p == sep)
+            p++;
+        if (!*p) break;
+        for (s = p; *s && *s != sep; s = CharNext(s));
+        rb_ary_push(load_path, (*filter)(rubylib_path_new(p, s - p)));
+        p = s;
+    }
+}
+
+#ifdef __CYGWIN__
+static void
+push_include_cygwin(const char *path, VALUE (*filter)(VALUE))
+{
+    const char *p, *s;
+    char rubylib[FILENAME_MAX];
+    VALUE buf = 0;
+
+    p = path;
+    while (*p) {
+        unsigned int len;
+        while (*p == ';')
+            p++;
+        if (!*p) break;
+        for (s = p; *s && *s != ';'; s = CharNext(s));
+        len = s - p;
+        if (*s) {
+            if (!buf) {
+                buf = rb_str_new(p, len);
+                p = RSTRING_PTR(buf);
+            }
+            else {
+                rb_str_resize(buf, len);
+                p = strncpy(RSTRING_PTR(buf), p, len);
+            }
+        }
+#ifdef HAVE_CYGWIN_CONV_PATH
+#define CONV_TO_POSIX_PATH(p, lib) \
+        cygwin_conv_path(CCP_WIN_A_TO_POSIX|CCP_RELATIVE, (p), (lib), sizeof(lib))
+#else
+# error no cygwin_conv_path
+#endif
+        if (CONV_TO_POSIX_PATH(p, rubylib) == 0)
+            p = rubylib;
+        push_include(p, filter);
+        if (!*s) break;
+        p = s + 1;
+    }
+}
+
+#define push_include push_include_cygwin
+#endif
+
+void
+ruby_push_include(const char *path, VALUE (*filter)(VALUE))
+{
+    if (path == 0)
+        return;
+    push_include(path, filter);
+}
+
+static VALUE
+identical_path(VALUE path)
+{
+    return path;
+}
+static VALUE
+locale_path(VALUE path)
+{
+    rb_enc_associate(path, rb_locale_encoding());
+    return path;
+}
+
+void
+ruby_incpush(const char *path)
+{
+    ruby_push_include(path, locale_path);
+}
+
+static VALUE
+expand_include_path(VALUE path)
+{
+    char *p = RSTRING_PTR(path);
+    if (!p)
+        return path;
+    if (*p == '.' && p[1] == '/')
+        return path;
+    return rb_file_expand_path(path, Qnil);
+}
+
+void
+ruby_incpush_expand(const char *path)
+{
+    ruby_push_include(path, expand_include_path);
+}
+
+#undef UTF8_PATH
+#if defined _WIN32 || defined __CYGWIN__
+static HMODULE libruby;
+
+BOOL WINAPI
+DllMain(HINSTANCE dll, DWORD reason, LPVOID reserved)
+{
+    if (reason == DLL_PROCESS_ATTACH)
+        libruby = dll;
+    return TRUE;
+}
+
+HANDLE
+rb_libruby_handle(void)
+{
+    return libruby;
+}
+
+static inline void
+translit_char_bin(char *p, int from, int to)
+{
+    while (*p) {
+        if ((unsigned char)*p == from)
+            *p = to;
+        p++;
+    }
+}
+#endif
+
+#ifdef _WIN32
+# define UTF8_PATH 1
+#endif
+
+#ifndef UTF8_PATH
+# define UTF8_PATH 0
+#endif
+#if UTF8_PATH
+# define IF_UTF8_PATH(t, f) t
+#else
+# define IF_UTF8_PATH(t, f) f
+#endif
+
+#if UTF8_PATH
+static VALUE
+str_conv_enc(VALUE str, rb_encoding *from, rb_encoding *to)
+{
+    return rb_str_conv_enc_opts(str, from, to,
+                                ECONV_UNDEF_REPLACE|ECONV_INVALID_REPLACE,
+                                Qnil);
+}
+#else
+# define str_conv_enc(str, from, to) (str)
+#endif
+
+void ruby_init_loadpath(void);
+
+#if defined(LOAD_RELATIVE)
+static VALUE
+runtime_libruby_path(void)
+{
+#if defined _WIN32 || defined __CYGWIN__
+    DWORD ret;
+    DWORD len = 32;
+    VALUE path;
+    VALUE wsopath = rb_str_new(0, len*sizeof(WCHAR));
+    WCHAR *wlibpath;
+    char *libpath;
+
+    while (wlibpath = (WCHAR *)RSTRING_PTR(wsopath),
+           ret = GetModuleFileNameW(libruby, wlibpath, len),
+           (ret == len))
+    {
+        rb_str_modify_expand(wsopath, len*sizeof(WCHAR));
+        rb_str_set_len(wsopath, (len += len)*sizeof(WCHAR));
+    }
+    if (!ret || ret > len) rb_fatal("failed to get module file name");
+#if defined __CYGWIN__
+    {
+        const int win_to_posix = CCP_WIN_W_TO_POSIX | CCP_RELATIVE;
+        size_t newsize = cygwin_conv_path(win_to_posix, wlibpath, 0, 0);
+        if (!newsize) rb_fatal("failed to convert module path to cygwin");
+        path = rb_str_new(0, newsize);
+        libpath = RSTRING_PTR(path);
+        if (cygwin_conv_path(win_to_posix, wlibpath, libpath, newsize)) {
+            rb_str_resize(path, 0);
+        }
+    }
+#else
+    {
+        DWORD i;
+        for (len = ret, i = 0; i < len; ++i) {
+            if (wlibpath[i] == L'\\') {
+                wlibpath[i] = L'/';
+                ret = i+1;	/* chop after the last separator */
+            }
+        }
+    }
+    len = WideCharToMultiByte(CP_UTF8, 0, wlibpath, ret, NULL, 0, NULL, NULL);
+    path = rb_utf8_str_new(0, len);
+    libpath = RSTRING_PTR(path);
+    WideCharToMultiByte(CP_UTF8, 0, wlibpath, ret, libpath, len, NULL, NULL);
+#endif
+    rb_str_resize(wsopath, 0);
+    return path;
+#elif defined(HAVE_DLADDR)
+    Dl_info dli;
+    VALUE fname, path;
+    const void* addr = (void *)(VALUE)expand_include_path;
+
+    if (!dladdr((void *)addr, &dli)) {
+        return rb_str_new(0, 0);
+    }
+#ifdef __linux__
+    else if (origarg.argc > 0 && origarg.argv && dli.dli_fname == origarg.argv[0]) {
+        fname = rb_str_new_cstr("/proc/self/exe");
+        path = rb_readlink(fname, NULL);
+    }
+#endif
+    else {
+        fname = rb_str_new_cstr(dli.dli_fname);
+        path = rb_realpath_internal(Qnil, fname, 1);
+    }
+    rb_str_resize(fname, 0);
+    return path;
+#else
+# error relative load path is not supported on this platform.
+#endif
+}
+#endif
+
+#define INITIAL_LOAD_PATH_MARK rb_intern_const("@gem_prelude_index")
+
+VALUE ruby_archlibdir_path, ruby_prefix_path;
+
+void
+ruby_init_loadpath(void)
+{
+    VALUE load_path, archlibdir = 0;
+    ID id_initial_load_path_mark;
+    const char *paths = ruby_initial_load_paths;
+
+#if defined LOAD_RELATIVE
+#if !defined ENABLE_MULTIARCH
+# define RUBY_ARCH_PATH ""
+#elif defined RUBY_ARCH
+# define RUBY_ARCH_PATH "/"RUBY_ARCH
+#else
+# define RUBY_ARCH_PATH "/"RUBY_PLATFORM
+#endif
+    char *libpath;
+    VALUE sopath;
+    size_t baselen;
+    const char *p;
+
+    sopath = runtime_libruby_path();
+    libpath = RSTRING_PTR(sopath);
+
+    p = strrchr(libpath, '/');
+    if (p) {
+        static const char libdir[] = "/"
+#ifdef LIBDIR_BASENAME
+            LIBDIR_BASENAME
+#else
+            "lib"
+#endif
+            RUBY_ARCH_PATH;
+        const ptrdiff_t libdir_len = (ptrdiff_t)sizeof(libdir)
+            - rb_strlen_lit(RUBY_ARCH_PATH) - 1;
+        static const char bindir[] = "/bin";
+        const ptrdiff_t bindir_len = (ptrdiff_t)sizeof(bindir) - 1;
+
+        const char *p2 = NULL;
+
+#ifdef ENABLE_MULTIARCH
+      multiarch:
+#endif
+        if (p - libpath >= bindir_len && !STRNCASECMP(p - bindir_len, bindir, bindir_len)) {
+            p -= bindir_len;
+            archlibdir = rb_str_subseq(sopath, 0, p - libpath);
+            rb_str_cat_cstr(archlibdir, libdir);
+            OBJ_FREEZE_RAW(archlibdir);
+        }
+        else if (p - libpath >= libdir_len && !strncmp(p - libdir_len, libdir, libdir_len)) {
+            archlibdir = rb_str_subseq(sopath, 0, (p2 ? p2 : p) - libpath);
+            OBJ_FREEZE_RAW(archlibdir);
+            p -= libdir_len;
+        }
+#ifdef ENABLE_MULTIARCH
+        else if (p2) {
+            p = p2;
+        }
+        else {
+            p2 = p;
+            p = rb_enc_path_last_separator(libpath, p, rb_ascii8bit_encoding());
+            if (p) goto multiarch;
+            p = p2;
+        }
+#endif
+        baselen = p - libpath;
+    }
+    else {
+        baselen = 0;
+    }
+    rb_str_resize(sopath, baselen);
+    libpath = RSTRING_PTR(sopath);
+#define PREFIX_PATH() sopath
+#define BASEPATH() rb_str_buf_cat(rb_str_buf_new(baselen+len), libpath, baselen)
+#define RUBY_RELATIVE(path, len) rb_str_buf_cat(BASEPATH(), (path), (len))
+#else
+    const size_t exec_prefix_len = strlen(ruby_exec_prefix);
+#define RUBY_RELATIVE(path, len) rubylib_path_new((path), (len))
+#define PREFIX_PATH() RUBY_RELATIVE(ruby_exec_prefix, exec_prefix_len)
+#endif
+    rb_gc_register_address(&ruby_prefix_path);
+    ruby_prefix_path = PREFIX_PATH();
+    OBJ_FREEZE_RAW(ruby_prefix_path);
+    if (!archlibdir) archlibdir = ruby_prefix_path;
+    rb_gc_register_address(&ruby_archlibdir_path);
+    ruby_archlibdir_path = archlibdir;
+
+    load_path = GET_VM()->load_path;
+
+    ruby_push_include(getenv("RUBYLIB"), identical_path);
+
+    id_initial_load_path_mark = INITIAL_LOAD_PATH_MARK;
+    while (*paths) {
+        size_t len = strlen(paths);
+        VALUE path = RUBY_RELATIVE(paths, len);
+        rb_ivar_set(path, id_initial_load_path_mark, path);
+        rb_ary_push(load_path, path);
+        paths += len + 1;
+    }
+
+    rb_const_set(rb_cObject, rb_intern_const("TMP_RUBY_PREFIX"), ruby_prefix_path);
+}
+
+
+static void
+add_modules(VALUE *req_list, const char *mod)
+{
+    VALUE list = *req_list;
+    VALUE feature;
+
+    if (!list) {
+        *req_list = list = rb_ary_hidden_new(0);
+    }
+    feature = rb_str_cat_cstr(rb_str_tmp_new(0), mod);
+    rb_ary_push(list, feature);
+}
+
+static void
+require_libraries(VALUE *req_list)
+{
+    VALUE list = *req_list;
+    VALUE self = rb_vm_top_self();
+    ID require;
+    rb_encoding *extenc = rb_default_external_encoding();
+
+    CONST_ID(require, "require");
+    while (list && RARRAY_LEN(list) > 0) {
+        VALUE feature = rb_ary_shift(list);
+        rb_enc_associate(feature, extenc);
+        RBASIC_SET_CLASS_RAW(feature, rb_cString);
+        OBJ_FREEZE(feature);
+        rb_funcallv(self, require, 1, &feature);
+    }
+    *req_list = 0;
+}
+
+static const struct rb_block*
+toplevel_context(rb_binding_t *bind)
+{
+    return &bind->block;
+}
+
+static int
+process_sflag(int sflag)
+{
+    if (sflag > 0) {
+        long n;
+        const VALUE *args;
+        VALUE argv = rb_argv;
+
+        n = RARRAY_LEN(argv);
+        args = RARRAY_CONST_PTR(argv);
+        while (n > 0) {
+            VALUE v = *args++;
+            char *s = StringValuePtr(v);
+            char *p;
+            int hyphen = FALSE;
+
+            if (s[0] != '-')
+                break;
+            n--;
+            if (s[1] == '-' && s[2] == '\0')
+                break;
+
+            v = Qtrue;
+            /* check if valid name before replacing - with _ */
+            for (p = s + 1; *p; p++) {
+                if (*p == '=') {
+                    *p++ = '\0';
+                    v = rb_str_new2(p);
+                    break;
+                }
+                if (*p == '-') {
+                    hyphen = TRUE;
+                }
+                else if (*p != '_' && !ISALNUM(*p)) {
+                    VALUE name_error[2];
+                    name_error[0] =
+                        rb_str_new2("invalid name for global variable - ");
+                    if (!(p = strchr(p, '='))) {
+                        rb_str_cat2(name_error[0], s);
+                    }
+                    else {
+                        rb_str_cat(name_error[0], s, p - s);
+                    }
+                    name_error[1] = args[-1];
+                    rb_exc_raise(rb_class_new_instance(2, name_error, rb_eNameError));
+                }
+            }
+            s[0] = '$';
+            if (hyphen) {
+                for (p = s + 1; *p; ++p) {
+                    if (*p == '-')
+                        *p = '_';
+                }
+            }
+            rb_gv_set(s, v);
+        }
+        n = RARRAY_LEN(argv) - n;
+        while (n--) {
+            rb_ary_shift(argv);
+        }
+        return -1;
+    }
+    return sflag;
+}
+
+static long proc_options(long argc, char **argv, ruby_cmdline_options_t *opt, int envopt);
+
+static void
+moreswitches(const char *s, ruby_cmdline_options_t *opt, int envopt)
+{
+    long argc, i, len;
+    char **argv, *p;
+    const char *ap = 0;
+    VALUE argstr, argary;
+    void *ptr;
+
+    VALUE src_enc_name = opt->src.enc.name;
+    VALUE ext_enc_name = opt->ext.enc.name;
+    VALUE int_enc_name = opt->intern.enc.name;
+    ruby_features_t feat = opt->features;
+    ruby_features_t warn = opt->warn;
+    long backtrace_length_limit = opt->backtrace_length_limit;
+    const char *crash_report = opt->crash_report;
+
+    while (ISSPACE(*s)) s++;
+    if (!*s) return;
+
+    opt->src.enc.name = opt->ext.enc.name = opt->intern.enc.name = 0;
+
+    const int hyphen = *s != '-';
+    argstr = rb_str_tmp_new((len = strlen(s)) + hyphen);
+    argary = rb_str_tmp_new(0);
+
+    p = RSTRING_PTR(argstr);
+    if (hyphen) *p = '-';
+    memcpy(p + hyphen, s, len + 1);
+    ap = 0;
+    rb_str_cat(argary, (char *)&ap, sizeof(ap));
+    while (*p) {
+        ap = p;
+        rb_str_cat(argary, (char *)&ap, sizeof(ap));
+        while (*p && !ISSPACE(*p)) ++p;
+        if (!*p) break;
+        *p++ = '\0';
+        while (ISSPACE(*p)) ++p;
+    }
+    argc = RSTRING_LEN(argary) / sizeof(ap);
+    ap = 0;
+    rb_str_cat(argary, (char *)&ap, sizeof(ap));
+    argv = ptr = ALLOC_N(char *, argc);
+    MEMMOVE(argv, RSTRING_PTR(argary), char *, argc);
+
+    while ((i = proc_options(argc, argv, opt, envopt)) > 1 && envopt && (argc -= i) > 0) {
+        argv += i;
+        if (**argv != '-') {
+            *--*argv = '-';
+        }
+        if ((*argv)[1]) {
+            ++argc;
+            --argv;
+        }
+    }
+
+    if (src_enc_name) {
+        opt->src.enc.name = src_enc_name;
+    }
+    if (ext_enc_name) {
+        opt->ext.enc.name = ext_enc_name;
+    }
+    if (int_enc_name) {
+        opt->intern.enc.name = int_enc_name;
+    }
+    FEATURE_SET_RESTORE(opt->features, feat);
+    FEATURE_SET_RESTORE(opt->warn, warn);
+    if (BACKTRACE_LENGTH_LIMIT_VALID_P(backtrace_length_limit)) {
+        opt->backtrace_length_limit = backtrace_length_limit;
+    }
+    if (crash_report) {
+        opt->crash_report = crash_report;
+    }
+
+    ruby_xfree(ptr);
+    /* get rid of GC */
+    rb_str_resize(argary, 0);
+    rb_str_resize(argstr, 0);
+}
+
+static int
+name_match_p(const char *name, const char *str, size_t len)
+{
+    if (len == 0) return 0;
+    while (1) {
+        while (TOLOWER(*str) == *name) {
+            if (!--len) return 1;
+            ++name;
+            ++str;
+        }
+        if (*str != '-' && *str != '_') return 0;
+        while (ISALNUM(*name)) name++;
+        if (*name != '-' && *name != '_') return 0;
+        ++name;
+        ++str;
+        if (--len == 0) return 1;
+    }
+}
+
+#define NAME_MATCH_P(name, str, len) \
+    ((len) < (int)sizeof(name) && name_match_p((name), (str), (len)))
+
+#define UNSET_WHEN(name, bit, str, len)	\
+    if (NAME_MATCH_P((name), (str), (len))) { \
+        *(unsigned int *)arg &= ~(bit); \
+        return;				\
+    }
+
+#define SET_WHEN(name, bit, str, len)	\
+    if (NAME_MATCH_P((name), (str), (len))) { \
+        *(unsigned int *)arg |= (bit);	\
+        return;				\
+    }
+
+#define LITERAL_NAME_ELEMENT(name) #name
+
+static void
+feature_option(const char *str, int len, void *arg, const unsigned int enable)
+{
+    static const char list[] = EACH_FEATURES(LITERAL_NAME_ELEMENT, ", ");
+    ruby_features_t *argp = arg;
+    unsigned int mask = ~0U;
+    unsigned int set = 0U;
+#if AMBIGUOUS_FEATURE_NAMES
+    int matched = 0;
+# define FEATURE_FOUND ++matched
+#else
+# define FEATURE_FOUND goto found
+#endif
+#define SET_FEATURE(bit) \
+    if (NAME_MATCH_P(#bit, str, len)) {set |= mask = FEATURE_BIT(bit); FEATURE_FOUND;}
+    EACH_FEATURES(SET_FEATURE, ;);
+    if (NAME_MATCH_P("jit", str, len)) { // This allows you to cancel --jit
+        set |= mask = FEATURE_BIT(jit);
+        goto found;
+    }
+    if (NAME_MATCH_P("all", str, len)) {
+        // YJIT and RJIT cannot be enabled at the same time. We enable only one for --enable=all.
+        mask &= ~feature_jit_mask | FEATURE_BIT(jit);
+        goto found;
+    }
+#if AMBIGUOUS_FEATURE_NAMES
+    if (matched == 1) goto found;
+    if (matched > 1) {
+        VALUE mesg = rb_sprintf("ambiguous feature: `%.*s' (", len, str);
+#define ADD_FEATURE_NAME(bit) \
+        if (FEATURE_BIT(bit) & set) { \
+            rb_str_cat_cstr(mesg, #bit); \
+            if (--matched) rb_str_cat_cstr(mesg, ", "); \
+        }
+        EACH_FEATURES(ADD_FEATURE_NAME, ;);
+        rb_str_cat_cstr(mesg, ")");
+        rb_exc_raise(rb_exc_new_str(rb_eRuntimeError, mesg));
+#undef ADD_FEATURE_NAME
+    }
+#else
+    (void)set;
+#endif
+    rb_warn("unknown argument for --%s: `%.*s'",
+            enable ? "enable" : "disable", len, str);
+    rb_warn("features are [%.*s].", (int)strlen(list), list);
+    return;
+
+  found:
+    FEATURE_SET_TO(*argp, mask, (mask & enable));
+    return;
+}
+
+static void
+enable_option(const char *str, int len, void *arg)
+{
+    feature_option(str, len, arg, ~0U);
+}
+
+static void
+disable_option(const char *str, int len, void *arg)
+{
+    feature_option(str, len, arg, 0U);
+}
+
+RUBY_EXTERN const int  ruby_patchlevel;
+int ruby_env_debug_option(const char *str, int len, void *arg);
+
+static void
+debug_option(const char *str, int len, void *arg)
+{
+    static const char list[] = EACH_DEBUG_FEATURES(LITERAL_NAME_ELEMENT, ", ");
+    ruby_features_t *argp = arg;
+#define SET_WHEN_DEBUG(bit) \
+    if (NAME_MATCH_P(#bit, str, len)) { \
+        FEATURE_SET(*argp, DEBUG_BIT(bit)); \
+        return; \
+    }
+    EACH_DEBUG_FEATURES(SET_WHEN_DEBUG, ;);
+#ifdef RUBY_DEVEL
+    if (ruby_patchlevel < 0 && ruby_env_debug_option(str, len, 0)) return;
+#endif
+    rb_warn("unknown argument for --debug: `%.*s'", len, str);
+    rb_warn("debug features are [%.*s].", (int)strlen(list), list);
+}
+
+static int
+memtermspn(const char *str, char term, int len)
+{
+    RUBY_ASSERT(len >= 0);
+    if (len <= 0) return 0;
+    const char *next = memchr(str, term, len);
+    return next ? (int)(next - str) : len;
+}
+
+static const char additional_opt_sep = '+';
+
+static unsigned int
+dump_additional_option(const char *str, int len, unsigned int bits, const char *name)
+{
+    int w;
+    for (; len-- > 0 && *str++ == additional_opt_sep; len -= w, str += w) {
+        w = memtermspn(str, additional_opt_sep, len);
+#define SET_ADDITIONAL(bit) if (NAME_MATCH_P(#bit, str, w)) { \
+            if (bits & DUMP_BIT(bit)) \
+                rb_warn("duplicate option to dump %s: `%.*s'", name, w, str); \
+            bits |= DUMP_BIT(bit); \
+            continue; \
+        }
+        if (dump_error_tolerant_bits & bits) {
+            SET_ADDITIONAL(error_tolerant);
+        }
+        rb_warn("don't know how to dump %s with `%.*s'", name, w, str);
+    }
+    return bits;
+}
+
+static void
+dump_option(const char *str, int len, void *arg)
+{
+    static const char list[] = EACH_DUMPS(LITERAL_NAME_ELEMENT, ", ");
+    int w = memtermspn(str, additional_opt_sep, len);
+
+#define SET_WHEN_DUMP(bit) \
+    if (NAME_MATCH_P(#bit, (str), (w))) { \
+        *(unsigned int *)arg |= \
+            dump_additional_option(str + w, len - w, DUMP_BIT(bit), #bit); \
+        return; \
+    }
+    EACH_DUMPS(SET_WHEN_DUMP, ;);
+    rb_warn("don't know how to dump `%.*s',", len, str);
+    rb_warn("but only [%.*s].", (int)strlen(list), list);
+}
+
+static void
+set_option_encoding_once(const char *type, VALUE *name, const char *e, long elen)
+{
+    VALUE ename;
+
+    if (!elen) elen = strlen(e);
+    ename = rb_str_new(e, elen);
+
+    if (*name &&
+        rb_funcall(ename, rb_intern("casecmp"), 1, *name) != INT2FIX(0)) {
+        rb_raise(rb_eRuntimeError,
+                 "%s already set to %"PRIsVALUE, type, *name);
+    }
+    *name = ename;
+}
+
+#define set_internal_encoding_once(opt, e, elen) \
+    set_option_encoding_once("default_internal", &(opt)->intern.enc.name, (e), (elen))
+#define set_external_encoding_once(opt, e, elen) \
+    set_option_encoding_once("default_external", &(opt)->ext.enc.name, (e), (elen))
+#define set_source_encoding_once(opt, e, elen) \
+    set_option_encoding_once("source", &(opt)->src.enc.name, (e), (elen))
+
+#define yjit_opt_match_noarg(s, l, name) \
+    opt_match(s, l, name) && (*(s) ? (rb_warn("argument to --yjit-" name " is ignored"), 1) : 1)
+#define yjit_opt_match_arg(s, l, name) \
+    opt_match(s, l, name) && (*(s) && *(s+1) ? 1 : (rb_raise(rb_eRuntimeError, "--yjit-" name " needs an argument"), 0))
+
+#if USE_YJIT
+static bool
+setup_yjit_options(const char *s)
+{
+    // The option parsing is done in yjit/src/options.rs
+    bool rb_yjit_parse_option(const char* s);
+    bool success = rb_yjit_parse_option(s);
+
+    if (success) {
+        return true;
+    }
+
+    rb_raise(
+        rb_eRuntimeError,
+        "invalid YJIT option `%s' (--help will show valid yjit options)",
+        s
+    );
+}
+#endif
+
+/*
+ * Following proc_*_option functions are tree kinds:
+ *
+ * - with a required argument, takes also `argc` and `argv`, and
+ *   returns the number of consumed argv including the option itself.
+ *
+ * - with a mandatory argument just after the option.
+ *
+ * - no required argument, this returns the address of
+ *   the next character after the last consumed character.
+ */
+
+/* optional */
+static const char *
+proc_W_option(ruby_cmdline_options_t *opt, const char *s, int *warning)
+{
+    if (s[1] == ':') {
+        unsigned int bits = 0;
+        static const char no_prefix[] = "no-";
+        int enable = strncmp(s += 2, no_prefix, sizeof(no_prefix)-1) != 0;
+        if (!enable) s += sizeof(no_prefix)-1;
+        size_t len = strlen(s);
+        if (NAME_MATCH_P("deprecated", s, len)) {
+            bits = 1U << RB_WARN_CATEGORY_DEPRECATED;
+        }
+        else if (NAME_MATCH_P("experimental", s, len)) {
+            bits = 1U << RB_WARN_CATEGORY_EXPERIMENTAL;
+        }
+        else if (NAME_MATCH_P("performance", s, len)) {
+            bits = 1U << RB_WARN_CATEGORY_PERFORMANCE;
+        }
+        else {
+            rb_warn("unknown warning category: `%s'", s);
+        }
+        if (bits) FEATURE_SET_TO(opt->warn, bits, enable ? bits : 0);
+        return 0;
+    }
+    else {
+        size_t numlen;
+        int v = 2;	/* -W as -W2 */
+
+        if (*++s) {
+            v = scan_oct(s, 1, &numlen);
+            if (numlen == 0)
+                v = 2;
+            s += numlen;
+        }
+        if (!opt->warning) {
+            switch (v) {
+              case 0:
+                ruby_verbose = Qnil;
+                break;
+              case 1:
+                ruby_verbose = Qfalse;
+                break;
+              default:
+                ruby_verbose = Qtrue;
+                break;
+            }
+        }
+        *warning = 1;
+        switch (v) {
+          case 0:
+            FEATURE_SET_TO(opt->warn, RB_WARN_CATEGORY_DEFAULT_BITS, 0);
+            break;
+          case 1:
+            FEATURE_SET_TO(opt->warn, 1U << RB_WARN_CATEGORY_DEPRECATED, 0);
+            break;
+          default:
+            FEATURE_SET(opt->warn, RB_WARN_CATEGORY_DEFAULT_BITS);
+            break;
+        }
+        return s;
+    }
+}
+
+/* required */
+static long
+proc_e_option(ruby_cmdline_options_t *opt, const char *s, long argc, char **argv)
+{
+    long n = 1;
+    forbid_setid("-e");
+    if (!*++s) {
+        if (!--argc)
+            rb_raise(rb_eRuntimeError, "no code specified for -e");
+        s = *++argv;
+        n++;
+    }
+    if (!opt->e_script) {
+        opt->e_script = rb_str_new(0, 0);
+        if (opt->script == 0)
+            opt->script = "-e";
+    }
+    rb_str_cat2(opt->e_script, s);
+    rb_str_cat2(opt->e_script, "\n");
+    return n;
+}
+
+/* optional */
+static const char *
+proc_K_option(ruby_cmdline_options_t *opt, const char *s)
+{
+    if (*++s) {
+        const char *enc_name = 0;
+        switch (*s) {
+          case 'E': case 'e':
+            enc_name = "EUC-JP";
+            break;
+          case 'S': case 's':
+            enc_name = "Windows-31J";
+            break;
+          case 'U': case 'u':
+            enc_name = "UTF-8";
+            break;
+          case 'N': case 'n': case 'A': case 'a':
+            enc_name = "ASCII-8BIT";
+            break;
+        }
+        if (enc_name) {
+            opt->src.enc.name = rb_str_new2(enc_name);
+            if (!opt->ext.enc.name)
+                opt->ext.enc.name = opt->src.enc.name;
+        }
+        s++;
+    }
+    return s;
+}
+
+/* optional */
+static const char *
+proc_0_option(ruby_cmdline_options_t *opt, const char *s)
+{
+    size_t numlen;
+    int v;
+    char c;
+
+    v = scan_oct(s, 4, &numlen);
+    s += numlen;
+    if (v > 0377)
+        rb_rs = Qnil;
+    else if (v == 0 && numlen >= 2) {
+        rb_rs = rb_str_new2("");
+    }
+    else {
+        c = v & 0xff;
+        rb_rs = rb_str_new(&c, 1);
+    }
+    return s;
+}
+
+/* mandatory */
+static void
+proc_encoding_option(ruby_cmdline_options_t *opt, const char *s, const char *opt_name)
+{
+    char *p;
+# define set_encoding_part(type) \
+    if (!(p = strchr(s, ':'))) {                        \
+        set_##type##_encoding_once(opt, s, 0);          \
+        return;                                         \
+    }                                                   \
+    else if (p > s) {                                   \
+        set_##type##_encoding_once(opt, s, p-s);        \
+    }
+    set_encoding_part(external);
+    if (!*(s = ++p)) return;
+    set_encoding_part(internal);
+    if (!*(s = ++p)) return;
+#if defined ALLOW_DEFAULT_SOURCE_ENCODING && ALLOW_DEFAULT_SOURCE_ENCODING
+    set_encoding_part(source);
+    if (!*(s = ++p)) return;
+#endif
+    rb_raise(rb_eRuntimeError, "extra argument for %s: %s", opt_name, s);
+# undef set_encoding_part
+    UNREACHABLE;
+}
+
+static long
+proc_long_options(ruby_cmdline_options_t *opt, const char *s, long argc, char **argv, int envopt)
+{
+    size_t n;
+    long argc0 = argc;
+# define is_option_end(c, allow_hyphen)                         \
+    (!(c) || ((allow_hyphen) && (c) == '-') || (c) == '=')
+# define check_envopt(name, allow_envopt)                               \
+    (((allow_envopt) || !envopt) ? (void)0 :                            \
+     rb_raise(rb_eRuntimeError, "invalid switch in RUBYOPT: --" name))
+# define need_argument(name, s, needs_arg, next_arg)                    \
+    ((*(s) ? !*++(s) : (next_arg) && (!argc || !((s) = argv[1]) || (--argc, ++argv, 0))) && (needs_arg) ? \
+     rb_raise(rb_eRuntimeError, "missing argument for --" name)         \
+     : (void)0)
+# define is_option_with_arg(name, allow_hyphen, allow_envopt)           \
+    is_option_with_optarg(name, allow_hyphen, allow_envopt, Qtrue, Qtrue)
+# define is_option_with_optarg(name, allow_hyphen, allow_envopt, needs_arg, next_arg) \
+    (strncmp((name), s, n = sizeof(name) - 1) == 0 && is_option_end(s[n], (allow_hyphen)) && \
+     (s[n] != '-' || s[n+1]) ?                                          \
+     (check_envopt(name, (allow_envopt)), s += n,                       \
+      need_argument(name, s, needs_arg, next_arg), 1) : 0)
+
+    if (strcmp("copyright", s) == 0) {
+        if (envopt) goto noenvopt_long;
+        opt->dump |= DUMP_BIT(copyright);
+    }
+    else if (is_option_with_optarg("debug", Qtrue, Qtrue, Qfalse, Qfalse)) {
+        if (s && *s) {
+            ruby_each_words(s, debug_option, &opt->features);
+        }
+        else {
+            ruby_debug = Qtrue;
+            ruby_verbose = Qtrue;
+        }
+    }
+    else if (is_option_with_arg("enable", Qtrue, Qtrue)) {
+        ruby_each_words(s, enable_option, &opt->features);
+    }
+    else if (is_option_with_arg("disable", Qtrue, Qtrue)) {
+        ruby_each_words(s, disable_option, &opt->features);
+    }
+    else if (is_option_with_arg("encoding", Qfalse, Qtrue)) {
+        proc_encoding_option(opt, s, "--encoding");
+    }
+    else if (is_option_with_arg("internal-encoding", Qfalse, Qtrue)) {
+        set_internal_encoding_once(opt, s, 0);
+    }
+    else if (is_option_with_arg("external-encoding", Qfalse, Qtrue)) {
+        set_external_encoding_once(opt, s, 0);
+    }
+    else if (is_option_with_arg("parser", Qfalse, Qtrue)) {
+        if (strcmp("prism", s) == 0) {
+            (*rb_ruby_prism_ptr()) = true;
+            rb_warn("The compiler based on the Prism parser is currently experimental and "
+                    "compatibility with the compiler based on parse.y "
+                    "is not yet complete. Please report any issues you "
+                    "find on the `ruby/prism` issue tracker.");
+        }
+        else if (strcmp("parse.y", s) == 0) {
+            // default behavior
+        }
+        else {
+            rb_raise(rb_eRuntimeError, "unknown parser %s", s);
+        }
+    }
+#if defined ALLOW_DEFAULT_SOURCE_ENCODING && ALLOW_DEFAULT_SOURCE_ENCODING
+    else if (is_option_with_arg("source-encoding", Qfalse, Qtrue)) {
+        set_source_encoding_once(opt, s, 0);
+    }
+#endif
+    else if (strcmp("version", s) == 0) {
+        if (envopt) goto noenvopt_long;
+        opt->dump |= DUMP_BIT(version);
+    }
+    else if (strcmp("verbose", s) == 0) {
+        opt->verbose = 1;
+        ruby_verbose = Qtrue;
+    }
+    else if (strcmp("jit", s) == 0) {
+#if USE_YJIT || USE_RJIT
+        FEATURE_SET(opt->features, FEATURE_BIT(jit));
+#else
+        rb_warn("Ruby was built without JIT support");
+#endif
+    }
+    else if (is_option_with_optarg("rjit", '-', true, false, false)) {
+#if USE_RJIT
+        extern void rb_rjit_setup_options(const char *s, struct rb_rjit_options *rjit_opt);
+        FEATURE_SET(opt->features, FEATURE_BIT(rjit));
+        rb_rjit_setup_options(s, &opt->rjit);
+#else
+        rb_warn("RJIT support is disabled.");
+#endif
+    }
+    else if (is_option_with_optarg("yjit", '-', true, false, false)) {
+#if USE_YJIT
+        FEATURE_SET(opt->features, FEATURE_BIT(yjit));
+        setup_yjit_options(s);
+#else
+        rb_warn("Ruby was built without YJIT support."
+                " You may need to install rustc to build Ruby with YJIT.");
+#endif
+    }
+    else if (strcmp("yydebug", s) == 0) {
+        if (envopt) goto noenvopt_long;
+        opt->dump |= DUMP_BIT(yydebug);
+    }
+    else if (is_option_with_arg("dump", Qfalse, Qfalse)) {
+        ruby_each_words(s, dump_option, &opt->dump);
+    }
+    else if (strcmp("help", s) == 0) {
+        if (envopt) goto noenvopt_long;
+        opt->dump |= DUMP_BIT(help);
+        return 0;
+    }
+    else if (is_option_with_arg("backtrace-limit", Qfalse, Qtrue)) {
+        char *e;
+        long n = strtol(s, &e, 10);
+        if (errno == ERANGE || !BACKTRACE_LENGTH_LIMIT_VALID_P(n) || *e) {
+            rb_raise(rb_eRuntimeError, "wrong limit for backtrace length");
+        }
+        else {
+            opt->backtrace_length_limit = n;
+        }
+    }
+    else if (is_option_with_arg("crash-report", true, true)) {
+        opt->crash_report = s;
+    }
+    else {
+        rb_raise(rb_eRuntimeError,
+                 "invalid option --%s  (-h will show valid options)", s);
+    }
+    return argc0 - argc + 1;
+
+  noenvopt_long:
+    rb_raise(rb_eRuntimeError, "invalid switch in RUBYOPT: --%s", s);
+# undef is_option_end
+# undef check_envopt
+# undef need_argument
+# undef is_option_with_arg
+# undef is_option_with_optarg
+    UNREACHABLE_RETURN(0);
+}
+
+static long
+proc_options(long argc, char **argv, ruby_cmdline_options_t *opt, int envopt)
+{
+    long n, argc0 = argc;
+    const char *s;
+    int warning = opt->warning;
+
+    if (argc <= 0 || !argv)
+        return 0;
+
+    for (argc--, argv++; argc > 0; argc--, argv++) {
+        const char *const arg = argv[0];
+        if (!arg || arg[0] != '-' || !arg[1])
+            break;
+
+        s = arg + 1;
+      reswitch:
+        switch (*s) {
+          case 'a':
+            if (envopt) goto noenvopt;
+            opt->do_split = TRUE;
+            s++;
+            goto reswitch;
+
+          case 'p':
+            if (envopt) goto noenvopt;
+            opt->do_print = TRUE;
+            /* through */
+          case 'n':
+            if (envopt) goto noenvopt;
+            opt->do_loop = TRUE;
+            s++;
+            goto reswitch;
+
+          case 'd':
+            ruby_debug = Qtrue;
+            ruby_verbose = Qtrue;
+            s++;
+            goto reswitch;
+
+          case 'y':
+            if (envopt) goto noenvopt;
+            opt->dump |= DUMP_BIT(yydebug);
+            s++;
+            goto reswitch;
+
+          case 'v':
+            if (opt->verbose) {
+                s++;
+                goto reswitch;
+            }
+            opt->dump |= DUMP_BIT(version_v);
+            opt->verbose = 1;
+          case 'w':
+            if (!opt->warning) {
+                warning = 1;
+                ruby_verbose = Qtrue;
+            }
+            FEATURE_SET(opt->warn, RB_WARN_CATEGORY_DEFAULT_BITS);
+            s++;
+            goto reswitch;
+
+          case 'W':
+            if (!(s = proc_W_option(opt, s, &warning))) break;
+            goto reswitch;
+
+          case 'c':
+            if (envopt) goto noenvopt;
+            opt->dump |= DUMP_BIT(syntax);
+            s++;
+            goto reswitch;
+
+          case 's':
+            if (envopt) goto noenvopt;
+            forbid_setid("-s");
+            if (!opt->sflag) opt->sflag = 1;
+            s++;
+            goto reswitch;
+
+          case 'h':
+            if (envopt) goto noenvopt;
+            opt->dump |= DUMP_BIT(usage);
+            goto switch_end;
+
+          case 'l':
+            if (envopt) goto noenvopt;
+            opt->do_line = TRUE;
+            rb_output_rs = rb_rs;
+            s++;
+            goto reswitch;
+
+          case 'S':
+            if (envopt) goto noenvopt;
+            forbid_setid("-S");
+            opt->do_search = TRUE;
+            s++;
+            goto reswitch;
+
+          case 'e':
+            if (envopt) goto noenvopt;
+            if (!(n = proc_e_option(opt, s, argc, argv))) break;
+            --n;
+            argc -= n;
+            argv += n;
+            break;
+
+          case 'r':
+            forbid_setid("-r");
+            if (*++s) {
+                add_modules(&opt->req_list, s);
+            }
+            else if (argc > 1) {
+                add_modules(&opt->req_list, argv[1]);
+                argc--, argv++;
+            }
+            break;
+
+          case 'i':
+            if (envopt) goto noenvopt;
+            forbid_setid("-i");
+            ruby_set_inplace_mode(s + 1);
+            break;
+
+          case 'x':
+            if (envopt) goto noenvopt;
+            forbid_setid("-x");
+            opt->xflag = TRUE;
+            s++;
+            if (*s && chdir(s) < 0) {
+                rb_fatal("Can't chdir to %s", s);
+            }
+            break;
+
+          case 'C':
+          case 'X':
+            if (envopt) goto noenvopt;
+            if (!*++s && (!--argc || !(s = *++argv) || !*s)) {
+                rb_fatal("Can't chdir");
+            }
+            if (chdir(s) < 0) {
+                rb_fatal("Can't chdir to %s", s);
+            }
+            break;
+
+          case 'F':
+            if (envopt) goto noenvopt;
+            if (*++s) {
+                rb_fs = rb_reg_new(s, strlen(s), 0);
+            }
+            break;
+
+          case 'E':
+            if (!*++s && (!--argc || !(s = *++argv))) {
+                rb_raise(rb_eRuntimeError, "missing argument for -E");
+            }
+            proc_encoding_option(opt, s, "-E");
+            break;
+
+          case 'U':
+            set_internal_encoding_once(opt, "UTF-8", 0);
+            ++s;
+            goto reswitch;
+
+          case 'K':
+            if (!(s = proc_K_option(opt, s))) break;
+            goto reswitch;
+
+          case 'I':
+            forbid_setid("-I");
+            if (*++s)
+                ruby_incpush_expand(s);
+            else if (argc > 1) {
+                ruby_incpush_expand(argv[1]);
+                argc--, argv++;
+            }
+            break;
+
+          case '0':
+            if (envopt) goto noenvopt;
+            if (!(s = proc_0_option(opt, s))) break;
+            goto reswitch;
+
+          case '-':
+            if (!s[1] || (s[1] == '\r' && !s[2])) {
+                argc--, argv++;
+                goto switch_end;
+            }
+            s++;
+
+            if (!(n = proc_long_options(opt, s, argc, argv, envopt))) goto switch_end;
+            --n;
+            argc -= n;
+            argv += n;
+            break;
+
+          case '\r':
+            if (!s[1])
+                break;
+
+          default:
+            rb_raise(rb_eRuntimeError,
+                     "invalid option -%c  (-h will show valid options)",
+                     (int)(unsigned char)*s);
+            goto switch_end;
+
+          noenvopt:
+            /* "EIdvwWrKU" only */
+            rb_raise(rb_eRuntimeError, "invalid switch in RUBYOPT: -%c", *s);
+            break;
+
+          case 0:
+            break;
+        }
+    }
+
+  switch_end:
+    if (warning) opt->warning = warning;
+    return argc0 - argc;
+}
+
+void Init_builtin_features(void);
+
+static void
+ruby_init_prelude(void)
+{
+    Init_builtin_features();
+    rb_const_remove(rb_cObject, rb_intern_const("TMP_RUBY_PREFIX"));
+}
+
+void rb_call_builtin_inits(void);
+
+// Initialize extra optional exts linked statically.
+// This empty definition will be replaced with the actual strong symbol by linker.
+#if RBIMPL_HAS_ATTRIBUTE(weak)
+__attribute__((weak))
+#endif
+void
+Init_extra_exts(void)
+{
+}
+
+static void
+ruby_opt_init(ruby_cmdline_options_t *opt)
+{
+    if (opt->dump & dump_exit_bits) return;
+
+    if (FEATURE_SET_P(opt->features, gems)) {
+        rb_define_module("Gem");
+        if (opt->features.set & FEATURE_BIT(error_highlight)) {
+            rb_define_module("ErrorHighlight");
+        }
+        if (opt->features.set & FEATURE_BIT(did_you_mean)) {
+            rb_define_module("DidYouMean");
+        }
+        if (opt->features.set & FEATURE_BIT(syntax_suggest)) {
+            rb_define_module("SyntaxSuggest");
+        }
+    }
+
+    rb_warning_category_update(opt->warn.mask, opt->warn.set);
+
+    /* [Feature #19785] Warning for removed GC environment variable.
+     * Remove this in Ruby 3.4. */
+    if (getenv("RUBY_GC_HEAP_INIT_SLOTS")) {
+        rb_warn_deprecated("The environment variable RUBY_GC_HEAP_INIT_SLOTS",
+                           "environment variables RUBY_GC_HEAP_%d_INIT_SLOTS");
+    }
+
+    if (getenv("RUBY_FREE_AT_EXIT")) {
+        rb_warn("Free at exit is experimental and may be unstable");
+        rb_free_at_exit = true;
+    }
+
+#if USE_RJIT
+    // rb_call_builtin_inits depends on RubyVM::RJIT.enabled?
+    if (opt->rjit.on)
+        rb_rjit_enabled = true;
+    if (opt->rjit.stats)
+        rb_rjit_stats_enabled = true;
+    if (opt->rjit.trace_exits)
+        rb_rjit_trace_exits_enabled = true;
+#endif
+
+    Init_ext(); /* load statically linked extensions before rubygems */
+    Init_extra_exts();
+    rb_call_builtin_inits();
+    ruby_init_prelude();
+
+    // Initialize JITs after prelude because JITing prelude is typically not optimal.
+#if USE_RJIT
+    // Also, rb_rjit_init is safe only after rb_call_builtin_inits() defines RubyVM::RJIT::Compiler.
+    if (opt->rjit.on)
+        rb_rjit_init(&opt->rjit);
+#endif
+#if USE_YJIT
+    rb_yjit_init(opt->yjit);
+#endif
+
+    ruby_set_script_name(opt->script_name);
+    require_libraries(&opt->req_list);
+}
+
+static int
+opt_enc_index(VALUE enc_name)
+{
+    const char *s = RSTRING_PTR(enc_name);
+    int i = rb_enc_find_index(s);
+
+    if (i < 0) {
+        rb_raise(rb_eRuntimeError, "unknown encoding name - %s", s);
+    }
+    else if (rb_enc_dummy_p(rb_enc_from_index(i))) {
+        rb_raise(rb_eRuntimeError, "dummy encoding is not acceptable - %s ", s);
+    }
+    return i;
+}
+
+#define rb_progname      (GET_VM()->progname)
+#define rb_orig_progname (GET_VM()->orig_progname)
+VALUE rb_argv0;
+VALUE rb_e_script;
+
+static VALUE
+false_value(ID _x, VALUE *_y)
+{
+    return Qfalse;
+}
+
+static VALUE
+true_value(ID _x, VALUE *_y)
+{
+    return Qtrue;
+}
+
+#define rb_define_readonly_boolean(name, val) \
+    rb_define_virtual_variable((name), (val) ? true_value : false_value, 0)
+
+static VALUE
+uscore_get(void)
+{
+    VALUE line;
+
+    line = rb_lastline_get();
+    if (!RB_TYPE_P(line, T_STRING)) {
+        rb_raise(rb_eTypeError, "$_ value need to be String (%s given)",
+                 NIL_P(line) ? "nil" : rb_obj_classname(line));
+    }
+    return line;
+}
+
+/*
+ *  call-seq:
+ *     sub(pattern, replacement)   -> $_
+ *     sub(pattern) {|...| block } -> $_
+ *
+ *  Equivalent to <code>$_.sub(<i>args</i>)</code>, except that
+ *  <code>$_</code> will be updated if substitution occurs.
+ *  Available only when -p/-n command line option specified.
+ */
+
+static VALUE
+rb_f_sub(int argc, VALUE *argv, VALUE _)
+{
+    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("sub"), argc, argv);
+    rb_lastline_set(str);
+    return str;
+}
+
+/*
+ *  call-seq:
+ *     gsub(pattern, replacement)    -> $_
+ *     gsub(pattern) {|...| block }  -> $_
+ *
+ *  Equivalent to <code>$_.gsub...</code>, except that <code>$_</code>
+ *  will be updated if substitution occurs.
+ *  Available only when -p/-n command line option specified.
+ *
+ */
+
+static VALUE
+rb_f_gsub(int argc, VALUE *argv, VALUE _)
+{
+    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("gsub"), argc, argv);
+    rb_lastline_set(str);
+    return str;
+}
+
+/*
+ *  call-seq:
+ *     chop   -> $_
+ *
+ *  Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code>
+ *  is never returned. See String#chop!.
+ *  Available only when -p/-n command line option specified.
+ *
+ */
+
+static VALUE
+rb_f_chop(VALUE _)
+{
+    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chop"), 0, 0);
+    rb_lastline_set(str);
+    return str;
+}
+
+
+/*
+ *  call-seq:
+ *     chomp            -> $_
+ *     chomp(string)    -> $_
+ *
+ *  Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See
+ *  String#chomp.
+ *  Available only when -p/-n command line option specified.
+ *
+ */
+
+static VALUE
+rb_f_chomp(int argc, VALUE *argv, VALUE _)
+{
+    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chomp"), argc, argv);
+    rb_lastline_set(str);
+    return str;
+}
+
+static void
+setup_pager_env(void)
+{
+    if (!getenv("LESS")) {
+        // Output "raw" control characters, and move per sections.
+        ruby_setenv("LESS", "-R +/^[A-Z].*");
+    }
+}
+
+#ifdef _WIN32
+static int
+tty_enabled(void)
+{
+    HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
+    DWORD m;
+    if (!GetConsoleMode(h, &m)) return 0;
+# ifndef ENABLE_VIRTUAL_TERMINAL_PROCESSING
+#   define ENABLE_VIRTUAL_TERMINAL_PROCESSING 0x4
+# endif
+    if (!(m & ENABLE_VIRTUAL_TERMINAL_PROCESSING)) return 0;
+    return 1;
+}
+#elif !defined(HAVE_WORKING_FORK)
+# define tty_enabled() 0
+#endif
+
+static VALUE
+copy_str(VALUE str, rb_encoding *enc, bool intern)
+{
+    if (!intern) {
+        if (rb_enc_str_coderange_scan(str, enc) == ENC_CODERANGE_BROKEN)
+            return 0;
+        return rb_enc_associate(rb_str_dup(str), enc);
+    }
+    return rb_enc_interned_str(RSTRING_PTR(str), RSTRING_LEN(str), enc);
+}
+
+#if USE_YJIT
+// Check that an environment variable is set to a truthy value
+static bool
+env_var_truthy(const char *name)
+{
+    const char *value = getenv(name);
+
+    if (!value)
+        return false;
+    if (strcmp(value, "1") == 0)
+        return true;
+    if (strcmp(value, "true") == 0)
+        return true;
+    if (strcmp(value, "yes") == 0)
+        return true;
+
+    return false;
+}
+#endif
+
+rb_pid_t rb_fork_ruby(int *status);
+
+static rb_ast_t *
+process_script(ruby_cmdline_options_t *opt)
+{
+    rb_ast_t *ast;
+    VALUE parser = rb_parser_new();
+
+    if (opt->dump & DUMP_BIT(yydebug)) {
+        rb_parser_set_yydebug(parser, Qtrue);
+    }
+
+    if (opt->dump & DUMP_BIT(error_tolerant)) {
+        rb_parser_error_tolerant(parser);
+    }
+
+    if (opt->e_script) {
+        VALUE progname = rb_progname;
+        rb_parser_set_context(parser, 0, TRUE);
+
+        ruby_opt_init(opt);
+        ruby_set_script_name(progname);
+        rb_parser_set_options(parser, opt->do_print, opt->do_loop,
+                              opt->do_line, opt->do_split);
+        ast = rb_parser_compile_string(parser, opt->script, opt->e_script, 1);
+    }
+    else {
+        VALUE f;
+        int xflag = opt->xflag;
+        f = open_load_file(opt->script_name, &xflag);
+        opt->xflag = xflag != 0;
+        rb_parser_set_context(parser, 0, f == rb_stdin);
+        ast = load_file(parser, opt->script_name, f, 1, opt);
+    }
+    if (!ast->body.root) {
+        rb_ast_dispose(ast);
+        return NULL;
+    }
+    return ast;
+}
+
+static void
+prism_script(ruby_cmdline_options_t *opt, pm_string_t *input, pm_options_t *options)
+{
+    ruby_opt_init(opt);
+
+    if (strcmp(opt->script, "-") == 0) {
+        rb_warn("Prism support for streaming code from stdin is not currently supported");
+        pm_string_constant_init(input, "", 0);
+        pm_options_filepath_set(options, "-e");
+    }
+    else if (opt->e_script) {
+        pm_string_constant_init(input, RSTRING_PTR(opt->e_script), RSTRING_LEN(opt->e_script));
+        pm_options_filepath_set(options, "-e");
+    }
+    else {
+        pm_string_mapped_init(input, RSTRING_PTR(opt->script_name));
+        pm_options_filepath_set(options, RSTRING_PTR(opt->script_name));
+    }
+}
+
+static VALUE
+prism_dump_tree(pm_string_t *input, pm_options_t *options)
+{
+    pm_parser_t parser;
+    pm_parser_init(&parser, pm_string_source(input), pm_string_length(input), options);
+
+    pm_node_t *node = pm_parse(&parser);
+
+    pm_buffer_t output_buffer = { 0 };
+
+    pm_prettyprint(&output_buffer, &parser, node);
+
+    VALUE tree = rb_str_new(output_buffer.value, output_buffer.length);
+
+    pm_buffer_free(&output_buffer);
+    pm_node_destroy(&parser, node);
+    pm_parser_free(&parser);
+
+    return tree;
+}
+
+static VALUE
+process_options(int argc, char **argv, ruby_cmdline_options_t *opt)
+{
+    rb_ast_t *ast = NULL;
+    pm_string_t pm_input = { 0 };
+    pm_options_t pm_options = { 0 };
+
+#define dispose_result() \
+    (ast ? rb_ast_dispose(ast) : (pm_string_free(&pm_input), pm_options_free(&pm_options)))
+
+    const rb_iseq_t *iseq;
+    rb_encoding *enc, *lenc;
+#if UTF8_PATH
+    rb_encoding *ienc = 0;
+    rb_encoding *const uenc = rb_utf8_encoding();
+#endif
+    const char *s;
+    char fbuf[MAXPATHLEN];
+    int i = (int)proc_options(argc, argv, opt, 0);
+    unsigned int dump = opt->dump & dump_exit_bits;
+    rb_vm_t *vm = GET_VM();
+    const long loaded_before_enc = RARRAY_LEN(vm->loaded_features);
+
+    if (opt->dump & (DUMP_BIT(usage)|DUMP_BIT(help))) {
+        int tty = isatty(1);
+        const char *const progname =
+            (argc > 0 && argv && argv[0] ? argv[0] :
+             origarg.argc > 0 && origarg.argv && origarg.argv[0] ? origarg.argv[0] :
+             ruby_engine);
+        int columns = 0;
+        if ((opt->dump & DUMP_BIT(help)) && tty) {
+            const char *pager_env = getenv("RUBY_PAGER");
+            if (!pager_env) pager_env = getenv("PAGER");
+            if (pager_env && *pager_env && isatty(0)) {
+                const char *columns_env = getenv("COLUMNS");
+                if (columns_env) columns = atoi(columns_env);
+                VALUE pager = rb_str_new_cstr(pager_env);
+#ifdef HAVE_WORKING_FORK
+                int fds[2];
+                if (rb_pipe(fds) == 0) {
+                    rb_pid_t pid = rb_fork_ruby(NULL);
+                    if (pid > 0) {
+                        /* exec PAGER with reading from child */
+                        dup2(fds[0], 0);
+                    }
+                    else if (pid == 0) {
+                        /* send the help message to the parent PAGER */
+                        dup2(fds[1], 1);
+                        dup2(fds[1], 2);
+                    }
+                    close(fds[0]);
+                    close(fds[1]);
+                    if (pid > 0) {
+                        setup_pager_env();
+                        rb_f_exec(1, &pager);
+                        kill(SIGTERM, pid);
+                        rb_waitpid(pid, 0, 0);
+                    }
+                }
+#else
+                setup_pager_env();
+                VALUE port = rb_io_popen(pager, rb_str_new_lit("w"), Qnil, Qnil);
+                if (!NIL_P(port)) {
+                    int oldout = dup(1);
+                    int olderr = dup(2);
+                    int fd = RFILE(port)->fptr->fd;
+                    tty = tty_enabled();
+                    dup2(fd, 1);
+                    dup2(fd, 2);
+                    usage(progname, 1, tty, columns);
+                    fflush(stdout);
+                    dup2(oldout, 1);
+                    dup2(olderr, 2);
+                    rb_io_close(port);
+                    return Qtrue;
+                }
+#endif
+            }
+        }
+        usage(progname, (opt->dump & DUMP_BIT(help)), tty, columns);
+        return Qtrue;
+    }
+
+    argc -= i;
+    argv += i;
+
+    if (FEATURE_SET_P(opt->features, rubyopt) && (s = getenv("RUBYOPT"))) {
+        moreswitches(s, opt, 1);
+    }
+
+    if (opt->src.enc.name)
+        /* cannot set deprecated category, as enabling deprecation warnings based on flags
+         * has not happened yet.
+         */
+        rb_warning("-K is specified; it is for 1.8 compatibility and may cause odd behavior");
+
+    if (!(FEATURE_SET_BITS(opt->features) & feature_jit_mask)) {
+#if USE_YJIT
+        if (!FEATURE_USED_P(opt->features, yjit) && env_var_truthy("RUBY_YJIT_ENABLE")) {
+            FEATURE_SET(opt->features, FEATURE_BIT(yjit));
+        }
+#endif
+    }
+    if (MULTI_BITS_P(FEATURE_SET_BITS(opt->features) & feature_jit_mask)) {
+        rb_warn("RJIT and YJIT cannot both be enabled at the same time. Exiting");
+        return Qfalse;
+    }
+
+#if USE_RJIT
+    if (FEATURE_SET_P(opt->features, rjit)) {
+        opt->rjit.on = true; // set opt->rjit.on for Init_ruby_description() and calling rb_rjit_init()
+    }
+#endif
+#if USE_YJIT
+    if (FEATURE_SET_P(opt->features, yjit)) {
+        bool rb_yjit_option_disable(void);
+        opt->yjit = !rb_yjit_option_disable(); // set opt->yjit for Init_ruby_description() and calling rb_yjit_init()
+    }
+#endif
+
+    ruby_mn_threads_params();
+    Init_ruby_description(opt);
+
+    if (opt->dump & (DUMP_BIT(version) | DUMP_BIT(version_v))) {
+        ruby_show_version();
+        if (opt->dump & DUMP_BIT(version)) return Qtrue;
+    }
+    if (opt->dump & DUMP_BIT(copyright)) {
+        ruby_show_copyright();
+        return Qtrue;
+    }
+
+    if (!opt->e_script) {
+        if (argc <= 0) {	/* no more args */
+            if (opt->verbose)
+                return Qtrue;
+            opt->script = "-";
+        }
+        else {
+            opt->script = argv[0];
+            if (!opt->script || opt->script[0] == '\0') {
+                opt->script = "-";
+            }
+            else if (opt->do_search) {
+                const char *path = getenv("RUBYPATH");
+
+                opt->script = 0;
+                if (path) {
+                    opt->script = dln_find_file_r(argv[0], path, fbuf, sizeof(fbuf));
+                }
+                if (!opt->script) {
+                    opt->script = dln_find_file_r(argv[0], getenv(PATH_ENV), fbuf, sizeof(fbuf));
+                }
+                if (!opt->script)
+                    opt->script = argv[0];
+            }
+            argc--;
+            argv++;
+        }
+        if (opt->script[0] == '-' && !opt->script[1]) {
+            forbid_setid("program input from stdin");
+        }
+    }
+
+    opt->script_name = rb_str_new_cstr(opt->script);
+    opt->script = RSTRING_PTR(opt->script_name);
+
+#ifdef _WIN32
+    translit_char_bin(RSTRING_PTR(opt->script_name), '\\', '/');
+#elif defined DOSISH
+    translit_char(RSTRING_PTR(opt->script_name), '\\', '/');
+#endif
+
+    ruby_gc_set_params();
+    ruby_init_loadpath();
+
+    Init_enc();
+    lenc = rb_locale_encoding();
+    rb_enc_associate(rb_progname, lenc);
+    rb_obj_freeze(rb_progname);
+    if (opt->ext.enc.name != 0) {
+        opt->ext.enc.index = opt_enc_index(opt->ext.enc.name);
+    }
+    if (opt->intern.enc.name != 0) {
+        opt->intern.enc.index = opt_enc_index(opt->intern.enc.name);
+    }
+    if (opt->src.enc.name != 0) {
+        opt->src.enc.index = opt_enc_index(opt->src.enc.name);
+        src_encoding_index = opt->src.enc.index;
+    }
+    if (opt->ext.enc.index >= 0) {
+        enc = rb_enc_from_index(opt->ext.enc.index);
+    }
+    else {
+        enc = IF_UTF8_PATH(uenc, lenc);
+    }
+    rb_enc_set_default_external(rb_enc_from_encoding(enc));
+    if (opt->intern.enc.index >= 0) {
+        enc = rb_enc_from_index(opt->intern.enc.index);
+        rb_enc_set_default_internal(rb_enc_from_encoding(enc));
+        opt->intern.enc.index = -1;
+#if UTF8_PATH
+        ienc = enc;
+#endif
+    }
+    rb_enc_associate(opt->script_name, IF_UTF8_PATH(uenc, lenc));
+#if UTF8_PATH
+    if (uenc != lenc) {
+        opt->script_name = str_conv_enc(opt->script_name, uenc, lenc);
+        opt->script = RSTRING_PTR(opt->script_name);
+    }
+#endif
+    rb_obj_freeze(opt->script_name);
+    if (IF_UTF8_PATH(uenc != lenc, 1)) {
+        long i;
+        VALUE load_path = vm->load_path;
+        const ID id_initial_load_path_mark = INITIAL_LOAD_PATH_MARK;
+        int modifiable = FALSE;
+
+        rb_get_expanded_load_path();
+        for (i = 0; i < RARRAY_LEN(load_path); ++i) {
+            VALUE path = RARRAY_AREF(load_path, i);
+            int mark = rb_attr_get(path, id_initial_load_path_mark) == path;
+#if UTF8_PATH
+            VALUE newpath = rb_str_conv_enc(path, uenc, lenc);
+            if (newpath == path) continue;
+            path = newpath;
+#else
+            if (!(path = copy_str(path, lenc, !mark))) continue;
+#endif
+            if (mark) rb_ivar_set(path, id_initial_load_path_mark, path);
+            if (!modifiable) {
+                rb_ary_modify(load_path);
+                modifiable = TRUE;
+            }
+            RARRAY_ASET(load_path, i, path);
+        }
+        if (modifiable) {
+            rb_ary_replace(vm->load_path_snapshot, load_path);
+        }
+    }
+    {
+        VALUE loaded_features = vm->loaded_features;
+        bool modified = false;
+        for (long i = loaded_before_enc; i < RARRAY_LEN(loaded_features); ++i) {
+            VALUE path = RARRAY_AREF(loaded_features, i);
+            if (!(path = copy_str(path, IF_UTF8_PATH(uenc, lenc), true))) continue;
+            if (!modified) {
+                rb_ary_modify(loaded_features);
+                modified = true;
+            }
+            RARRAY_ASET(loaded_features, i, path);
+        }
+        if (modified) {
+            rb_ary_replace(vm->loaded_features_snapshot, loaded_features);
+        }
+    }
+
+    if (opt->features.mask & COMPILATION_FEATURES) {
+        VALUE option = rb_hash_new();
+#define SET_COMPILE_OPTION(h, o, name) \
+        rb_hash_aset((h), ID2SYM(rb_intern_const(#name)), \
+                     RBOOL(FEATURE_SET_P(o->features, name)))
+        SET_COMPILE_OPTION(option, opt, frozen_string_literal);
+        SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
+        rb_funcallv(rb_cISeq, rb_intern_const("compile_option="), 1, &option);
+#undef SET_COMPILE_OPTION
+    }
+    ruby_set_argv(argc, argv);
+    opt->sflag = process_sflag(opt->sflag);
+
+   if (opt->e_script) {
+        rb_encoding *eenc;
+        if (opt->src.enc.index >= 0) {
+            eenc = rb_enc_from_index(opt->src.enc.index);
+        }
+        else {
+            eenc = lenc;
+#if UTF8_PATH
+            if (ienc) eenc = ienc;
+#endif
+        }
+#if UTF8_PATH
+        if (eenc != uenc) {
+            opt->e_script = str_conv_enc(opt->e_script, uenc, eenc);
+        }
+#endif
+        rb_enc_associate(opt->e_script, eenc);
+   }
+
+    if (!(*rb_ruby_prism_ptr())) {
+        if (!(ast = process_script(opt))) return Qfalse;
+    }
+    else {
+        prism_script(opt, &pm_input, &pm_options);
+    }
+    ruby_set_script_name(opt->script_name);
+    if ((dump & DUMP_BIT(yydebug)) && !(dump &= ~DUMP_BIT(yydebug))) {
+        dispose_result();
+        return Qtrue;
+    }
+
+    if (opt->ext.enc.index >= 0) {
+        enc = rb_enc_from_index(opt->ext.enc.index);
+    }
+    else {
+        enc = IF_UTF8_PATH(uenc, lenc);
+    }
+    rb_enc_set_default_external(rb_enc_from_encoding(enc));
+    if (opt->intern.enc.index >= 0) {
+        /* Set in the shebang line */
+        enc = rb_enc_from_index(opt->intern.enc.index);
+        rb_enc_set_default_internal(rb_enc_from_encoding(enc));
+    }
+    else if (!rb_default_internal_encoding())
+        /* Freeze default_internal */
+        rb_enc_set_default_internal(Qnil);
+    rb_stdio_set_default_encoding();
+
+    opt->sflag = process_sflag(opt->sflag);
+    opt->xflag = 0;
+
+    if (dump & DUMP_BIT(syntax)) {
+        printf("Syntax OK\n");
+        dump &= ~DUMP_BIT(syntax);
+        if (!dump) return Qtrue;
+    }
+
+    if (opt->do_loop) {
+        rb_define_global_function("sub", rb_f_sub, -1);
+        rb_define_global_function("gsub", rb_f_gsub, -1);
+        rb_define_global_function("chop", rb_f_chop, 0);
+        rb_define_global_function("chomp", rb_f_chomp, -1);
+    }
+
+    if (dump & (DUMP_BIT(parsetree)|DUMP_BIT(parsetree_with_comment))) {
+        VALUE tree;
+        if (ast) {
+            int comment = dump & DUMP_BIT(parsetree_with_comment);
+            tree = rb_parser_dump_tree(ast->body.root, comment);
+        }
+        else {
+            tree = prism_dump_tree(&pm_input, &pm_options);
+        }
+        rb_io_write(rb_stdout, tree);
+        rb_io_flush(rb_stdout);
+        dump &= ~DUMP_BIT(parsetree)&~DUMP_BIT(parsetree_with_comment);
+        if (!dump) {
+            dispose_result();
+            return Qtrue;
+        }
+    }
+
+    {
+        VALUE path = Qnil;
+        if (!opt->e_script && strcmp(opt->script, "-")) {
+            path = rb_realpath_internal(Qnil, opt->script_name, 1);
+#if UTF8_PATH
+            if (uenc != lenc) {
+                path = str_conv_enc(path, uenc, lenc);
+            }
+#endif
+            if (!ENCODING_GET(path)) { /* ASCII-8BIT */
+                rb_enc_copy(path, opt->script_name);
+            }
+        }
+
+        bool optimize = !(dump & DUMP_BIT(insns_without_opt));
+
+        if (!ast) {
+            iseq = rb_iseq_new_main_prism(&pm_input, &pm_options, path);
+        }
+        else {
+            rb_binding_t *toplevel_binding;
+            GetBindingPtr(rb_const_get(rb_cObject, rb_intern("TOPLEVEL_BINDING")),
+                          toplevel_binding);
+            const struct rb_block *base_block = toplevel_context(toplevel_binding);
+            iseq = rb_iseq_new_main(&ast->body, opt->script_name, path, vm_block_iseq(base_block), optimize);
+            rb_ast_dispose(ast);
+        }
+    }
+
+    if (dump & (DUMP_BIT(insns) | DUMP_BIT(insns_without_opt))) {
+        rb_io_write(rb_stdout, rb_iseq_disasm((const rb_iseq_t *)iseq));
+        rb_io_flush(rb_stdout);
+        dump &= ~DUMP_BIT(insns);
+        if (!dump) return Qtrue;
+    }
+    if (opt->dump & dump_exit_bits) return Qtrue;
+
+    if (OPT_BACKTRACE_LENGTH_LIMIT_VALID_P(opt)) {
+        rb_backtrace_length_limit = opt->backtrace_length_limit;
+    }
+
+    rb_define_readonly_boolean("$-p", opt->do_print);
+    rb_define_readonly_boolean("$-l", opt->do_line);
+    rb_define_readonly_boolean("$-a", opt->do_split);
+
+    rb_gvar_ractor_local("$-p");
+    rb_gvar_ractor_local("$-l");
+    rb_gvar_ractor_local("$-a");
+
+    if ((rb_e_script = opt->e_script) != 0) {
+        rb_str_freeze(rb_e_script);
+        rb_gc_register_mark_object(opt->e_script);
+    }
+
+    {
+        rb_execution_context_t *ec = GET_EC();
+
+        if (opt->e_script) {
+            /* -e */
+            rb_exec_event_hook_script_compiled(ec, iseq, opt->e_script);
+        }
+        else {
+            /* file */
+            rb_exec_event_hook_script_compiled(ec, iseq, Qnil);
+        }
+    }
+    return (VALUE)iseq;
+}
+
+#ifndef DOSISH
+static void
+warn_cr_in_shebang(const char *str, long len)
+{
+    if (str[len-1] == '\n' && str[len-2] == '\r') {
+        rb_warn("shebang line ending with \\r may cause problems");
+    }
+}
+#else
+#define warn_cr_in_shebang(str, len) (void)0
+#endif
+
+void rb_reset_argf_lineno(long n);
+
+struct load_file_arg {
+    VALUE parser;
+    VALUE fname;
+    int script;
+    ruby_cmdline_options_t *opt;
+    VALUE f;
+};
+
+VALUE rb_script_lines_for(VALUE path, bool add);
+
+static VALUE
+load_file_internal(VALUE argp_v)
+{
+    struct load_file_arg *argp = (struct load_file_arg *)argp_v;
+    VALUE parser = argp->parser;
+    VALUE orig_fname = argp->fname;
+    int script = argp->script;
+    ruby_cmdline_options_t *opt = argp->opt;
+    VALUE f = argp->f;
+    int line_start = 1;
+    rb_ast_t *ast = 0;
+    rb_encoding *enc;
+    ID set_encoding;
+
+    CONST_ID(set_encoding, "set_encoding");
+    if (script) {
+        VALUE c = 1;		/* something not nil */
+        VALUE line;
+        char *p, *str;
+        long len;
+        int no_src_enc = !opt->src.enc.name;
+        int no_ext_enc = !opt->ext.enc.name;
+        int no_int_enc = !opt->intern.enc.name;
+
+        enc = rb_ascii8bit_encoding();
+        rb_funcall(f, set_encoding, 1, rb_enc_from_encoding(enc));
+
+        if (opt->xflag) {
+            line_start--;
+          search_shebang:
+            while (!NIL_P(line = rb_io_gets(f))) {
+                line_start++;
+                RSTRING_GETMEM(line, str, len);
+                if (len > 2 && str[0] == '#' && str[1] == '!') {
+                    if (line_start == 1) warn_cr_in_shebang(str, len);
+                    if ((p = strstr(str+2, ruby_engine)) != 0) {
+                        goto start_read;
+                    }
+                }
+            }
+            rb_loaderror("no Ruby script found in input");
+        }
+
+        c = rb_io_getbyte(f);
+        if (c == INT2FIX('#')) {
+            c = rb_io_getbyte(f);
+            if (c == INT2FIX('!') && !NIL_P(line = rb_io_gets(f))) {
+                RSTRING_GETMEM(line, str, len);
+                warn_cr_in_shebang(str, len);
+                if ((p = strstr(str, ruby_engine)) == 0) {
+                    /* not ruby script, assume -x flag */
+                    goto search_shebang;
+                }
+
+              start_read:
+                str += len - 1;
+                if (*str == '\n') *str-- = '\0';
+                if (*str == '\r') *str-- = '\0';
+                /* ruby_engine should not contain a space */
+                if ((p = strstr(p, " -")) != 0) {
+                    opt->warning = 0;
+                    moreswitches(p + 1, opt, 0);
+                }
+
+                /* push back shebang for pragma may exist in next line */
+                rb_io_ungetbyte(f, rb_str_new2("!\n"));
+            }
+            else if (!NIL_P(c)) {
+                rb_io_ungetbyte(f, c);
+            }
+            rb_io_ungetbyte(f, INT2FIX('#'));
+            if (no_src_enc && opt->src.enc.name) {
+                opt->src.enc.index = opt_enc_index(opt->src.enc.name);
+                src_encoding_index = opt->src.enc.index;
+            }
+            if (no_ext_enc && opt->ext.enc.name) {
+                opt->ext.enc.index = opt_enc_index(opt->ext.enc.name);
+            }
+            if (no_int_enc && opt->intern.enc.name) {
+                opt->intern.enc.index = opt_enc_index(opt->intern.enc.name);
+            }
+        }
+        else if (!NIL_P(c)) {
+            rb_io_ungetbyte(f, c);
+        }
+        if (NIL_P(c)) {
+            argp->f = f = Qnil;
+        }
+        rb_reset_argf_lineno(0);
+        ruby_opt_init(opt);
+    }
+    if (opt->src.enc.index >= 0) {
+        enc = rb_enc_from_index(opt->src.enc.index);
+    }
+    else if (f == rb_stdin) {
+        enc = rb_locale_encoding();
+    }
+    else {
+        enc = rb_utf8_encoding();
+    }
+    rb_parser_set_options(parser, opt->do_print, opt->do_loop,
+                          opt->do_line, opt->do_split);
+
+    VALUE lines = rb_script_lines_for(orig_fname, true);
+    if (!NIL_P(lines)) {
+        rb_parser_set_script_lines(parser, lines);
+    }
+
+    if (NIL_P(f)) {
+        f = rb_str_new(0, 0);
+        rb_enc_associate(f, enc);
+        return (VALUE)rb_parser_compile_string_path(parser, orig_fname, f, line_start);
+    }
+    rb_funcall(f, set_encoding, 2, rb_enc_from_encoding(enc), rb_str_new_cstr("-"));
+    ast = rb_parser_compile_file_path(parser, orig_fname, f, line_start);
+    rb_funcall(f, set_encoding, 1, rb_parser_encoding(parser));
+    if (script && rb_parser_end_seen_p(parser)) {
+        /*
+         * DATA is a File that contains the data section of the executed file.
+         * To create a data section use <tt>__END__</tt>:
+         *
+         *   $ cat t.rb
+         *   puts DATA.gets
+         *   __END__
+         *   hello world!
+         *
+         *   $ ruby t.rb
+         *   hello world!
+         */
+        rb_define_global_const("DATA", f);
+        argp->f = Qnil;
+    }
+    return (VALUE)ast;
+}
+
+/* disabling O_NONBLOCK, and returns 0 on success, otherwise errno */
+static inline int
+disable_nonblock(int fd)
+{
+#if defined(HAVE_FCNTL) && defined(F_SETFL)
+    if (fcntl(fd, F_SETFL, 0) < 0) {
+        const int e = errno;
+        ASSUME(e != 0);
+# if defined ENOTSUP
+        if (e == ENOTSUP) return 0;
+# endif
+# if defined B_UNSUPPORTED
+        if (e == B_UNSUPPORTED) return 0;
+# endif
+        return e;
+    }
+#endif
+    return 0;
+}
+
+static VALUE
+open_load_file(VALUE fname_v, int *xflag)
+{
+    const char *fname = (fname_v = rb_str_encode_ospath(fname_v),
+                         StringValueCStr(fname_v));
+    long flen = RSTRING_LEN(fname_v);
+    VALUE f;
+    int e;
+
+    if (flen == 1 && fname[0] == '-') {
+        f = rb_stdin;
+    }
+    else {
+        int fd;
+        /* open(2) may block if fname is point to FIFO and it's empty. Let's
+           use O_NONBLOCK. */
+        const int MODE_TO_LOAD = O_RDONLY | (
+#if defined O_NONBLOCK && HAVE_FCNTL
+        /* TODO: fix conflicting O_NONBLOCK in ruby/win32.h */
+            !(O_NONBLOCK & O_ACCMODE) ? O_NONBLOCK :
+#endif
+#if defined O_NDELAY && HAVE_FCNTL
+            !(O_NDELAY & O_ACCMODE) ? O_NDELAY :
+#endif
+            0);
+        int mode = MODE_TO_LOAD;
+#if defined DOSISH || defined __CYGWIN__
+# define isdirsep(x) ((x) == '/' || (x) == '\\')
+        {
+            static const char exeext[] = ".exe";
+            enum {extlen = sizeof(exeext)-1};
+            if (flen > extlen && !isdirsep(fname[flen-extlen-1]) &&
+                STRNCASECMP(fname+flen-extlen, exeext, extlen) == 0) {
+                mode |= O_BINARY;
+                *xflag = 1;
+            }
+        }
+#endif
+
+        if ((fd = rb_cloexec_open(fname, mode, 0)) < 0) {
+            e = errno;
+            if (!rb_gc_for_fd(e)) {
+                rb_load_fail(fname_v, strerror(e));
+            }
+            if ((fd = rb_cloexec_open(fname, mode, 0)) < 0) {
+                rb_load_fail(fname_v, strerror(errno));
+            }
+        }
+        rb_update_max_fd(fd);
+
+        if (MODE_TO_LOAD != O_RDONLY && (e = disable_nonblock(fd)) != 0) {
+            (void)close(fd);
+            rb_load_fail(fname_v, strerror(e));
+        }
+
+        e = ruby_is_fd_loadable(fd);
+        if (!e) {
+            e = errno;
+            (void)close(fd);
+            rb_load_fail(fname_v, strerror(e));
+        }
+
+        f = rb_io_fdopen(fd, mode, fname);
+        if (e < 0) {
+            /*
+              We need to wait if FIFO is empty. It's FIFO's semantics.
+              rb_thread_wait_fd() release GVL. So, it's safe.
+            */
+            rb_io_wait(f, RB_INT2NUM(RUBY_IO_READABLE), Qnil);
+        }
+    }
+    return f;
+}
+
+static VALUE
+restore_load_file(VALUE arg)
+{
+    struct load_file_arg *argp = (struct load_file_arg *)arg;
+    VALUE f = argp->f;
+
+    if (!NIL_P(f) && f != rb_stdin) {
+        rb_io_close(f);
+    }
+    return Qnil;
+}
+
+static rb_ast_t *
+load_file(VALUE parser, VALUE fname, VALUE f, int script, ruby_cmdline_options_t *opt)
+{
+    struct load_file_arg arg;
+    arg.parser = parser;
+    arg.fname = fname;
+    arg.script = script;
+    arg.opt = opt;
+    arg.f = f;
+    return (rb_ast_t *)rb_ensure(load_file_internal, (VALUE)&arg,
+                              restore_load_file, (VALUE)&arg);
+}
+
+void *
+rb_load_file(const char *fname)
+{
+    VALUE fname_v = rb_str_new_cstr(fname);
+    return rb_load_file_str(fname_v);
+}
+
+void *
+rb_load_file_str(VALUE fname_v)
+{
+    return rb_parser_load_file(rb_parser_new(), fname_v);
+}
+
+void *
+rb_parser_load_file(VALUE parser, VALUE fname_v)
+{
+    ruby_cmdline_options_t opt;
+    int xflag = 0;
+    VALUE f = open_load_file(fname_v, &xflag);
+    cmdline_options_init(&opt)->xflag = xflag != 0;
+    return load_file(parser, fname_v, f, 0, &opt);
+}
+
+/*
+ *  call-seq:
+ *     Process.argv0  -> frozen_string
+ *
+ *  Returns the name of the script being executed.  The value is not
+ *  affected by assigning a new value to $0.
+ *
+ *  This method first appeared in Ruby 2.1 to serve as a global
+ *  variable free means to get the script name.
+ */
+
+static VALUE
+proc_argv0(VALUE process)
+{
+    return rb_orig_progname;
+}
+
+static VALUE ruby_setproctitle(VALUE title);
+
+/*
+ *  call-seq:
+ *     Process.setproctitle(string)  -> string
+ *
+ *  Sets the process title that appears on the ps(1) command.  Not
+ *  necessarily effective on all platforms.  No exception will be
+ *  raised regardless of the result, nor will NotImplementedError be
+ *  raised even if the platform does not support the feature.
+ *
+ *  Calling this method does not affect the value of $0.
+ *
+ *     Process.setproctitle('myapp: worker #%d' % worker_id)
+ *
+ *  This method first appeared in Ruby 2.1 to serve as a global
+ *  variable free means to change the process title.
+ */
+
+static VALUE
+proc_setproctitle(VALUE process, VALUE title)
+{
+    return ruby_setproctitle(title);
+}
+
+static VALUE
+ruby_setproctitle(VALUE title)
+{
+    const char *ptr = StringValueCStr(title);
+    setproctitle("%.*s", RSTRING_LENINT(title), ptr);
+    return title;
+}
+
+static void
+set_arg0(VALUE val, ID id, VALUE *_)
+{
+    if (origarg.argv == 0)
+        rb_raise(rb_eRuntimeError, "$0 not initialized");
+
+    rb_progname = rb_str_new_frozen(ruby_setproctitle(val));
+}
+
+static inline VALUE
+external_str_new_cstr(const char *p)
+{
+#if UTF8_PATH
+    VALUE str = rb_utf8_str_new_cstr(p);
+    str = str_conv_enc(str, NULL, rb_default_external_encoding());
+    return str;
+#else
+    return rb_external_str_new_cstr(p);
+#endif
+}
+
+static void
+set_progname(VALUE name)
+{
+    rb_orig_progname = rb_progname = name;
+    rb_vm_set_progname(rb_progname);
+}
+
+void
+ruby_script(const char *name)
+{
+    if (name) {
+        set_progname(rb_str_freeze(external_str_new_cstr(name)));
+    }
+}
+
+/*! Sets the current script name to this value.
+ *
+ * Same as ruby_script() but accepts a VALUE.
+ */
+void
+ruby_set_script_name(VALUE name)
+{
+    set_progname(rb_str_new_frozen(name));
+}
+
+static void
+init_ids(ruby_cmdline_options_t *opt)
+{
+    rb_uid_t uid = getuid();
+    rb_uid_t euid = geteuid();
+    rb_gid_t gid = getgid();
+    rb_gid_t egid = getegid();
+
+    if (uid != euid) opt->setids |= 1;
+    if (egid != gid) opt->setids |= 2;
+}
+
+#undef forbid_setid
+static void
+forbid_setid(const char *s, const ruby_cmdline_options_t *opt)
+{
+    if (opt->setids & 1)
+        rb_raise(rb_eSecurityError, "no %s allowed while running setuid", s);
+    if (opt->setids & 2)
+        rb_raise(rb_eSecurityError, "no %s allowed while running setgid", s);
+}
+
+static VALUE
+verbose_getter(ID id, VALUE *ptr)
+{
+    return *rb_ruby_verbose_ptr();
+}
+
+static void
+verbose_setter(VALUE val, ID id, VALUE *variable)
+{
+    *rb_ruby_verbose_ptr() = RTEST(val) ? Qtrue : val;
+}
+
+static VALUE
+opt_W_getter(ID id, VALUE *dmy)
+{
+    VALUE v = *rb_ruby_verbose_ptr();
+
+    switch (v) {
+      case Qnil:
+        return INT2FIX(0);
+      case Qfalse:
+        return INT2FIX(1);
+      case Qtrue:
+        return INT2FIX(2);
+      default:
+        return Qnil;
+    }
+}
+
+static VALUE
+debug_getter(ID id, VALUE *dmy)
+{
+    return *rb_ruby_debug_ptr();
+}
+
+static void
+debug_setter(VALUE val, ID id, VALUE *dmy)
+{
+    *rb_ruby_debug_ptr() = val;
+}
+
+void
+ruby_prog_init(void)
+{
+    rb_define_virtual_variable("$VERBOSE", verbose_getter, verbose_setter);
+    rb_define_virtual_variable("$-v",      verbose_getter, verbose_setter);
+    rb_define_virtual_variable("$-w",      verbose_getter, verbose_setter);
+    rb_define_virtual_variable("$-W",      opt_W_getter,   rb_gvar_readonly_setter);
+    rb_define_virtual_variable("$DEBUG",   debug_getter,   debug_setter);
+    rb_define_virtual_variable("$-d",      debug_getter,   debug_setter);
+
+    rb_gvar_ractor_local("$VERBOSE");
+    rb_gvar_ractor_local("$-v");
+    rb_gvar_ractor_local("$-w");
+    rb_gvar_ractor_local("$-W");
+    rb_gvar_ractor_local("$DEBUG");
+    rb_gvar_ractor_local("$-d");
+
+    rb_define_hooked_variable("$0", &rb_progname, 0, set_arg0);
+    rb_define_hooked_variable("$PROGRAM_NAME", &rb_progname, 0, set_arg0);
+
+    rb_define_module_function(rb_mProcess, "argv0", proc_argv0, 0);
+    rb_define_module_function(rb_mProcess, "setproctitle", proc_setproctitle, 1);
+
+    /*
+     * ARGV contains the command line arguments used to run ruby.
+     *
+     * A library like OptionParser can be used to process command-line
+     * arguments.
+     */
+    rb_define_global_const("ARGV", rb_argv);
+}
+
+void
+ruby_set_argv(int argc, char **argv)
+{
+    int i;
+    VALUE av = rb_argv;
+
+    rb_ary_clear(av);
+    for (i = 0; i < argc; i++) {
+        VALUE arg = external_str_new_cstr(argv[i]);
+
+        OBJ_FREEZE(arg);
+        rb_ary_push(av, arg);
+    }
+}
+
+void *
+ruby_process_options(int argc, char **argv)
+{
+    ruby_cmdline_options_t opt;
+    VALUE iseq;
+    const char *script_name = (argc > 0 && argv[0]) ? argv[0] : ruby_engine;
+
+    (*rb_ruby_prism_ptr()) = false;
+
+    if (!origarg.argv || origarg.argc <= 0) {
+        origarg.argc = argc;
+        origarg.argv = argv;
+    }
+    set_progname(external_str_new_cstr(script_name));  /* for the time being */
+    rb_argv0 = rb_str_new4(rb_progname);
+    rb_gc_register_mark_object(rb_argv0);
+
+#ifndef HAVE_SETPROCTITLE
+    ruby_init_setproctitle(argc, argv);
+#endif
+
+    iseq = process_options(argc, argv, cmdline_options_init(&opt));
+
+    if (opt.crash_report && *opt.crash_report) {
+        void ruby_set_crash_report(const char *template);
+        ruby_set_crash_report(opt.crash_report);
+    }
+    return (void*)(struct RData*)iseq;
+}
+
+static void
+fill_standard_fds(void)
+{
+    int f0, f1, f2, fds[2];
+    struct stat buf;
+    f0 = fstat(0, &buf) == -1 && errno == EBADF;
+    f1 = fstat(1, &buf) == -1 && errno == EBADF;
+    f2 = fstat(2, &buf) == -1 && errno == EBADF;
+    if (f0) {
+        if (pipe(fds) == 0) {
+            close(fds[1]);
+            if (fds[0] != 0) {
+                dup2(fds[0], 0);
+                close(fds[0]);
+            }
+        }
+    }
+    if (f1 || f2) {
+        if (pipe(fds) == 0) {
+            close(fds[0]);
+            if (f1 && fds[1] != 1)
+                dup2(fds[1], 1);
+            if (f2 && fds[1] != 2)
+                dup2(fds[1], 2);
+            if (fds[1] != 1 && fds[1] != 2)
+                close(fds[1]);
+        }
+    }
+}
+
+void
+ruby_sysinit(int *argc, char ***argv)
+{
+#if defined(_WIN32)
+    rb_w32_sysinit(argc, argv);
+#endif
+    if (*argc >= 0 && *argv) {
+        origarg.argc = *argc;
+        origarg.argv = *argv;
+    }
+    fill_standard_fds();
+}
diff -Nuarp ruby-3.3.3.a/spec/ruby/core/kernel/require_spec.rb ruby-3.3.3.b/spec/ruby/core/kernel/require_spec.rb
--- ruby-3.3.3.a/spec/ruby/core/kernel/require_spec.rb	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/spec/ruby/core/kernel/require_spec.rb	2024-07-15 21:17:29.937784306 -0400
@@ -25,6 +25,8 @@ describe "Kernel#require" do
     out = ruby_exe("puts $LOADED_FEATURES", options: '--disable-gems --disable-did-you-mean')
     features = out.lines.map { |line| File.basename(line.chomp, '.*') }
 
+    # Ignore ABRT
+    features -= %w[abrt]
     # Ignore CRuby internals
     features -= %w[encdb transdb windows_1252]
     features.reject! { |feature| feature.end_with?('-fake') }
diff -Nuarp ruby-3.3.3.a/template/ruby.pc.in ruby-3.3.3.b/template/ruby.pc.in
--- ruby-3.3.3.a/template/ruby.pc.in	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/template/ruby.pc.in	2024-07-15 21:17:10.687472111 -0400
@@ -2,6 +2,7 @@ MAJOR=@MAJOR@
 MINOR=@MINOR@
 TEENY=@TEENY@
 ruby_version=@ruby_version@
+ruby_version_dir_name=@ruby_version_dir_name@
 RUBY_API_VERSION=@RUBY_API_VERSION@
 RUBY_PROGRAM_VERSION=@RUBY_PROGRAM_VERSION@
 arch=@arch@
diff -Nuarp ruby-3.3.3.a/template/verconf.h.tmpl ruby-3.3.3.b/template/verconf.h.tmpl
--- ruby-3.3.3.a/template/verconf.h.tmpl	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/template/verconf.h.tmpl	2024-07-15 21:17:26.153919501 -0400
@@ -36,6 +36,9 @@
 % if C["RUBY_SEARCH_PATH"]
 #define RUBY_SEARCH_PATH		"${RUBY_SEARCH_PATH}"
 % end
+% if C["rubygemsdir"]
+#define RUBYGEMS_DIR			"${rubygemsdir}"
+% end
 %
 % R = {}
 % R["ruby_version"] = '"RUBY_LIB_VERSION"'
diff -Nuarp ruby-3.3.3.a/test/rubygems/test_gem.rb ruby-3.3.3.b/test/rubygems/test_gem.rb
--- ruby-3.3.3.a/test/rubygems/test_gem.rb	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/test/rubygems/test_gem.rb	2024-07-15 21:17:10.688472075 -0400
@@ -1353,7 +1353,8 @@ class TestGem < Gem::TestCase
 
   def test_self_user_dir
     parts = [@userhome, ".gem", Gem.ruby_engine]
-    parts << RbConfig::CONFIG["ruby_version"] unless RbConfig::CONFIG["ruby_version"].empty?
+    ruby_version_dir_name = RbConfig::CONFIG["ruby_version_dir_name"] || RbConfig::CONFIG["ruby_version"]
+    parts << ruby_version_dir_name unless ruby_version_dir_name.empty?
 
     FileUtils.mkdir_p File.join(parts)
 
@@ -1429,7 +1430,7 @@ class TestGem < Gem::TestCase
     vendordir(File.join(@tempdir, "vendor")) do
       expected =
         File.join RbConfig::CONFIG["vendordir"], "gems",
-                  RbConfig::CONFIG["ruby_version"]
+                  RbConfig::CONFIG["ruby_version_dir_name"] || RbConfig::CONFIG["ruby_version"]
 
       assert_equal expected, Gem.vendor_dir
     end
diff -Nuarp ruby-3.3.3.a/test/rubygems/test_gem.rb.orig ruby-3.3.3.b/test/rubygems/test_gem.rb.orig
--- ruby-3.3.3.a/test/rubygems/test_gem.rb.orig	1969-12-31 19:00:00.000000000 -0500
+++ ruby-3.3.3.b/test/rubygems/test_gem.rb.orig	2024-07-15 21:16:23.232167666 -0400
@@ -0,0 +1,1801 @@
+# coding: US-ASCII
+
+require_relative "helper"
+require "rubygems"
+require "rubygems/command"
+require "rubygems/installer"
+require "pathname"
+require "tmpdir"
+require "rbconfig"
+
+class TestGem < Gem::TestCase
+  PLUGINS_LOADED = [] # rubocop:disable Style/MutableConstant
+
+  PROJECT_DIR = File.expand_path("../..", __dir__)
+
+  def setup
+    super
+
+    PLUGINS_LOADED.clear
+
+    common_installer_setup
+
+    @additional = %w[a b].map {|d| File.join @tempdir, d }
+
+    util_remove_interrupt_command
+  end
+
+  def test_self_finish_resolve
+    a1 = util_spec "a", "1", "b" => "> 0"
+    b1 = util_spec "b", "1", "c" => ">= 1"
+    b2 = util_spec "b", "2", "c" => ">= 2"
+    c1 = util_spec "c", "1"
+    c2 = util_spec "c", "2"
+
+    install_specs c1, c2, b1, b2, a1
+
+    a1.activate
+
+    assert_equal %w[a-1], loaded_spec_names
+    assert_equal ["b (> 0)"], unresolved_names
+
+    Gem.finish_resolve
+
+    assert_equal %w[a-1 b-2 c-2], loaded_spec_names
+    assert_equal [], unresolved_names
+  end
+
+  def test_self_finish_resolve_wtf
+    a1 = util_spec "a", "1", "b" => "> 0", "d" => "> 0"    # this
+    b1 = util_spec "b", "1", { "c" => ">= 1" }, "lib/b.rb" # this
+    b2 = util_spec "b", "2", { "c" => ">= 2" }, "lib/b.rb"
+    c1 = util_spec "c", "1"                                # this
+    c2 = util_spec "c", "2"
+    d1 = util_spec "d", "1", { "c" => "< 2" },  "lib/d.rb"
+    d2 = util_spec "d", "2", { "c" => "< 2" },  "lib/d.rb" # this
+
+    install_specs c1, c2, b1, b2, d1, d2, a1
+
+    a1.activate
+
+    assert_equal %w[a-1], loaded_spec_names
+    assert_equal ["b (> 0)", "d (> 0)"], unresolved_names
+
+    Gem.finish_resolve
+
+    assert_equal %w[a-1 b-1 c-1 d-2], loaded_spec_names
+    assert_equal [], unresolved_names
+  end
+
+  def test_self_finish_resolve_respects_loaded_specs
+    a1 = util_spec "a", "1", "b" => "> 0"
+    b1 = util_spec "b", "1", "c" => ">= 1"
+    b2 = util_spec "b", "2", "c" => ">= 2"
+    c1 = util_spec "c", "1"
+    c2 = util_spec "c", "2"
+
+    install_specs c1, c2, b1, b2, a1
+
+    a1.activate
+    c1.activate
+
+    assert_equal %w[a-1 c-1], loaded_spec_names
+    assert_equal ["b (> 0)"], unresolved_names
+
+    Gem.finish_resolve
+
+    assert_equal %w[a-1 b-1 c-1], loaded_spec_names
+    assert_equal [], unresolved_names
+  end
+
+  def test_self_install
+    spec_fetcher do |f|
+      f.gem  "a", 1
+      f.spec "a", 2
+    end
+
+    gemhome2 = "#{@gemhome}2"
+
+    installed = Gem.install "a", "= 1", install_dir: gemhome2
+
+    assert_equal %w[a-1], installed.map(&:full_name)
+
+    assert_path_exist File.join(gemhome2, "gems", "a-1")
+  end
+
+  def test_self_install_in_rescue
+    spec_fetcher do |f|
+      f.gem  "a", 1
+      f.spec "a", 2
+    end
+
+    gemhome2 = "#{@gemhome}2"
+
+    installed =
+      begin
+        raise "Error"
+      rescue StandardError
+        Gem.install "a", "= 1", install_dir: gemhome2
+      end
+    assert_equal %w[a-1], installed.map(&:full_name)
+  end
+
+  def test_self_install_permissions
+    assert_self_install_permissions
+  end
+
+  def test_self_install_permissions_umask_0
+    umask = File.umask(0)
+    assert_self_install_permissions
+  ensure
+    File.umask(umask)
+  end
+
+  def test_self_install_permissions_umask_077
+    umask = File.umask(0o077)
+    assert_self_install_permissions(data_mode: 0o600)
+  ensure
+    File.umask(umask)
+  end
+
+  def test_self_install_permissions_with_format_executable
+    assert_self_install_permissions(format_executable: true)
+  end
+
+  def test_self_install_permissions_with_format_executable_and_non_standard_ruby_install_name
+    Gem::Installer.exec_format = nil
+    ruby_install_name "ruby27" do
+      assert_self_install_permissions(format_executable: true)
+    end
+  ensure
+    Gem::Installer.exec_format = nil
+  end
+
+  def assert_self_install_permissions(format_executable: false, data_mode: 0o640)
+    mask = Gem.win_platform? ? 0o700 : 0o777
+    options = {
+      dir_mode: 0o500,
+      prog_mode: Gem.win_platform? ? 0o410 : 0o510,
+      data_mode: data_mode,
+      wrappers: true,
+      format_executable: format_executable,
+    }
+    Dir.chdir @tempdir do
+      Dir.mkdir "bin"
+      Dir.mkdir "data"
+
+      File.write "bin/foo", "#!/usr/bin/env ruby\n"
+      File.chmod 0o755, "bin/foo"
+
+      File.write "data/foo.txt", "blah\n"
+
+      spec_fetcher do |f|
+        f.gem "foo", 1 do |s|
+          s.executables = ["foo"]
+          s.files = %w[bin/foo data/foo.txt]
+        end
+      end
+      Gem.install "foo", Gem::Requirement.default, options
+    end
+
+    prog_mode = (options[:prog_mode] & mask).to_s(8)
+    dir_mode = (options[:dir_mode] & mask).to_s(8)
+    data_mode = (options[:data_mode] & mask).to_s(8)
+    prog_name = "foo"
+    prog_name = RbConfig::CONFIG["ruby_install_name"].sub("ruby", "foo") if options[:format_executable]
+    expected = {
+      "bin/#{prog_name}" => prog_mode,
+      "gems/foo-1" => dir_mode,
+      "gems/foo-1/bin" => dir_mode,
+      "gems/foo-1/data" => dir_mode,
+      "gems/foo-1/bin/foo" => prog_mode,
+      "gems/foo-1/data/foo.txt" => data_mode,
+    }
+    # add Windows script
+    expected["bin/#{prog_name}.bat"] = mask.to_s(8) if Gem.win_platform?
+    result = {}
+    Dir.chdir @gemhome do
+      expected.each_key do |n|
+        result[n] = (File.stat(n).mode & mask).to_s(8)
+      end
+    end
+    assert_equal(expected, result)
+  ensure
+    File.chmod(0o755, *Dir.glob(@gemhome + "/gems/**/"))
+  end
+
+  def test_require_missing
+    assert_raise ::LoadError do
+      require "test_require_missing"
+    end
+  end
+
+  def test_require_does_not_glob
+    a1 = util_spec "a", "1", nil, "lib/a1.rb"
+
+    install_specs a1
+
+    assert_raise ::LoadError do
+      require "a*"
+    end
+
+    assert_equal [], loaded_spec_names
+  end
+
+  def test_self_bin_path_active
+    a1 = util_spec "a", "1" do |s|
+      s.executables = ["exec"]
+    end
+
+    util_spec "a", "2" do |s|
+      s.executables = ["exec"]
+    end
+
+    a1.activate
+
+    assert_match "a-1/bin/exec", Gem.bin_path("a", "exec", ">= 0")
+  end
+
+  def test_self_bin_path_picking_newest
+    a1 = util_spec "a", "1" do |s|
+      s.executables = ["exec"]
+    end
+
+    a2 = util_spec "a", "2" do |s|
+      s.executables = ["exec"]
+    end
+
+    install_specs a1, a2
+
+    assert_match "a-2/bin/exec", Gem.bin_path("a", "exec", ">= 0")
+  end
+
+  def test_self_activate_bin_path_no_exec_name
+    e = assert_raise ArgumentError do
+      Gem.activate_bin_path "a"
+    end
+
+    assert_equal "you must supply exec_name", e.message
+  end
+
+  def test_activate_bin_path_resolves_eagerly
+    a1 = util_spec "a", "1" do |s|
+      s.executables = ["exec"]
+      s.add_dependency "b"
+    end
+
+    b1 = util_spec "b", "1" do |s|
+      s.add_dependency "c", "2"
+    end
+
+    b2 = util_spec "b", "2" do |s|
+      s.add_dependency "c", "1"
+    end
+
+    c1 = util_spec "c", "1"
+    c2 = util_spec "c", "2"
+
+    install_specs c1, c2, b1, b2, a1
+
+    Gem.activate_bin_path("a", "exec", ">= 0")
+
+    # If we didn't eagerly resolve, this would activate c-2 and then the
+    # finish_resolve would cause a conflict
+    gem "c"
+    Gem.finish_resolve
+
+    assert_equal %w[a-1 b-2 c-1], loaded_spec_names
+  end
+
+  def test_activate_bin_path_does_not_error_if_a_gem_thats_not_finally_activated_has_orphaned_dependencies
+    a1 = util_spec "a", "1" do |s|
+      s.executables = ["exec"]
+      s.add_dependency "b"
+    end
+
+    b1 = util_spec "b", "1" do |s|
+      s.add_dependency "c", "1"
+    end
+
+    b2 = util_spec "b", "2" do |s|
+      s.add_dependency "c", "2"
+    end
+
+    c2 = util_spec "c", "2"
+
+    install_specs c2, b1, b2, a1
+
+    # c1 is missing, but not needed for activation, so we should not get any errors here
+
+    Gem.activate_bin_path("a", "exec", ">= 0")
+
+    assert_equal %w[a-1 b-2 c-2], loaded_spec_names
+  end
+
+  def test_activate_bin_path_raises_a_meaningful_error_if_a_gem_thats_finally_activated_has_orphaned_dependencies
+    a1 = util_spec "a", "1" do |s|
+      s.executables = ["exec"]
+      s.add_dependency "b"
+    end
+
+    b1 = util_spec "b", "1" do |s|
+      s.add_dependency "c", "1"
+    end
+
+    b2 = util_spec "b", "2" do |s|
+      s.add_dependency "c", "2"
+    end
+
+    c1 = util_spec "c", "1"
+
+    install_specs c1, b1, b2, a1
+
+    # c2 is missing, and b2 which has it as a dependency will be activated, so we should get an error about the orphaned dependency
+
+    e = assert_raise Gem::UnsatisfiableDependencyError do
+      load Gem.activate_bin_path("a", "exec", ">= 0")
+    end
+
+    assert_equal "Unable to resolve dependency: 'b (>= 0)' requires 'c (= 2)'", e.message
+  end
+
+  def test_activate_bin_path_in_debug_mode
+    a1 = util_spec "a", "1" do |s|
+      s.executables = ["exec"]
+    end
+
+    install_specs a1
+
+    require "open3"
+    output, status = Open3.capture2e(
+      { "GEM_HOME" => Gem.paths.home, "DEBUG_RESOLVER" => "1" },
+      *ruby_with_rubygems_in_load_path, "-e", "\"Gem.activate_bin_path('a', 'exec', '>= 0')\""
+    )
+
+    assert status.success?, output
+  end
+
+  def test_activate_bin_path_selects_exact_bundler_version_if_present
+    bundler_latest = util_spec "bundler", "2.0.1" do |s|
+      s.executables = ["bundle"]
+    end
+
+    bundler_previous = util_spec "bundler", "2.0.0" do |s|
+      s.executables = ["bundle"]
+    end
+
+    install_specs bundler_latest, bundler_previous
+
+    File.open("Gemfile.lock", "w") do |f|
+      f.write <<~L
+        GEM
+          remote: https://rubygems.org/
+          specs:
+
+        PLATFORMS
+          ruby
+
+        DEPENDENCIES
+
+        BUNDLED WITH
+          2.0.0
+      L
+    end
+
+    File.open("Gemfile", "w") {|f| f.puts('source "https://rubygems.org"') }
+
+    load Gem.activate_bin_path("bundler", "bundle", ">= 0.a")
+
+    assert_equal %w[bundler-2.0.0], loaded_spec_names
+  end
+
+  def test_activate_bin_path_respects_underscore_selection_if_given
+    bundler_latest = util_spec "bundler", "2.0.1" do |s|
+      s.executables = ["bundle"]
+    end
+
+    bundler_previous = util_spec "bundler", "1.17.3" do |s|
+      s.executables = ["bundle"]
+    end
+
+    install_specs bundler_latest, bundler_previous
+
+    File.open("Gemfile.lock", "w") do |f|
+      f.write <<~L
+        GEM
+          remote: https://rubygems.org/
+          specs:
+
+        PLATFORMS
+          ruby
+
+        DEPENDENCIES
+
+        BUNDLED WITH
+          2.0.1
+      L
+    end
+
+    File.open("Gemfile", "w") {|f| f.puts('source "https://rubygems.org"') }
+
+    load Gem.activate_bin_path("bundler", "bundle", "= 1.17.3")
+
+    assert_equal %w[bundler-1.17.3], loaded_spec_names
+  end
+
+  def test_activate_bin_path_gives_proper_error_for_bundler_when_underscore_selection_given
+    File.open("Gemfile.lock", "w") do |f|
+      f.write <<~L
+        GEM
+          remote: https://rubygems.org/
+          specs:
+
+        PLATFORMS
+          ruby
+
+        DEPENDENCIES
+
+        BUNDLED WITH
+          2.1.4
+      L
+    end
+
+    File.open("Gemfile", "w") {|f| f.puts('source "https://rubygems.org"') }
+
+    e = assert_raise Gem::GemNotFoundException do
+      load Gem.activate_bin_path("bundler", "bundle", "= 2.2.8")
+    end
+
+    assert_equal "can't find gem bundler (= 2.2.8) with executable bundle", e.message
+  end
+
+  def test_self_bin_path_no_exec_name
+    e = assert_raise ArgumentError do
+      Gem.bin_path "a"
+    end
+
+    assert_equal "you must supply exec_name", e.message
+  end
+
+  def test_self_bin_path_bin_name
+    install_specs util_exec_gem
+    assert_equal @abin_path, Gem.bin_path("a", "abin")
+  end
+
+  def test_self_bin_path_bin_name_version
+    install_specs util_exec_gem
+    assert_equal @abin_path, Gem.bin_path("a", "abin", "4")
+  end
+
+  def test_self_bin_path_nonexistent_binfile
+    util_spec "a", "2" do |s|
+      s.executables = ["exec"]
+    end
+    assert_raise(Gem::GemNotFoundException) do
+      Gem.bin_path("a", "other", "2")
+    end
+  end
+
+  def test_self_bin_path_no_bin_file
+    util_spec "a", "1"
+    assert_raise(ArgumentError) do
+      Gem.bin_path("a", nil, "1")
+    end
+  end
+
+  def test_self_bin_path_not_found
+    assert_raise(Gem::GemNotFoundException) do
+      Gem.bin_path("non-existent", "blah")
+    end
+  end
+
+  def test_self_bin_path_bin_file_gone_in_latest
+    install_specs util_exec_gem
+    spec = util_spec "a", "10" do |s|
+      s.executables = []
+    end
+    install_specs spec
+    assert_equal @abin_path, Gem.bin_path("a", "abin")
+  end
+
+  def test_self_bindir
+    assert_equal File.join(@gemhome, "bin"), Gem.bindir
+    assert_equal File.join(@gemhome, "bin"), Gem.bindir(Gem.dir)
+    assert_equal File.join(@gemhome, "bin"), Gem.bindir(Pathname.new(Gem.dir))
+  end
+
+  def test_self_bindir_default_dir
+    default = Gem.default_dir
+
+    assert_equal Gem.default_bindir, Gem.bindir(default)
+  end
+
+  def test_self_clear_paths
+    assert_match(/gemhome$/, Gem.dir)
+    assert_match(/gemhome$/, Gem.path.first)
+
+    Gem.clear_paths
+
+    with_env("GEM_HOME" => "foo", "GEM_PATH" => "bar") do
+      assert_equal("foo", Gem.dir)
+      assert_equal("bar", Gem.path.first)
+    end
+  end
+
+  def test_self_configuration
+    expected = Gem::ConfigFile.new []
+    Gem.configuration = nil
+
+    assert_equal expected, Gem.configuration
+  end
+
+  def test_self_datadir
+    foo = nil
+
+    Dir.chdir @tempdir do
+      FileUtils.mkdir_p "data"
+      File.open File.join("data", "foo.txt"), "w" do |fp|
+        fp.puts "blah"
+      end
+
+      foo = util_spec "foo" do |s|
+        s.files = %w[data/foo.txt]
+      end
+
+      install_gem foo
+    end
+
+    gem "foo"
+
+    expected = File.join @gemhome, "gems", foo.full_name, "data", "foo"
+
+    assert_equal expected, Gem::Specification.find_by_name("foo").datadir
+  end
+
+  def test_self_datadir_nonexistent_package
+    assert_raise(Gem::MissingSpecError) do
+      Gem::Specification.find_by_name("xyzzy").datadir
+    end
+  end
+
+  def test_self_default_exec_format
+    ruby_install_name "ruby" do
+      assert_equal "%s", Gem.default_exec_format
+    end
+  end
+
+  def test_self_default_exec_format_18
+    ruby_install_name "ruby18" do
+      assert_equal "%s18", Gem.default_exec_format
+    end
+  end
+
+  def test_self_default_exec_format_jruby
+    ruby_install_name "jruby" do
+      assert_equal "j%s", Gem.default_exec_format
+    end
+  end
+
+  def test_default_path
+    vendordir(File.join(@tempdir, "vendor")) do
+      FileUtils.rm_rf Gem.user_home
+
+      expected = [Gem.default_dir]
+
+      assert_equal expected, Gem.default_path
+    end
+  end
+
+  def test_default_path_missing_vendor
+    vendordir(nil) do
+      FileUtils.rm_rf Gem.user_home
+
+      expected = [Gem.default_dir]
+
+      assert_equal expected, Gem.default_path
+    end
+  end
+
+  def test_default_path_user_home
+    vendordir(File.join(@tempdir, "vendor")) do
+      expected = [Gem.user_dir, Gem.default_dir]
+
+      assert_equal expected, Gem.default_path
+    end
+  end
+
+  def test_default_path_vendor_dir
+    vendordir(File.join(@tempdir, "vendor")) do
+      FileUtils.mkdir_p Gem.vendor_dir
+
+      FileUtils.rm_rf Gem.user_home
+
+      expected = [Gem.default_dir, Gem.vendor_dir]
+
+      assert_equal expected, Gem.default_path
+    end
+  end
+
+  def test_self_default_sources
+    assert_equal %w[https://rubygems.org/], Gem.default_sources
+  end
+
+  def test_self_dir
+    assert_equal @gemhome, Gem.dir
+  end
+
+  def test_self_ensure_gem_directories
+    FileUtils.rm_r @gemhome
+    Gem.use_paths @gemhome
+
+    Gem.ensure_gem_subdirectories @gemhome
+
+    assert_path_exist File.join @gemhome, "build_info"
+    assert_path_exist File.join @gemhome, "cache"
+    assert_path_exist File.join @gemhome, "doc"
+    assert_path_exist File.join @gemhome, "extensions"
+    assert_path_exist File.join @gemhome, "gems"
+    assert_path_exist File.join @gemhome, "specifications"
+  end
+
+  def test_self_ensure_gem_directories_permissions
+    FileUtils.rm_r @gemhome
+    Gem.use_paths @gemhome
+
+    Gem.ensure_gem_subdirectories @gemhome, 0o750
+
+    assert_directory_exists File.join(@gemhome, "cache")
+
+    assert_equal 0o750, File::Stat.new(@gemhome).mode & 0o777
+    assert_equal 0o750, File::Stat.new(File.join(@gemhome, "cache")).mode & 0o777
+  end unless Gem.win_platform?
+
+  def test_self_ensure_gem_directories_safe_permissions
+    FileUtils.rm_r @gemhome
+    Gem.use_paths @gemhome
+
+    old_umask = File.umask
+    File.umask 0
+    Gem.ensure_gem_subdirectories @gemhome
+
+    assert_equal 0, File::Stat.new(@gemhome).mode & 0o002
+    assert_equal 0, File::Stat.new(File.join(@gemhome, "cache")).mode & 0o002
+  ensure
+    File.umask old_umask
+  end unless Gem.win_platform?
+
+  def test_self_ensure_gem_directories_missing_parents
+    gemdir = File.join @tempdir, "a/b/c/gemdir"
+    begin
+      FileUtils.rm_rf File.join(@tempdir, "a")
+    rescue StandardError
+      nil
+    end
+    refute File.exist?(File.join(@tempdir, "a")),
+           "manually remove #{File.join @tempdir, "a"}, tests are broken"
+    Gem.use_paths gemdir
+
+    Gem.ensure_gem_subdirectories gemdir
+
+    assert_directory_exists util_cache_dir
+  end
+
+  unless Gem.win_platform? || Process.uid.zero? # only for FS that support write protection
+    def test_self_ensure_gem_directories_write_protected
+      gemdir = File.join @tempdir, "egd"
+      begin
+        FileUtils.rm_r gemdir
+      rescue StandardError
+        nil
+      end
+      refute File.exist?(gemdir), "manually remove #{gemdir}, tests are broken"
+      FileUtils.mkdir_p gemdir
+      FileUtils.chmod 0o400, gemdir
+      Gem.use_paths gemdir
+
+      Gem.ensure_gem_subdirectories gemdir
+
+      refute File.exist?(util_cache_dir)
+    ensure
+      FileUtils.chmod 0o600, gemdir
+    end
+
+    def test_self_ensure_gem_directories_write_protected_parents
+      parent = File.join(@tempdir, "egd")
+      gemdir = "#{parent}/a/b/c"
+
+      begin
+        FileUtils.rm_r parent
+      rescue StandardError
+        nil
+      end
+      refute File.exist?(parent), "manually remove #{parent}, tests are broken"
+      FileUtils.mkdir_p parent
+      FileUtils.chmod 0o400, parent
+      Gem.use_paths(gemdir)
+
+      Gem.ensure_gem_subdirectories gemdir
+
+      refute File.exist? File.join(gemdir, "gems")
+    ensure
+      FileUtils.chmod 0o600, parent
+    end
+
+    def test_self_ensure_gem_directories_non_existent_paths
+      Gem.ensure_gem_subdirectories "/proc/0123456789/bogus" # should not raise
+      Gem.ensure_gem_subdirectories "classpath:/bogus/x" # JRuby embed scenario
+    end
+  end
+
+  def test_self_extension_dir_shared
+    enable_shared "yes" do
+      assert_equal Gem.ruby_api_version, Gem.extension_api_version
+    end
+  end
+
+  def test_self_extension_dir_static
+    enable_shared "no" do
+      assert_equal "#{Gem.ruby_api_version}-static", Gem.extension_api_version
+    end
+  end
+
+  def test_self_find_files
+    cwd = File.expand_path("test/rubygems", PROJECT_DIR)
+    $LOAD_PATH.unshift cwd
+
+    discover_path = File.join "lib", "sff", "discover.rb"
+
+    foo1, foo2 = %w[1 2].map do |version|
+      spec = quick_gem "sff", version do |s|
+        s.files << discover_path
+      end
+
+      write_file(File.join("gems", spec.full_name, discover_path)) do |fp|
+        fp.puts "# #{spec.full_name}"
+      end
+
+      spec
+    end
+
+    Gem.refresh
+
+    expected = [
+      File.expand_path("test/rubygems/sff/discover.rb", PROJECT_DIR),
+      File.join(foo2.full_gem_path, discover_path),
+      File.join(foo1.full_gem_path, discover_path),
+    ]
+
+    assert_equal expected, Gem.find_files("sff/discover")
+    assert_equal expected, Gem.find_files("sff/**.rb"), "[ruby-core:31730]"
+  ensure
+    assert_equal cwd, $LOAD_PATH.shift
+  end
+
+  def test_self_find_latest_files
+    cwd = File.expand_path("test/rubygems", PROJECT_DIR)
+    $LOAD_PATH.unshift cwd
+
+    discover_path = File.join "lib", "sff", "discover.rb"
+
+    _, foo2 = %w[1 2].map do |version|
+      spec = quick_gem "sff", version do |s|
+        s.files << discover_path
+      end
+
+      write_file(File.join("gems", spec.full_name, discover_path)) do |fp|
+        fp.puts "# #{spec.full_name}"
+      end
+
+      spec
+    end
+
+    Gem.refresh
+
+    expected = [
+      File.expand_path("test/rubygems/sff/discover.rb", PROJECT_DIR),
+      File.join(foo2.full_gem_path, discover_path),
+    ]
+
+    assert_equal expected, Gem.find_latest_files("sff/discover")
+    assert_equal expected, Gem.find_latest_files("sff/**.rb"), "[ruby-core:31730]"
+  ensure
+    assert_equal cwd, $LOAD_PATH.shift
+  end
+
+  def test_self_latest_spec_for
+    gems = spec_fetcher do |fetcher|
+      fetcher.spec "a", 1
+      fetcher.spec "a", "3.a"
+      fetcher.spec "a", 2
+    end
+
+    spec = Gem.latest_spec_for "a"
+
+    assert_equal gems["a-2"], spec
+  end
+
+  def test_self_latest_spec_for_multiple_sources
+    uri = "https://example.sample.com/"
+    source = Gem::Source.new(uri)
+    source_list = Gem::SourceList.new
+    source_list << Gem::Source.new(@uri)
+    source_list << source
+    Gem.sources.replace source_list
+
+    spec_fetcher(uri) do |fetcher|
+      fetcher.spec "a", 1.1
+    end
+
+    gems = spec_fetcher do |fetcher|
+      fetcher.spec "a", 1
+      fetcher.spec "a", "3.a"
+      fetcher.spec "a", 2
+    end
+    spec = Gem.latest_spec_for "a"
+    assert_equal gems["a-2"], spec
+  end
+
+  def test_self_latest_rubygems_version
+    spec_fetcher do |fetcher|
+      fetcher.spec "rubygems-update", "1.8.23"
+      fetcher.spec "rubygems-update", "1.8.24"
+      fetcher.spec "rubygems-update", "2.0.0.preview3"
+    end
+
+    version = Gem.latest_rubygems_version
+
+    assert_equal Gem::Version.new("1.8.24"), version
+  end
+
+  def test_self_latest_version_for
+    spec_fetcher do |fetcher|
+      fetcher.spec "a", 1
+      fetcher.spec "a", 2
+      fetcher.spec "a", "3.a"
+    end
+
+    version = Gem.latest_version_for "a"
+
+    assert_equal Gem::Version.new(2), version
+  end
+
+  def test_self_latest_version_for_multiple_sources
+    uri = "https://example.sample.com/"
+    source = Gem::Source.new(uri)
+    source_list = Gem::SourceList.new
+    source_list << Gem::Source.new(@uri)
+    source_list << source
+    Gem.sources.replace source_list
+
+    spec_fetcher(uri) do |fetcher|
+      fetcher.spec "a", 1.1
+    end
+
+    spec_fetcher do |fetcher|
+      fetcher.spec "a", 1
+      fetcher.spec "a", 2
+      fetcher.spec "a", "3.a"
+    end
+
+    version = Gem.latest_version_for "a"
+
+    assert_equal Gem::Version.new(2), version
+  end
+
+  def test_self_loaded_specs
+    foo = util_spec "foo"
+    install_gem foo
+
+    foo.activate
+
+    assert_equal true, Gem.loaded_specs.keys.include?("foo")
+  end
+
+  def test_self_path
+    assert_equal [Gem.dir], Gem.path
+  end
+
+  def test_self_path_default
+    ENV.delete "GEM_HOME"
+    ENV.delete "GEM_PATH"
+
+    Gem.instance_variable_set :@paths, nil
+
+    assert_equal [Gem.default_path, Gem.dir].flatten.uniq, Gem.path
+  end
+
+  def test_self_path_ENV_PATH
+    path_count = Gem.path.size
+    Gem.clear_paths
+
+    ENV["GEM_PATH"] = @additional.join(File::PATH_SEPARATOR)
+
+    assert_equal @additional, Gem.path[0,2]
+
+    assert_equal path_count + @additional.size, Gem.path.size,
+                 "extra path components: #{Gem.path[2..-1].inspect}"
+    assert_equal Gem.dir, Gem.path.last
+  end
+
+  def test_self_path_duplicate
+    Gem.clear_paths
+    util_ensure_gem_dirs
+    dirs = @additional + [@gemhome] + [File.join(@tempdir, "a")]
+
+    ENV["GEM_HOME"] = @gemhome
+    ENV["GEM_PATH"] = dirs.join File::PATH_SEPARATOR
+
+    assert_equal @gemhome, Gem.dir
+
+    paths = [Gem.dir]
+    assert_equal @additional + paths, Gem.path
+  end
+
+  def test_self_path_overlap
+    Gem.clear_paths
+
+    util_ensure_gem_dirs
+    ENV["GEM_HOME"] = @gemhome
+    ENV["GEM_PATH"] = @additional.join(File::PATH_SEPARATOR)
+
+    assert_equal @gemhome, Gem.dir
+
+    paths = [Gem.dir]
+    assert_equal @additional + paths, Gem.path
+  end
+
+  def test_self_platforms
+    assert_equal [Gem::Platform::RUBY, Gem::Platform.local], Gem.platforms
+  end
+
+  def test_self_prefix
+    assert_equal PROJECT_DIR, Gem.prefix
+  end
+
+  def test_self_prefix_libdir
+    orig_libdir = RbConfig::CONFIG["libdir"]
+    RbConfig::CONFIG["libdir"] = PROJECT_DIR
+
+    assert_nil Gem.prefix
+  ensure
+    RbConfig::CONFIG["libdir"] = orig_libdir
+  end
+
+  def test_self_prefix_sitelibdir
+    orig_sitelibdir = RbConfig::CONFIG["sitelibdir"]
+    RbConfig::CONFIG["sitelibdir"] = PROJECT_DIR
+
+    assert_nil Gem.prefix
+  ensure
+    RbConfig::CONFIG["sitelibdir"] = orig_sitelibdir
+  end
+
+  def test_self_read_binary
+    File.open "test", "w" do |io|
+      io.write "\xCF\x80"
+    end
+
+    assert_equal ["\xCF", "\x80"], Gem.read_binary("test").chars.to_a
+
+    pend "chmod not supported" if Gem.win_platform?
+
+    begin
+      File.chmod 0o444, "test"
+
+      assert_equal ["\xCF", "\x80"], Gem.read_binary("test").chars.to_a
+    ensure
+      File.chmod 0o644, "test"
+    end
+  end
+
+  def test_self_refresh
+    util_make_gems
+
+    a1_spec = @a1.spec_file
+    moved_path = File.join @tempdir, File.basename(a1_spec)
+
+    FileUtils.mv a1_spec, moved_path
+
+    Gem.refresh
+
+    refute_includes Gem::Specification.all_names, @a1.full_name
+
+    FileUtils.mv moved_path, a1_spec
+
+    Gem.refresh
+
+    assert_includes Gem::Specification.all_names, @a1.full_name
+  end
+
+  def test_self_refresh_keeps_loaded_specs_activated
+    util_make_gems
+
+    a1_spec = @a1.spec_file
+    moved_path = File.join @tempdir, File.basename(a1_spec)
+
+    FileUtils.mv a1_spec, moved_path
+
+    Gem.refresh
+
+    s = Gem::Specification.first
+    s.activate
+
+    Gem.refresh
+
+    Gem::Specification.each {|spec| assert spec.activated? if spec == s }
+
+    Gem.loaded_specs.delete(s)
+    Gem.refresh
+  end
+
+  def test_self_ruby_escaping_spaces_in_path
+    with_clean_path_to_ruby do
+      with_rb_config_ruby("C:/Ruby 1.8/bin/ruby.exe") do
+        assert_equal "\"C:/Ruby 1.8/bin/ruby.exe\"", Gem.ruby
+      end
+    end
+  end
+
+  def test_self_ruby_path_without_spaces
+    with_clean_path_to_ruby do
+      with_rb_config_ruby("C:/Ruby18/bin/ruby.exe") do
+        assert_equal "C:/Ruby18/bin/ruby.exe", Gem.ruby
+      end
+    end
+  end
+
+  def test_self_ruby_api_version
+    orig_ruby_version = RbConfig::CONFIG["ruby_version"]
+    RbConfig::CONFIG["ruby_version"] = "1.2.3"
+
+    Gem.instance_variable_set :@ruby_api_version, nil
+
+    assert_equal "1.2.3", Gem.ruby_api_version
+  ensure
+    Gem.instance_variable_set :@ruby_api_version, nil
+
+    RbConfig::CONFIG["ruby_version"] = orig_ruby_version
+  end
+
+  def test_self_env_requirement
+    ENV["GEM_REQUIREMENT_FOO"] = ">= 1.2.3"
+    ENV["GEM_REQUIREMENT_BAR"] = "1.2.3"
+    ENV["GEM_REQUIREMENT_BAZ"] = "abcd"
+
+    assert_equal Gem::Requirement.create(">= 1.2.3"), Gem.env_requirement("foo")
+    assert_equal Gem::Requirement.create("1.2.3"), Gem.env_requirement("bAr")
+    assert_raise(Gem::Requirement::BadRequirementError) { Gem.env_requirement("baz") }
+    assert_equal Gem::Requirement.default, Gem.env_requirement("qux")
+  end
+
+  def test_self_ruby_version_with_non_mri_implementations
+    util_set_RUBY_VERSION "2.5.0", 0, 60_928, "jruby 9.2.0.0 (2.5.0) 2018-05-24 81156a8 OpenJDK 64-Bit Server VM 25.171-b11 on 1.8.0_171-8u171-b11-0ubuntu0.16.04.1-b11 [linux-x86_64]"
+
+    assert_equal Gem::Version.new("2.5.0"), Gem.ruby_version
+  ensure
+    util_restore_RUBY_VERSION
+  end
+
+  def test_self_ruby_version_with_svn_prerelease
+    util_set_RUBY_VERSION "2.6.0", -1, 63_539, "ruby 2.6.0preview2 (2018-05-31 trunk 63539) [x86_64-linux]"
+
+    assert_equal Gem::Version.new("2.6.0.preview2"), Gem.ruby_version
+  ensure
+    util_restore_RUBY_VERSION
+  end
+
+  def test_self_ruby_version_with_git_prerelease
+    util_set_RUBY_VERSION "2.7.0", -1, "b563439274a402e33541f5695b1bfd4ac1085638", "ruby 2.7.0preview3 (2019-11-23 master b563439274) [x86_64-linux]"
+
+    assert_equal Gem::Version.new("2.7.0.preview3"), Gem.ruby_version
+  ensure
+    util_restore_RUBY_VERSION
+  end
+
+  def test_self_ruby_version_with_non_mri_implementations_with_mri_prerelase_compatibility
+    util_set_RUBY_VERSION "2.6.0", -1, 63_539, "weirdjruby 9.2.0.0 (2.6.0preview2) 2018-05-24 81156a8 OpenJDK 64-Bit Server VM 25.171-b11 on 1.8.0_171-8u171-b11-0ubuntu0.16.04.1-b11 [linux-x86_64]", "weirdjruby", "9.2.0.0"
+
+    assert_equal Gem::Version.new("2.6.0.preview2"), Gem.ruby_version
+  ensure
+    util_restore_RUBY_VERSION
+  end
+
+  def test_self_ruby_version_with_svn_trunk
+    util_set_RUBY_VERSION "1.9.2", -1, 23_493, "ruby 1.9.2dev (2009-05-20 trunk 23493) [x86_64-linux]"
+
+    assert_equal Gem::Version.new("1.9.2.dev"), Gem.ruby_version
+  ensure
+    util_restore_RUBY_VERSION
+  end
+
+  def test_self_ruby_version_with_git_master
+    util_set_RUBY_VERSION "2.7.0", -1, "5de284ec78220e75643f89b454ce999da0c1c195", "ruby 2.7.0dev (2019-12-23T01:37:30Z master 5de284ec78) [x86_64-linux]"
+
+    assert_equal Gem::Version.new("2.7.0.dev"), Gem.ruby_version
+  ensure
+    util_restore_RUBY_VERSION
+  end
+
+  def test_self_rubygems_version
+    assert_equal Gem::Version.new(Gem::VERSION), Gem.rubygems_version
+  end
+
+  def test_self_paths_eq
+    other = File.join @tempdir, "other"
+    path = [@userhome, other].join File::PATH_SEPARATOR
+
+    #
+    # FIXME remove after fixing test_case
+    #
+    ENV["GEM_HOME"] = @gemhome
+    Gem.paths = { "GEM_PATH" => path }
+
+    assert_equal [@userhome, other, @gemhome], Gem.path
+  end
+
+  def test_self_paths_eq_nonexistent_home
+    ENV["GEM_HOME"] = @gemhome
+    Gem.clear_paths
+
+    other = File.join @tempdir, "other"
+
+    ENV["HOME"] = other
+
+    Gem.paths = { "GEM_PATH" => other }
+
+    assert_equal [other, @gemhome], Gem.path
+  end
+
+  def test_self_post_build
+    assert_equal 1, Gem.post_build_hooks.length
+
+    Gem.post_build {|installer| }
+
+    assert_equal 2, Gem.post_build_hooks.length
+  end
+
+  def test_self_post_install
+    assert_equal 1, Gem.post_install_hooks.length
+
+    Gem.post_install {|installer| }
+
+    assert_equal 2, Gem.post_install_hooks.length
+  end
+
+  def test_self_done_installing
+    assert_empty Gem.done_installing_hooks
+
+    Gem.done_installing {|gems| }
+
+    assert_equal 1, Gem.done_installing_hooks.length
+  end
+
+  def test_self_post_reset
+    assert_empty Gem.post_reset_hooks
+
+    Gem.post_reset {}
+
+    assert_equal 1, Gem.post_reset_hooks.length
+  end
+
+  def test_self_post_uninstall
+    assert_equal 1, Gem.post_uninstall_hooks.length
+
+    Gem.post_uninstall {|installer| }
+
+    assert_equal 2, Gem.post_uninstall_hooks.length
+  end
+
+  def test_self_pre_install
+    assert_equal 1, Gem.pre_install_hooks.length
+
+    Gem.pre_install {|installer| }
+
+    assert_equal 2, Gem.pre_install_hooks.length
+  end
+
+  def test_self_pre_reset
+    assert_empty Gem.pre_reset_hooks
+
+    Gem.pre_reset {}
+
+    assert_equal 1, Gem.pre_reset_hooks.length
+  end
+
+  def test_self_pre_uninstall
+    assert_equal 1, Gem.pre_uninstall_hooks.length
+
+    Gem.pre_uninstall {|installer| }
+
+    assert_equal 2, Gem.pre_uninstall_hooks.length
+  end
+
+  def test_self_sources
+    assert_equal %w[http://gems.example.com/], Gem.sources
+    Gem.sources = nil
+    Gem.configuration.sources = %w[http://test.example.com/]
+    assert_equal %w[http://test.example.com/], Gem.sources
+  end
+
+  def test_try_activate_returns_true_for_activated_specs
+    b = util_spec "b", "1.0" do |spec|
+      spec.files << "lib/b.rb"
+    end
+    install_specs b
+
+    assert Gem.try_activate("b"), "try_activate should return true"
+    assert Gem.try_activate("b"), "try_activate should still return true"
+  end
+
+  def test_spec_order_is_consistent
+    b1 = util_spec "b", "1.0"
+    b2 = util_spec "b", "2.0"
+    b3 = util_spec "b", "3.0"
+
+    install_specs b1, b2, b3
+
+    specs1 = Gem::Specification.stubs.find_all {|s| s.name == "b" }
+    Gem::Specification.reset
+    specs2 = Gem::Specification.stubs_for("b")
+    assert_equal specs1.map(&:version), specs2.map(&:version)
+  end
+
+  def test_self_try_activate_missing_dep
+    b = util_spec "b", "1.0"
+    a = util_spec "a", "1.0", "b" => ">= 1.0"
+
+    install_specs b, a
+    uninstall_gem b
+
+    a_file = File.join a.gem_dir, "lib", "a_file.rb"
+
+    write_file a_file do |io|
+      io.puts "# a_file.rb"
+    end
+
+    e = assert_raise Gem::MissingSpecError do
+      Gem.try_activate "a_file"
+    end
+
+    assert_include(e.message, "Could not find 'b' ")
+    assert_include(e.message, "at: #{a.spec_file}")
+  end
+
+  def test_self_try_activate_missing_prerelease
+    b = util_spec "b", "1.0rc1"
+    a = util_spec "a", "1.0rc1", "b" => "1.0rc1"
+
+    install_specs b, a
+    uninstall_gem b
+
+    a_file = File.join a.gem_dir, "lib", "a_file.rb"
+
+    write_file a_file do |io|
+      io.puts "# a_file.rb"
+    end
+
+    e = assert_raise Gem::MissingSpecError do
+      Gem.try_activate "a_file"
+    end
+
+    assert_match(/Could not find 'b' \(= 1.0rc1\)/, e.message)
+  end
+
+  def test_self_try_activate_missing_extensions
+    spec = util_spec "ext", "1" do |s|
+      s.extensions = %w[ext/extconf.rb]
+      s.installed_by_version = v("2.2")
+    end
+
+    # write the spec without install to simulate a failed install
+    write_file spec.spec_file do |io|
+      io.write spec.to_ruby_for_cache
+    end
+
+    _, err = capture_output do
+      refute Gem.try_activate "nonexistent"
+    end
+
+    expected = "Ignoring ext-1 because its extensions are not built. " \
+               "Try: gem pristine ext --version 1\n"
+
+    assert_equal expected, err
+  end
+
+  def test_self_use_paths_with_nils
+    orig_home = ENV.delete "GEM_HOME"
+    orig_path = ENV.delete "GEM_PATH"
+    Gem.use_paths nil, nil
+    assert_equal Gem.default_dir, Gem.paths.home
+    path = (Gem.default_path + [Gem.paths.home]).uniq
+    assert_equal path, Gem.paths.path
+  ensure
+    ENV["GEM_HOME"] = orig_home
+    ENV["GEM_PATH"] = orig_path
+  end
+
+  def test_setting_paths_does_not_warn_about_unknown_keys
+    stdout, stderr = capture_output do
+      Gem.paths = { "foo" => [],
+                    "bar" => Object.new,
+                    "GEM_HOME" => Gem.paths.home,
+                    "GEM_PATH" => "foo" }
+    end
+    assert_equal ["foo", Gem.paths.home], Gem.paths.path
+    assert_equal "", stderr
+    assert_equal "", stdout
+  end
+
+  def test_setting_paths_does_not_mutate_parameter_object
+    Gem.paths = { "GEM_HOME" => Gem.paths.home,
+                  "GEM_PATH" => "foo" } .freeze
+    assert_equal ["foo", Gem.paths.home], Gem.paths.path
+  end
+
+  def test_deprecated_paths=
+    stdout, stderr = capture_output do
+      Gem.paths = { "GEM_HOME" => Gem.paths.home,
+                    "GEM_PATH" => [Gem.paths.home, "foo"] }
+    end
+    assert_equal [Gem.paths.home, "foo"], Gem.paths.path
+    assert_match(/Array values in the parameter to `Gem.paths=` are deprecated.\nPlease use a String or nil/m, stderr)
+    assert_equal "", stdout
+  end
+
+  def test_self_use_paths
+    util_ensure_gem_dirs
+
+    Gem.use_paths @gemhome, @additional
+
+    assert_equal @gemhome, Gem.dir
+    assert_equal @additional + [Gem.dir], Gem.path
+  end
+
+  def test_self_user_dir
+    parts = [@userhome, ".gem", Gem.ruby_engine]
+    parts << RbConfig::CONFIG["ruby_version"] unless RbConfig::CONFIG["ruby_version"].empty?
+
+    FileUtils.mkdir_p File.join(parts)
+
+    assert_equal File.join(parts), Gem.user_dir
+  end
+
+  def test_self_user_home
+    if ENV["HOME"]
+      assert_equal ENV["HOME"], Gem.user_home
+    else
+      assert true, "count this test"
+    end
+  end
+
+  def test_self_needs
+    a = util_spec "a", "1"
+    b = util_spec "b", "1", "c" => nil
+    c = util_spec "c", "2"
+
+    install_specs a, c, b
+
+    Gem.needs do |r|
+      r.gem "a"
+      r.gem "b", "= 1"
+    end
+
+    activated = Gem::Specification.map(&:full_name)
+
+    assert_equal %w[a-1 b-1 c-2], activated.sort
+  end
+
+  def test_self_needs_picks_up_unresolved_deps
+    a = util_spec "a", "1"
+    b = util_spec "b", "1", "c" => nil
+    c = util_spec "c", "2"
+    d = util_spec "d", "1", { "e" => "= 1" }, "lib/d#{$$}.rb"
+    e = util_spec "e", "1"
+
+    install_specs a, c, b, e, d
+
+    Gem.needs do |r|
+      r.gem "a"
+      r.gem "b", "= 1"
+
+      require "d#{$$}"
+    end
+
+    assert_equal %w[a-1 b-1 c-2 d-1 e-1], loaded_spec_names
+  end
+
+  def test_self_gunzip
+    input = "\x1F\x8B\b\0\xED\xA3\x1AQ\0\x03\xCBH" \
+            "\xCD\xC9\xC9\a\0\x86\xA6\x106\x05\0\0\0"
+
+    output = Gem::Util.gunzip input
+
+    assert_equal "hello", output
+    assert_equal Encoding::BINARY, output.encoding
+  end
+
+  def test_self_gzip
+    input = "hello"
+
+    output = Gem::Util.gzip input
+
+    zipped = StringIO.new output
+
+    assert_equal "hello", Zlib::GzipReader.new(zipped).read
+    assert_equal Encoding::BINARY, output.encoding
+  end
+
+  def test_self_vendor_dir
+    vendordir(File.join(@tempdir, "vendor")) do
+      expected =
+        File.join RbConfig::CONFIG["vendordir"], "gems",
+                  RbConfig::CONFIG["ruby_version"]
+
+      assert_equal expected, Gem.vendor_dir
+    end
+  end
+
+  def test_self_vendor_dir_ENV_GEM_VENDOR
+    ENV["GEM_VENDOR"] = File.join @tempdir, "vendor", "gems"
+
+    assert_equal ENV["GEM_VENDOR"], Gem.vendor_dir
+    refute Gem.vendor_dir.frozen?
+  end
+
+  def test_self_vendor_dir_missing
+    vendordir(nil) do
+      assert_nil Gem.vendor_dir
+    end
+  end
+
+  def test_load_plugins
+    plugin_path = File.join "lib", "rubygems_plugin.rb"
+
+    foo1_plugin_path = nil
+    foo2_plugin_path = nil
+    Dir.chdir @tempdir do
+      FileUtils.mkdir_p "lib"
+      File.open plugin_path, "w" do |fp|
+        fp.puts "class TestGem; PLUGINS_LOADED << 'plugin'; end"
+      end
+
+      foo1 = util_spec "foo", "1" do |s|
+        s.files << plugin_path
+      end
+      foo1_plugin_path = File.join(foo1.gem_dir, plugin_path)
+
+      install_gem foo1
+
+      foo2 = util_spec "foo", "2" do |s|
+        s.files << plugin_path
+      end
+      foo2_plugin_path = File.join(foo2.gem_dir, plugin_path)
+
+      install_gem foo2
+    end
+
+    Gem::Specification.reset
+    PLUGINS_LOADED.clear
+    $LOADED_FEATURES.delete(foo1_plugin_path)
+    $LOADED_FEATURES.delete(foo2_plugin_path)
+
+    gem "foo"
+
+    Gem.load_plugins
+
+    assert_equal %w[plugin], PLUGINS_LOADED
+  end
+
+  def test_load_user_installed_plugins
+    @orig_gem_home = ENV["GEM_HOME"]
+    ENV["GEM_HOME"] = @gemhome
+
+    plugin_path = File.join "lib", "rubygems_plugin.rb"
+
+    Dir.chdir @tempdir do
+      FileUtils.mkdir_p "lib"
+      File.open plugin_path, "w" do |fp|
+        fp.puts "class TestGem; PLUGINS_LOADED << 'plugin'; end"
+      end
+
+      foo = util_spec "foo", "1" do |s|
+        s.files << plugin_path
+      end
+
+      install_gem_user foo
+    end
+
+    Gem.paths = { "GEM_PATH" => [Gem.dir, Gem.user_dir].join(File::PATH_SEPARATOR) }
+
+    gem "foo"
+
+    Gem.load_plugins
+
+    assert_equal %w[plugin], PLUGINS_LOADED
+  ensure
+    ENV["GEM_HOME"] = @orig_gem_home
+  end
+
+  def test_load_env_plugins
+    with_plugin("load") { Gem.load_env_plugins }
+    begin
+      assert_equal :loaded, TEST_PLUGIN_LOAD
+    rescue StandardError
+      nil
+    end
+
+    util_remove_interrupt_command
+
+    # Should attempt to cause a StandardError
+    with_plugin("standarderror") { Gem.load_env_plugins }
+    begin
+      assert_equal :loaded, TEST_PLUGIN_STANDARDERROR
+    rescue StandardError
+      nil
+    end
+
+    util_remove_interrupt_command
+
+    # Should attempt to cause an Exception
+    with_plugin("scripterror") { Gem.load_env_plugins }
+    begin
+      assert_equal :loaded, TEST_PLUGIN_EXCEPTION
+    rescue StandardError
+      nil
+    end
+  end
+
+  def test_gem_path_ordering
+    refute_equal Gem.dir, Gem.user_dir
+
+    write_file File.join(@tempdir, "lib", "g.rb") {|fp| fp.puts "" }
+    write_file File.join(@tempdir, "lib", "m.rb") {|fp| fp.puts "" }
+
+    g = util_spec "g", "1", nil, "lib/g.rb"
+    m = util_spec "m", "1", nil, "lib/m.rb"
+
+    install_gem g, install_dir: Gem.dir
+    m0 = install_gem m, install_dir: Gem.dir
+    m1 = install_gem m, install_dir: Gem.user_dir
+
+    assert_equal m0.gem_dir, File.join(Gem.dir, "gems", "m-1")
+    assert_equal m1.gem_dir, File.join(Gem.user_dir, "gems", "m-1")
+
+    tests = [
+      [:dir0, [Gem.dir, Gem.user_dir], m0],
+      [:dir1, [Gem.user_dir, Gem.dir], m1],
+    ]
+
+    tests.each do |name, paths, expected|
+      Gem.use_paths paths.first, paths
+      Gem::Specification.reset
+      Gem.searcher = nil
+
+      assert_equal Gem::Dependency.new("m","1").to_specs,
+                   Gem::Dependency.new("m","1").to_specs.sort
+
+      assert_equal \
+        [expected.gem_dir],
+        Gem::Dependency.new("m","1").to_specs.map(&:gem_dir).sort,
+        "Wrong specs for #{name}"
+
+      spec = Gem::Dependency.new("m","1").to_spec
+
+      assert_equal \
+        File.join(paths.first, "gems", "m-1"),
+        spec.gem_dir,
+        "Wrong spec before require for #{name}"
+      refute spec.activated?, "dependency already activated for #{name}"
+
+      gem "m"
+
+      spec = Gem::Dependency.new("m","1").to_spec
+      assert spec.activated?, "dependency not activated for #{name}"
+
+      assert_equal \
+        File.join(paths.first, "gems", "m-1"),
+        spec.gem_dir,
+        "Wrong spec after require for #{name}"
+
+      spec.instance_variable_set :@activated, false
+      Gem.loaded_specs.delete(spec.name)
+      $:.delete(File.join(spec.gem_dir, "lib"))
+    end
+  end
+
+  def test_gem_path_ordering_short
+    write_file File.join(@tempdir, "lib", "g.rb") {|fp| fp.puts "" }
+    write_file File.join(@tempdir, "lib", "m.rb") {|fp| fp.puts "" }
+
+    g = util_spec "g", "1", nil, "lib/g.rb"
+    m = util_spec "m", "1", nil, "lib/m.rb"
+
+    install_gem g, install_dir: Gem.dir
+    install_gem m, install_dir: Gem.dir
+    install_gem m, install_dir: Gem.user_dir
+
+    Gem.use_paths Gem.dir, [Gem.dir, Gem.user_dir]
+
+    assert_equal \
+      File.join(Gem.dir, "gems", "m-1"),
+      Gem::Dependency.new("m","1").to_spec.gem_dir,
+      "Wrong spec selected"
+  end
+
+  def test_register_default_spec
+    Gem.clear_default_specs
+
+    old_style = Gem::Specification.new do |spec|
+      spec.files = ["foo.rb", "bar.rb"]
+    end
+
+    Gem.register_default_spec old_style
+
+    assert_equal old_style, Gem.find_unresolved_default_spec("foo.rb")
+    assert_equal old_style, Gem.find_unresolved_default_spec("bar.rb")
+    assert_nil              Gem.find_unresolved_default_spec("baz.rb")
+
+    Gem.clear_default_specs
+
+    new_style = Gem::Specification.new do |spec|
+      spec.files = ["lib/foo.rb", "ext/bar.rb", "bin/exec", "README"]
+      spec.require_paths = ["lib", "ext"]
+    end
+
+    Gem.register_default_spec new_style
+
+    assert_equal new_style, Gem.find_unresolved_default_spec("foo.rb")
+    assert_equal new_style, Gem.find_unresolved_default_spec("bar.rb")
+    assert_nil              Gem.find_unresolved_default_spec("exec")
+    assert_nil              Gem.find_unresolved_default_spec("README")
+  end
+
+  def test_register_default_spec_old_style_with_folder_starting_with_lib
+    Gem.clear_default_specs
+
+    old_style = Gem::Specification.new do |spec|
+      spec.files = ["libexec/bundle", "foo.rb", "bar.rb"]
+    end
+
+    Gem.register_default_spec old_style
+
+    assert_equal old_style, Gem.find_unresolved_default_spec("foo.rb")
+  end
+
+  def test_operating_system_defaults
+    operating_system_defaults = Gem.operating_system_defaults
+
+    assert !operating_system_defaults.nil?
+    assert operating_system_defaults.is_a? Hash
+  end
+
+  def test_platform_defaults
+    platform_defaults = Gem.platform_defaults
+
+    assert !platform_defaults.nil?
+    assert platform_defaults.is_a? Hash
+  end
+
+  # Ensure that `Gem.source_date_epoch` is consistent even if
+  # $SOURCE_DATE_EPOCH has not been set.
+  def test_default_source_date_epoch_doesnt_change
+    old_epoch = ENV["SOURCE_DATE_EPOCH"]
+    ENV["SOURCE_DATE_EPOCH"] = nil
+
+    # Unfortunately, there is no real way to test this aside from waiting
+    # enough for `Time.now.to_i` to change -- which is a whole second.
+    #
+    # Fortunately, we only need to do this once.
+    a = Gem.source_date_epoch
+    sleep 1
+    b = Gem.source_date_epoch
+    assert_equal a, b
+  ensure
+    ENV["SOURCE_DATE_EPOCH"] = old_epoch
+  end
+
+  def test_data_home_default
+    expected = File.join(@userhome, ".local", "share")
+    assert_equal expected, Gem.data_home
+  end
+
+  def test_data_home_from_env
+    ENV["XDG_DATA_HOME"] = expected = "/test/data/home"
+    assert_equal expected, Gem.data_home
+  end
+
+  def test_state_home_default
+    Gem.instance_variable_set :@state_home, nil
+    Gem.data_home # memoize @data_home, to demonstrate GH-6418
+    expected = File.join(@userhome, ".local", "state")
+    assert_equal expected, Gem.state_home
+  end
+
+  def test_state_home_from_env
+    Gem.instance_variable_set :@state_home, nil
+    Gem.data_home # memoize @data_home, to demonstrate GH-6418
+    ENV["XDG_STATE_HOME"] = expected = "/test/state/home"
+    assert_equal expected, Gem.state_home
+  end
+
+  private
+
+  def ruby_install_name(name)
+    with_clean_path_to_ruby do
+      orig_ruby_install_name = RbConfig::CONFIG["ruby_install_name"]
+      RbConfig::CONFIG["ruby_install_name"] = name
+
+      begin
+        yield
+      ensure
+        if orig_ruby_install_name
+          RbConfig::CONFIG["ruby_install_name"] = orig_ruby_install_name
+        else
+          RbConfig::CONFIG.delete "ruby_install_name"
+        end
+      end
+    end
+  end
+
+  def with_rb_config_ruby(path)
+    rb_config_singleton_class = class << RbConfig; self; end
+    orig_path = RbConfig.ruby
+
+    redefine_method(rb_config_singleton_class, :ruby, path)
+
+    yield
+  ensure
+    redefine_method(rb_config_singleton_class, :ruby, orig_path)
+  end
+
+  def redefine_method(base, method, new_result)
+    base.alias_method(method, method)
+    base.define_method(method) { new_result }
+  end
+
+  def with_plugin(path)
+    test_plugin_path = File.expand_path("test/rubygems/plugin/#{path}",
+                                        PROJECT_DIR)
+
+    # A single test plugin should get loaded once only, in order to preserve
+    # sane test semantics.
+    refute_includes $LOAD_PATH, test_plugin_path
+    $LOAD_PATH.unshift test_plugin_path
+
+    capture_output do
+      yield
+    end
+  ensure
+    $LOAD_PATH.delete test_plugin_path
+  end
+
+  def util_ensure_gem_dirs
+    Gem.ensure_gem_subdirectories @gemhome
+
+    #
+    # FIXME what does this solve precisely? -ebh
+    #
+    @additional.each do |_dir|
+      Gem.ensure_gem_subdirectories @gemhome
+    end
+  end
+
+  def util_exec_gem
+    spec, _ = util_spec "a", "4" do |s|
+      s.executables = ["exec", "abin"]
+    end
+
+    @exec_path = File.join spec.full_gem_path, spec.bindir, "exec"
+    @abin_path = File.join spec.full_gem_path, spec.bindir, "abin"
+    spec
+  end
+
+  def util_remove_interrupt_command
+    Gem::Commands.send :remove_const, :InterruptCommand if
+      Gem::Commands.const_defined? :InterruptCommand
+  end
+
+  def util_cache_dir
+    File.join Gem.dir, "cache"
+  end
+end
diff -Nuarp ruby-3.3.3.a/tool/mkconfig.rb ruby-3.3.3.b/tool/mkconfig.rb
--- ruby-3.3.3.a/tool/mkconfig.rb	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/tool/mkconfig.rb	2024-07-15 21:17:14.734327518 -0400
@@ -115,7 +115,7 @@ File.foreach "config.status" do |line|
     val = val.gsub(/\$(?:\$|\{?(\w+)\}?)/) {$1 ? "$(#{$1})" : $&}.dump
     case name
     when /^prefix$/
-      val = "(TOPDIR || DESTDIR + #{val})"
+      val = "(((TOPDIR && TOPDIR.empty?) ? nil : TOPDIR) || DESTDIR + #{val})"
     when /^ARCH_FLAG$/
       val = "arch_flag || #{val}" if universal
     when /^UNIVERSAL_ARCHNAMES$/
diff -Nuarp ruby-3.3.3.a/tool/rbinstall.rb ruby-3.3.3.b/tool/rbinstall.rb
--- ruby-3.3.3.a/tool/rbinstall.rb	2024-06-11 19:54:24.000000000 -0400
+++ ruby-3.3.3.b/tool/rbinstall.rb	2024-07-15 21:17:26.154919466 -0400
@@ -359,6 +359,7 @@ if CONFIG["vendordir"]
   vendorlibdir = CONFIG["vendorlibdir"]
   vendorarchlibdir = CONFIG["vendorarchdir"]
 end
+rubygemsdir = CONFIG["rubygemsdir"]
 mandir = CONFIG["mandir", true]
 docdir = CONFIG["docdir", true]
 enable_shared = CONFIG["ENABLE_SHARED"] == 'yes'
@@ -453,7 +454,7 @@ end
 
 install?(:doc, :rdoc) do
   if $rdocdir
-    ridatadir = File.join(CONFIG['ridir'], CONFIG['ruby_version'], "system")
+    ridatadir = File.join(CONFIG['ridir'], CONFIG['ruby_version_dir_name'] || CONFIG['ruby_version'], "system")
     prepare "rdoc", ridatadir
     install_recursive($rdocdir, ridatadir, :no_install => rdoc_noinst, :mode => $data_mode)
   end
@@ -595,7 +596,16 @@ end
 install?(:local, :comm, :lib) do
   prepare "library scripts", rubylibdir
   noinst = %w[*.txt *.rdoc *.gemspec]
+  # Bundler carries "rubygems.rb" file, so it must be specialcased :/
+  noinst += %w[rubygems.rb rubygems/ bundler.rb bundler/] if rubygemsdir
   install_recursive(File.join(srcdir, "lib"), rubylibdir, :no_install => noinst, :mode => $data_mode)
+  if rubygemsdir
+    noinst = %w[*.txt *.rdoc *.gemspec]
+    install_recursive(File.join(srcdir, "lib", "rubygems"), File.join(rubygemsdir, "rubygems"), :no_install => noinst, :mode => $data_mode)
+    install(File.join(srcdir, "lib", "rubygems.rb"), File.join(rubygemsdir, "rubygems.rb"), :mode => $data_mode)
+    install_recursive(File.join(srcdir, "lib", "bundler"), File.join(rubylibdir, "bundler"), :no_install => noinst, :mode => $data_mode)
+    install(File.join(srcdir, "lib", "bundler.rb"), rubylibdir, :mode => $data_mode)
+  end
 end
 
 install?(:local, :comm, :hdr, :'comm-hdr') do
