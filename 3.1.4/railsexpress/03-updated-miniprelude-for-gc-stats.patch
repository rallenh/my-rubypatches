--- ruby-3.1.4.a/miniprelude.c	2023-03-30 06:53:53.000000000 -0400
+++ ruby-3.1.4.b/miniprelude.c	2023-05-19 18:28:12.625400839 -0400
@@ -545,11 +545,11 @@ static const struct {
 
 static const char prelude_name2[] = "<internal:gc>";
 static const struct {
-    char L0[479]; /* 1..58 */
-    char L58[508]; /* 59..204 */
-    char L204[504]; /* 205..275 */
-    char L275[490]; /* 276..306 */
-    char L306[128]; /* 307..312 */
+    char L0[492]; /* 1..70 */
+    char L70[468]; /* 71..197 */
+    char L197[479]; /* 198..244 */
+    char L244[501]; /* 245..317 */
+    char L317[280]; /* 318..330 */
 } prelude_code2 = {
 #line 1 "gc.rb"
 ""/* for gc.c */
@@ -593,29 +593,6 @@ static const struct {
 "  end\n"
 "\n"
 "\n"/*  call-seq: */
-"\n"/*     GC.auto_compact    -> true or false */
-"\n"/*  */
-"\n"/*  Returns whether or not automatic compaction has been enabled. */
-"\n"/*  */
-"  def self.auto_compact\n"
-"    Primitive.gc_get_auto_compact\n"
-"  end\n"
-"\n"
-"\n"/*  call-seq: */
-"\n"/*     GC.auto_compact = flag */
-"\n"/*  */
-"\n"/*  Updates automatic compaction mode. */
-"\n"/*  */
-"\n"/*  When enabled, the compactor will execute on every major collection. */
-"\n"/*  */
-"\n"/*  Enabling compaction will degrade performance on major collections. */
-"  def self.auto_compact=(flag)\n"
-,
-#line 59 "gc.rb"
-"    Primitive.gc_set_auto_compact(flag)\n"
-"  end\n"
-"\n"
-"\n"/*  call-seq: */
 "\n"/*     GC.enable    -> true or false */
 "\n"/*  */
 "\n"/*  Enables garbage collection, returning +true+ if garbage */
@@ -645,6 +622,8 @@ static const struct {
 "\n"/*    GC.stress	    -> integer, true or false */
 "\n"/*  */
 "\n"/*  Returns current status of GC stress mode. */
+,
+#line 71 "gc.rb"
 "  def self.stress\n"
 "    Primitive.gc_stress_get\n"
 "  end\n"
@@ -758,8 +737,6 @@ static const struct {
 "\n"/*     GC.latest_gc_info(:major_by) -> :malloc */
 "\n"/*  */
 "\n"/*  Returns information about the most recent garbage collection. */
-,
-#line 205 "gc.rb"
 "\n"/*  */
 "\n"/* If the optional argument, hash, is given, */
 "\n"/* it is overwritten and returned. */
@@ -768,59 +745,14 @@ static const struct {
 "    Primitive.gc_latest_gc_info hash_or_key\n"
 "  end\n"
 "\n"
-"\n"/*  call-seq: */
-"\n"/*     GC.latest_compact_info -> {:considered=>{:T_CLASS=>11}, :moved=>{:T_CLASS=>11}} */
-"\n"/*  */
-"\n"/*  Returns information about object moved in the most recent GC compaction. */
-"\n"/*  */
-"\n"/* The returned hash has two keys :considered and :moved.  The hash for */
-"\n"/* :considered lists the number of objects that were considered for movement */
-"\n"/* by the compactor, and the :moved hash lists the number of objects that */
-"\n"/* were actually moved.  Some objects can't be moved (maybe they were pinned) */
-"\n"/* so these numbers can be used to calculate compaction efficiency. */
-"  def self.latest_compact_info\n"
-"    Primitive.gc_compact_stats\n"
-"  end\n"
-"\n"
-"\n"/*  call-seq: */
-"\n"/*     GC.compact */
-"\n"/*  */
-"\n"/* This function compacts objects together in Ruby's heap.  It eliminates */
-"\n"/* unused space (or fragmentation) in the heap by moving objects in to that */
-"\n"/* unused space.  This function returns a hash which contains statistics about */
-"\n"/* which objects were moved.  See `GC.latest_gc_info` for details about */
-"\n"/* compaction statistics. */
-"\n"/*  */
-"\n"/* This method is implementation specific and not expected to be implemented */
-"\n"/* in any implementation besides MRI. */
-"  def self.compact\n"
-"    Primitive.gc_compact\n"
-"  end\n"
-"\n"
-"\n"/* call-seq: */
-"\n"/*    GC.verify_compaction_references(toward: nil, double_heap: false) -> hash */
-"\n"/*  */
-"\n"/* Verify compaction reference consistency. */
-"\n"/*  */
-"\n"/* This method is implementation specific.  During compaction, objects that */
-"\n"/* were moved are replaced with T_MOVED objects.  No object should have a */
-"\n"/* reference to a T_MOVED object after compaction. */
-"\n"/*  */
-"\n"/* This function doubles the heap to ensure room to move all objects, */
-"\n"/* compacts the heap to make sure everything moves, updates all references, */
-"\n"/* then performs a full GC.  If any object contains a reference to a T_MOVED */
-"\n"/* object, that object should be pushed on the mark stack, and will */
-"\n"/* make a SEGV. */
-"  def self.verify_compaction_references(toward: nil, double_heap: false)\n"
-"    Primitive.gc_verify_compaction_references(double_heap, toward == :empty)\n"
-"  end\n"
-"\n"
 "\n"/* call-seq: */
 "\n"/*     GC.using_rvargc? -> true or false */
 "\n"/*  */
 "\n"/* Returns true if using experimental feature Variable Width Allocation, false */
 "\n"/* otherwise. */
 "  def self.using_rvargc?\n"/* :nodoc: */
+,
+#line 198 "gc.rb"
 "    GC::INTERNAL_CONSTANTS[:SIZE_POOL_COUNT] > 1\n"
 "  end\n"
 "\n"
@@ -831,8 +763,6 @@ static const struct {
 "\n"/* Enable to measure GC time. */
 "\n"/* You can get the result with <tt>GC.stat(:time)</tt>. */
 "\n"/* Note that GC time measurement can cause some performance overhead. */
-,
-#line 276 "gc.rb"
 "  def self.measure_total_time=(flag)\n"
 "    Primitive.cstmt! %{\n"
 "      rb_objspace.flags.measure_gc = RTEST(flag) ? TRUE : FALSE;\n"
@@ -860,18 +790,106 @@ static const struct {
 "      ULL2NUM(rb_objspace.profile.total_time_ns)\n"
 "    }\n"
 "  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.enable_stats	  => true or false */
+"\n"/*  */
+"\n"/* Enables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already enabled. */
+"\n"/*  */
+"\n"/*    GC.enable_stats	 #=> false or true */
+"\n"/*    GC.enable_stats	 #=> true */
+"  def self.enable_stats\n"
+,
+#line 245 "gc.rb"
+"    __builtin_gc_enable_stats\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.disable_stats	   => true or false */
+"\n"/*  */
+"\n"/* Disables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already disabled. */
+"\n"/*  */
+"\n"/*    GC.disable_stats	  #=> false or true */
+"\n"/*    GC.disable_stats	  #=> true */
+"  def self.disable_stats\n"
+"    __builtin_gc_disable_stats\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.stats_enabled?    => true or false */
+"\n"/*  */
+"\n"/* Check whether GC stats have been enabled. */
+"\n"/*  */
+"\n"/*    GC.stats_enabled?   #=> false or true */
+"  def self.stats_enabled?\n"
+"    __builtin_gc_stats_enabled\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.time	  => Integer */
+"\n"/*  */
+"\n"/* Returns the time spent during garbage collection while GC statistics collection */
+"\n"/* was enabled (in micro seconds). */
+"\n"/*  */
+"\n"/*    GC.time	  #=> 20000 */
+"  def self.time\n"
+"    __builtin_gc_time\n"
+"  end\n"
+"\n"
+"\n"/*  call-seq: */
+"\n"/* GC.heap_slots	=> Integer */
+"\n"/*  */
+"\n"/*  Returns the number of heap slots available for object allocations. */
+"\n"/*  */
+"\n"/* GC.heap_slots	#=> 10000 */
+"  def self.heap_slots\n"
+"    __builtin_gc_heap_slots\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.heap_slots_live_after_last_gc	   => Integer */
+"\n"/*  */
+"\n"/* Returns the number of heap slots which were live after the last garbage collection. */
+"\n"/*  */
+"\n"/*    GC.heap_slots_live_after_last_gc	   #=> 231223 */
+"  def self.heap_slots_live_after_last_gc\n"
+"    __builtin_gc_heap_slots_live_after_last_gc\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_mallocs	   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number malloc calls. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_mallocs	   #=> 324234323246 */
+"  def self.total_mallocs\n"
+"    __builtin_gc_total_mallocs\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_malloced_bytes	   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number of bytes allocated. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_malloced_bytes	   #=> 354656256432446 */
+"  def self.total_malloced_bytes\n"
+,
+#line 318 "gc.rb"
+"    __builtin_gc_total_malloced_bytes\n"
+"  end\n"
+"\n"
 "end\n"
 "\n"
 "module ObjectSpace\n"
 "  def garbage_collect full_mark: true, immediate_mark: true, immediate_sweep: true\n"
-,
-#line 307 "gc.rb"
 "    Primitive.gc_start_internal full_mark, immediate_mark, immediate_sweep, false\n"
 "  end\n"
 "\n"
 "  module_function :garbage_collect\n"
 "end\n"
-#line 875 "miniprelude.c"
+#line 893 "miniprelude.c"
 };
 
 static const char prelude_name3[] = "<internal:numeric>";
@@ -1223,7 +1241,7 @@ static const struct {
 "  end\n"
 "\n"
 "end\n"
-#line 1227 "miniprelude.c"
+#line 1245 "miniprelude.c"
 };
 
 static const char prelude_name4[] = "<internal:io>";
@@ -1354,7 +1372,7 @@ static const struct {
 "    Primitive.io_write_nonblock(buf, exception)\n"
 "  end\n"
 "end\n"
-#line 1358 "miniprelude.c"
+#line 1376 "miniprelude.c"
 };
 
 static const char prelude_name5[] = "<internal:marshal>";
@@ -1402,7 +1420,7 @@ static const struct {
 "    alias restore load\n"
 "  end\n"
 "end\n"
-#line 1406 "miniprelude.c"
+#line 1424 "miniprelude.c"
 };
 
 static const char prelude_name6[] = "<internal:pack>";
@@ -1724,7 +1742,7 @@ static const struct {
 "    Primitive.pack_unpack1(fmt, offset)\n"
 "  end\n"
 "end\n"
-#line 1728 "miniprelude.c"
+#line 1746 "miniprelude.c"
 };
 
 static const char prelude_name7[] = "<internal:trace_point>";
@@ -2111,7 +2129,7 @@ static const struct {
 "    Primitive.tracepoint_attr_instruction_sequence\n"
 "  end\n"
 "end\n"
-#line 2115 "miniprelude.c"
+#line 2133 "miniprelude.c"
 };
 
 static const char prelude_name8[] = "<internal:warning>";
@@ -2172,7 +2190,7 @@ static const struct {
 "    Primitive.rb_warn_m(msgs, uplevel, category)\n"
 "  end\n"
 "end\n"
-#line 2176 "miniprelude.c"
+#line 2194 "miniprelude.c"
 };
 
 static const char prelude_name9[] = "<internal:array>";
@@ -2249,7 +2267,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 2253 "miniprelude.c"
+#line 2271 "miniprelude.c"
 };
 
 static const char prelude_name10[] = "<internal:kernel>";
@@ -2438,7 +2456,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 2442 "miniprelude.c"
+#line 2460 "miniprelude.c"
 };
 
 static const char prelude_name11[] = "<internal:ractor>";
@@ -3309,7 +3327,7 @@ static const struct {
 "    }\n"
 "  end\n"
 "end\n"
-#line 3313 "miniprelude.c"
+#line 3331 "miniprelude.c"
 };
 
 static const char prelude_name12[] = "<internal:timev>";
@@ -3632,7 +3650,7 @@ static const struct {
 "    Primitive.time_init_args(year, mon, mday, hour, min, sec, zone)\n"
 "  end\n"
 "end\n"
-#line 3636 "miniprelude.c"
+#line 3654 "miniprelude.c"
 };
 
 static const char prelude_name13[] = "<internal:nilclass>";
@@ -3665,7 +3683,7 @@ static const struct {
 "    return 0.0\n"
 "  end\n"
 "end\n"
-#line 3669 "miniprelude.c"
+#line 3687 "miniprelude.c"
 };
 
 static const char prelude_name14[] = "<internal:prelude>";
@@ -3695,7 +3713,7 @@ static const struct {
 "\n"
 "  private :pp\n"
 "end\n"
-#line 3699 "miniprelude.c"
+#line 3717 "miniprelude.c"
 };
 
 static const char prelude_name15[] = "<internal:gem_prelude>";
@@ -3722,7 +3740,7 @@ static const struct {
 "rescue LoadError\n"
 "  warn \"`did_you_mean' was not loaded.\"\n"
 "end if defined?(DidYouMean)\n"
-#line 3726 "miniprelude.c"
+#line 3744 "miniprelude.c"
 };
 
 static const char prelude_name16[] = "<internal:yjit>";
@@ -4063,7 +4081,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 4067 "miniprelude.c"
+#line 4085 "miniprelude.c"
 };
 
 COMPILER_WARNING_POP
