--- ruby-3.2.2.a/miniprelude.c	2023-03-30 07:06:31.000000000 -0400
+++ ruby-3.2.2.b/miniprelude.c	2023-05-19 03:22:09.891703810 -0400
@@ -640,7 +640,9 @@ static const struct {
     char L0[492]; /* 1..70 */
     char L70[495]; /* 71..230 */
     char L230[507]; /* 231..272 */
-    char L272[455]; /* 273..297 */
+    char L272[489]; /* 273..339 */
+    char L339[506]; /* 340..380 */
+    char L380[39]; /* 381..383 */
 } prelude_code2 = {
 #line 1 "gc.rb"
 ""/* for gc.c */
@@ -936,6 +938,94 @@ static const struct {
 "      ULL2NUM(rb_objspace.profile.total_time_ns)\n"
 "    }\n"
 "  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.enable_stats	  => true or false */
+"\n"/*  */
+"\n"/* Enables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already enabled. */
+"\n"/*  */
+"\n"/*    GC.enable_stats	 #=> false or true */
+"\n"/*    GC.enable_stats	 #=> true */
+"  def self.enable_stats\n"
+"    Primitive.gc_enable_stats\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.disable_stats	   => true or false */
+"\n"/*  */
+"\n"/* Disables garbage collection statistics, returning <code>true</code> if garbage */
+"\n"/* collection statistics was already disabled. */
+"\n"/*  */
+"\n"/*    GC.disable_stats	  #=> false or true */
+"\n"/*    GC.disable_stats	  #=> true */
+"  def self.disable_stats\n"
+"    Primitive.gc_disable_stats\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.stats_enabled?    => true or false */
+"\n"/*  */
+"\n"/* Check whether GC stats have been enabled. */
+"\n"/*  */
+"\n"/*    GC.stats_enabled?   #=> false or true */
+"  def self.stats_enabled?\n"
+"    Primitive.gc_stats_enabled\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*    GC.time	  => Integer */
+"\n"/*  */
+"\n"/* Returns the time spent during garbage collection while GC statistics collection */
+"\n"/* was enabled (in micro seconds). */
+"\n"/*  */
+"\n"/*    GC.time	  #=> 20000 */
+"  def self.time\n"
+"    Primitive.gc_time\n"
+"  end\n"
+"\n"
+"\n"/*  call-seq: */
+"\n"/* GC.heap_slots	=> Integer */
+"\n"/*  */
+"\n"/*  Returns the number of heap slots available for object allocations. */
+"\n"/*  */
+"\n"/* GC.heap_slots	#=> 10000 */
+,
+#line 340 "gc.rb"
+"  def self.heap_slots\n"
+"    Primitive.gc_heap_slots\n"
+"  end\n"
+"\n"
+"\n"/* call-seq: */
+"\n"/*    GC.heap_slots_live_after_last_gc	   => Integer */
+"\n"/*  */
+"\n"/* Returns the number of heap slots which were live after the last garbage collection. */
+"\n"/*  */
+"\n"/*    GC.heap_slots_live_after_last_gc	   #=> 231223 */
+"  def self.heap_slots_live_after_last_gc\n"
+"    Primitive.gc_heap_slots_live_after_last_gc\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_mallocs	   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number malloc calls. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_mallocs	   #=> 324234323246 */
+"  def self.total_mallocs\n"
+"    Primitive.gc_total_mallocs\n"
+"  end\n"
+"\n"
+"\n"/*   call-seq: */
+"\n"/*  GC.total_malloced_bytes	   => Integer */
+"\n"/*  */
+"\n"/*   Returns the number of bytes allocated. Might wrap around. */
+"\n"/*  */
+"\n"/*  GC.total_malloced_bytes	   #=> 354656256432446 */
+"  def self.total_malloced_bytes\n"
+"    Primitive.gc_total_malloced_bytes\n"
+"  end\n"
+"\n"
 "end\n"
 "\n"
 "module ObjectSpace\n"
@@ -943,9 +1033,11 @@ static const struct {
 "    Primitive.gc_start_internal full_mark, immediate_mark, immediate_sweep, false\n"
 "  end\n"
 "\n"
+,
+#line 381 "gc.rb"
 "  module_function :garbage_collect\n"
 "end\n"
-#line 949 "miniprelude.c"
+#line 1041 "miniprelude.c"
 };
 
 static const char prelude_name3[] = "<internal:numeric>";
@@ -1370,7 +1462,7 @@ static const struct {
 "  end\n"
 "\n"
 "end\n"
-#line 1374 "miniprelude.c"
+#line 1466 "miniprelude.c"
 };
 
 static const char prelude_name4[] = "<internal:io>";
@@ -1501,7 +1593,7 @@ static const struct {
 "    Primitive.io_write_nonblock(buf, exception)\n"
 "  end\n"
 "end\n"
-#line 1505 "miniprelude.c"
+#line 1597 "miniprelude.c"
 };
 
 static const char prelude_name5[] = "<internal:marshal>";
@@ -1549,7 +1641,7 @@ static const struct {
 "    alias restore load\n"
 "  end\n"
 "end\n"
-#line 1553 "miniprelude.c"
+#line 1645 "miniprelude.c"
 };
 
 static const char prelude_name6[] = "<internal:mjit>";
@@ -1597,7 +1689,7 @@ static const struct {
 "    private_constant(*constants)\n"
 "  end\n"
 "end\n"
-#line 1601 "miniprelude.c"
+#line 1693 "miniprelude.c"
 };
 
 static const char prelude_name7[] = "<internal:mjit_c>";
@@ -2682,7 +2774,7 @@ static const struct {
 ,
 #line 807 "mjit_c.rb"
 "end if RubyVM::MJIT.enabled? && RubyVM::MJIT.const_defined?(:C)\n"/* not defined for miniruby */
-#line 2686 "miniprelude.c"
+#line 2778 "miniprelude.c"
 };
 
 static const char prelude_name8[] = "<internal:pack>";
@@ -2721,7 +2813,7 @@ static const struct {
 "    Primitive.pack_unpack1(fmt, offset)\n"
 "  end\n"
 "end\n"
-#line 2725 "miniprelude.c"
+#line 2817 "miniprelude.c"
 };
 
 static const char prelude_name9[] = "<internal:trace_point>";
@@ -3158,7 +3250,7 @@ static const struct {
 "    Primitive.tracepoint_attr_instruction_sequence\n"
 "  end\n"
 "end\n"
-#line 3162 "miniprelude.c"
+#line 3254 "miniprelude.c"
 };
 
 static const char prelude_name10[] = "<internal:warning>";
@@ -3219,7 +3311,7 @@ static const struct {
 "    Primitive.rb_warn_m(msgs, uplevel, category)\n"
 "  end\n"
 "end\n"
-#line 3223 "miniprelude.c"
+#line 3315 "miniprelude.c"
 };
 
 static const char prelude_name11[] = "<internal:array>";
@@ -3296,7 +3388,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 3300 "miniprelude.c"
+#line 3392 "miniprelude.c"
 };
 
 static const char prelude_name12[] = "<internal:kernel>";
@@ -3485,7 +3577,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 3489 "miniprelude.c"
+#line 3581 "miniprelude.c"
 };
 
 static const char prelude_name13[] = "<internal:ractor>";
@@ -4356,7 +4448,7 @@ static const struct {
 "    }\n"
 "  end\n"
 "end\n"
-#line 4360 "miniprelude.c"
+#line 4452 "miniprelude.c"
 };
 
 static const char prelude_name14[] = "<internal:symbol>";
@@ -4379,7 +4471,7 @@ static const struct {
 "\n"
 "  alias intern to_sym\n"
 "end\n"
-#line 4383 "miniprelude.c"
+#line 4475 "miniprelude.c"
 };
 
 static const char prelude_name15[] = "<internal:timev>";
@@ -4797,7 +4889,7 @@ static const struct {
 "    Primitive.time_init_args(year, mon, mday, hour, min, sec, zone)\n"
 "  end\n"
 "end\n"
-#line 4801 "miniprelude.c"
+#line 4893 "miniprelude.c"
 };
 
 static const char prelude_name16[] = "<internal:thread_sync>";
@@ -4876,7 +4968,7 @@ static const struct {
 "    alias_method :<<, :push\n"
 "  end\n"
 "end\n"
-#line 4880 "miniprelude.c"
+#line 4972 "miniprelude.c"
 };
 
 static const char prelude_name17[] = "<internal:nilclass>";
@@ -4909,7 +5001,7 @@ static const struct {
 "    return 0.0\n"
 "  end\n"
 "end\n"
-#line 4913 "miniprelude.c"
+#line 5005 "miniprelude.c"
 };
 
 static const char prelude_name18[] = "<internal:prelude>";
@@ -4948,7 +5040,7 @@ static const struct {
 "    klass.new(self, *args, &block)\n"
 "  end\n"
 "end\n"
-#line 4952 "miniprelude.c"
+#line 5044 "miniprelude.c"
 };
 
 static const char prelude_name19[] = "<internal:gem_prelude>";
@@ -4985,7 +5077,7 @@ static const struct {
 #line 25 "gem_prelude.rb"
 "end if defined?(SyntaxSuggest)\n"
 "\n"
-#line 4989 "miniprelude.c"
+#line 5081 "miniprelude.c"
 };
 
 static const char prelude_name20[] = "<internal:yjit>";
@@ -5412,7 +5504,7 @@ static const struct {
 "    end\n"
 "  end\n"
 "end\n"
-#line 5416 "miniprelude.c"
+#line 5508 "miniprelude.c"
 };
 
 COMPILER_WARNING_POP
